{"version":3,"sources":["features/creating/CreateGame.module.scss","features/creating/DrawGrid.module.scss","components/MyMenubar.module.scss","features/menu/MainMenu.module.scss","features/playing/BlankCell.module.scss","features/playing/Controls.module.scss","myHistory.ts","api/kakuroApi.ts","utils/authHeader.ts","store/userSlice.ts","components/MyMenubar.tsx","features/alerts/alertSlice.ts","features/alerts/Alerts.tsx","features/list/listSlice.ts","utils/getHints.ts","utils/combinations.ts","utils/solvePuzzle.ts","utils/getCombinations.ts","store/gameSlice.ts","utils/pencilmarks.ts","utils/checkPuzzle.ts","utils/hintCells.ts","utils/preparePuzzle.ts","store/designSlice.ts","features/creating/DesignPanel.tsx","features/creating/HintDialog.tsx","features/creating/DesignCell.tsx","features/creating/DrawGrid.tsx","features/creating/SaveGame.tsx","utils/validateGrid.ts","features/creating/SetCells.tsx","features/creating/SetHints.tsx","components/MyInput.tsx","components/MySelectButton.tsx","components/MySlider.tsx","types/puzzle.ts","features/creating/SetSize.tsx","features/creating/CreateGame.tsx","features/list/PuzzleList.tsx","utils/makePlayable.ts","features/menu/MainMenu.tsx","features/playing/CombinationLine.tsx","features/playing/GuessButton.tsx","features/playing/Controls.tsx","utils/calcCellSize.ts","features/playing/BlankCell.tsx","features/playing/HintCell.tsx","features/playing/NumberCell.tsx","features/playing/GameGrid.tsx","features/playing/PlayGame.tsx","features/users/SignIn.tsx","features/users/SignUp.tsx","store/store.ts","App.tsx","reportWebVitals.ts","index.tsx","features/creating/SaveGame.module.scss","features/playing/CombinationLine.module.scss","features/playing/GuessButton.module.scss","features/creating/DesignCell.module.scss","features/creating/HintDialog.module.scss","features/playing/GameGrid.module.scss","features/playing/NumberCell.module.scss"],"names":["module","exports","createHashHistory","kakuroApi","axios","create","baseURL","process","authHeader","user","token","localStorage","getItem","Authorization","console","log","storeduser","JSON","parse","decoded","decode","Date","now","exp","removeItem","error","initialState","isLoggedIn","isRequesting","userSlice","createSlice","name","reducers","loginSuccess","state","action","payload","logoutFailed","logoutSuccess","signUpSuccess","signUpFailed","submitting","requestFailed","code","response","status","actions","MyMenubar","dispatch","useDispatch","useSelector","users","startItem","className","styles","menuItems","label","icon","command","myHistory","push","disabled","endItem","onClick","a","post","headers","stringify","model","start","end","alertSlice","alerts","pageTitle","isFetching","notFound","clearAlert","setAlert","alert","severity","setNotFound","setErrorAlert","summary","setSuccessAlert","setIsFetching","setPageTitle","document","title","Alerts","toastEl","useRef","useEffect","Object","keys","forEach","key","current","show","detail","ref","listSlice","list","fetchListSuccess","addPuzzleToList","setChoiceID","choice","getHints","game","index","hints","sum","count","used","Array","hIndex","cells","type","CellType","NumberCell","cell","guess","hintHorizontal","columnCount","vIndex","hintVertical","nextRow","length","combinations","digits","fill","_makeCombinations","min","set","digitsToCombination","makeCombinations","freeze","solutions","getCombinations","combs","filter","c","every","h","includes","_solvePuzzle","solvedGame","nc","solution","pencilMarks","nCell","rowData","getRowForCell","columnData","getColumnForCell","p","usedDigits","hint","tempGame","makePencilmarks","singlePencilmarksToGuess","solvePuzzle","Difficulty","PuzzleStates","original","map","logSolution","across","delta","x","cellIndexes","sumSolved","y","setGuess","i","pm","guessNumber","hComb","vComb","hDigits","from","Set","flat","vDigits","poss","e","sort","makePencilmarksForCell","zoomLevel","rowCount","level","hintCount","gameSlice","setCurrentGameSuccess","fetchGameSuccess","setSelectedIndex","currentIndex","selectedIndex","increaseZoom","decreaseZoom","newGame","currentCell","togglePencilMark","indexOf","splice","autoPencil","setCurrentGame","checkPuzzle","puzzle","sumHorizontal","sumVertical","HintCell","hc","valid","doMakeHintCells","nextColumn","BlankCell","hCell","isHint","preparePuzzle","Direction","DesignStepsEnum","cellString","join","designSteps","createGrid","columns","rows","item","activeStep","Raw","designSlice","setActiveStep","setItem","setBaseGame","clearDesignGame","setPuzzleState","updateCell","newCell","reduce","prev","curr","makeHintCells","solveGameSuccess","Solved","solveGameFailed","InsertHints","checkGameSuccess","Valid","createGameSuccess","DesignPanel","props","handleBack","handleNext","children","design","headerTemplate","options","titleClassName","HintDialog","down","visible","onHide","useState","setOptions","renderButtons","groupData","minSum","Math","maxSum","max","buttonGrid","n","acrossHint","handleClick","classNames","button","numbers","header","style","width","modal","DesignCell","dialogVisible","setDialogVisible","renderHint","value","hintStr","hintClass","hintMissing","classnames","designCell","DrawGrid","gameBackground","grid","gridTemplateColumns","SaveGame","exportVisible","setExportVisible","puzzleJSON","setPuzzleJSON","getState","result","values","newPuzzle","data","validatePuzzle","numberCount","message","SetCells","res","SetHints","MyInput","htmlFor","dangerouslySetInnerHTML","__html","component","MySlider","field","setFieldValue","id","onChange","event","handleChange","difficultyLevels","difficultyLabels","PuzzleSchema","Yup","shape","required","SetSize","importVisible","setImportVisible","initialValues","formikRef","handleSubmit","handleImport","enableReinitialize","onSubmit","validationSchema","innerRef","as","InputText","MySelectButton","target","CreateGame","puzzleStateJSON","createGame","createSteps","activeIndex","PuzzleList","get","autoLayout","stripedRows","selectionMode","selection","onSelectionChange","dataKey","sortable","body","date","createdAt","format","makePlayable","input","split","char","hintCell","rowGroup","columnGroup","MainMenu","content","CombinationLine","possibilities","setPossibilities","renderPossibility","direction","possibility","d","highlight","renderDigit","renderPossibilities","b","renderLine","text","GuessButton","digit","pencilMark","guessButton","pencilMark1","Controls","renderButton","controls","zoomButtons","guessButtons","calcCellSize","blank","fontSize","calcHintFontSize","guessFontSize","calcGuessFontSize","wrongGuess","number","selected","GameGrid","gamegrid","tabIndex","gridTemplateRows","renderCell","PlayGame","onKeyDown","newSelectedIndex","SignIn","height","to","email","password","resourceType","resources","login","UserSchema","SignUp","signUp","rootReducer","combineReducers","alertReducer","designReducer","listReducer","gameReducer","userReducer","store","configureStore","devTools","reducer","App","history","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"2GACAA,EAAOC,QAAU,CAAC,WAAa,+BAA+B,YAAc,gCAAgC,UAAU,4BAA4B,eAAe,iCAAiC,kBAAkB,oCAAoC,gBAAgB,oC,oBCAxQD,EAAOC,QAAU,CAAC,eAAiB,iCAAiC,KAAO,yB,0CCA3ED,EAAOC,QAAU,CAAC,UAAY,+B,oBCA9BD,EAAOC,QAAU,CAAC,QAAU,4B,oBCA5BD,EAAOC,QAAU,CAAC,MAAQ,2B,iUCA1BD,EAAOC,QAAU,CAAC,SAAW,2BAA2B,QAAU,0BAA0B,OAAS,yBAAyB,YAAc,gC,oHCC7HC,gB,0ECIAC,E,OAJGC,EAAMC,OAAO,CAC7BC,QAASC,oCCWIC,ICuBXC,EDvBWD,EAdf,WAKE,IAAME,EAAQC,aAAaC,QAAQ,SAEnC,OAAIF,EACK,CAAEG,cAAc,UAAD,OAAYH,IAE3B,CAAEG,cAAe,OC4B5BC,QAAQC,IAAI,2CACZ,IACE,IAAMC,EAAaL,aAAaC,QAAQ,QACxCH,EAAqB,MAAdO,EAAqBC,KAAKC,MAAMF,GAAc,KACrD,IAAMN,EAAQC,aAAaC,QAAQ,SAEnC,GAAIF,EAAO,CACT,IAAIS,EAAeC,iBAAOV,GAEtBW,KAAKC,OAAuB,IAAdH,EAAQI,MACxBT,QAAQC,IAAI,iBACZJ,aAAaa,WAAW,QACxBb,aAAaa,WAAW,SACxBf,EAAO,OAGX,MAAOgB,IACPd,aAAaa,WAAW,QACxBb,aAAaa,WAAW,SACxBf,EAAO,KAGT,IAAMiB,EAA2B,CAC/BC,WAAoB,MAARlB,EACZmB,cAAc,EACdnB,OACAgB,MAAO,MAGHI,EAAYC,YAAY,CAC5BC,KAAM,OACNL,eACAM,SAAU,CACRC,aADQ,SACKC,EAAOC,GAClBD,EAAMzB,KAAO0B,EAAOC,QACpBF,EAAMP,WAA+B,MAAlBQ,EAAOC,QAC1BF,EAAMT,MAAQ,KACdS,EAAMN,cAAe,GAEvBS,aAPQ,SAOKH,EAAOC,GAClBD,EAAMT,MAAQU,EAAOC,QACrBF,EAAMzB,KAAO,KACbyB,EAAMP,YAAa,EACnBO,EAAMN,cAAe,GAEvBU,cAbQ,SAaMJ,GACZA,EAAMzB,KAAO,KACbyB,EAAMP,YAAa,EACnBO,EAAMT,MAAQ,KACdS,EAAMN,cAAe,GAEvBW,cAnBQ,SAmBML,EAAOC,GACnBD,EAAMzB,KAAO0B,EAAOC,QACpBF,EAAMP,WAA+B,MAAlBQ,EAAOC,QAC1BF,EAAMT,MAAQ,KACdS,EAAMN,cAAe,GAEvBY,aAzBQ,SAyBKN,EAAOC,GAClBD,EAAMT,MAAQU,EAAOC,QACrBF,EAAMzB,KAAO,KACbyB,EAAMP,YAAa,EACnBO,EAAMN,cAAe,GAEvBa,WA/BQ,SA+BGP,GACTA,EAAMN,cAAe,GAEvBc,cAlCQ,SAkCMR,EAAOC,GACnBrB,QAAQC,IAAI,kBAAmBoB,EAAOC,SAItC,IAAMO,EAAOR,EAAOC,QAAQQ,SAASC,OAExB,MAATF,GAAyB,MAATA,IAElBhC,aAAaa,WAAW,QACxBb,aAAaa,WAAW,SACxBU,EAAMzB,KAAO,KACbyB,EAAMP,YAAa,EACnBO,EAAMT,MAAQ,KACdS,EAAMN,cAAe,OAMtB,EAQHC,EAAUiB,QAPZb,EADK,EACLA,aACAI,EAFK,EAELA,aACAC,EAHK,EAGLA,cACAI,EAJK,EAILA,cACAF,EALK,EAKLA,aAEAC,GAPK,EAMLF,cANK,EAOLE,YAGaZ,IAAf,Q,yBC/EekB,EA9Ca,WAC1B,IAAMC,EAAWC,cACTxC,EAASyC,aAAY,SAAChB,GAAD,OAAsBA,EAAMiB,SAAjD1C,KAEF2C,EACJ,qBAAKC,UAAWC,IAAOF,UAAvB,SACE,kDAIEG,EAAY,CAChB,CACEC,MAAO,OACPC,KAAM,oBACNC,QAAS,kBAAMC,EAAUC,KAAK,OAEhC,CACEJ,MAAO,gBACPC,KAAM,iBACNC,QAAS,kBAAMC,EAAUC,KAAK,YAC9BC,SAAkB,MAARpD,GAEZ,CACE+C,MAAO,cACPC,KAAM,eACNC,QAAS,kBAAMC,EAAUC,KAAK,YAI5BE,EAAUrD,EACd,cAAC,IAAD,CACE+C,MAAK,mBAAc/C,EAAKsB,MACxB0B,KAAK,iBACLM,QAAS,kBAAMf,ED2HC,uCAAgB,WAAMA,GAAN,eAAAgB,EAAA,+EAE5B7D,EAAU8D,KAAK,gBAAiB,KAAM,CAAEC,QAAS1D,MAFrB,8DAGzBoC,EAHyB,KAGzBA,SACTI,EAASX,EAAapB,KAAKkD,UAAUvB,KAJH,4CAOlCjC,aAAaa,WAAW,QACxBb,aAAaa,WAAW,SARU,qBAWpCwB,EAASV,KAX2B,+DAAhB,0DCxHlB,cAAC,IAAD,CACEkB,MAAM,kBACNC,KAAK,gBACLM,QAAS,kBAAMJ,EAAUC,KAAK,cAIlC,OAAO,cAAC,IAAD,CAASQ,MAAOb,EAAWc,MAAOjB,EAAWkB,IAAKR,K,SC5B9CS,EAAazC,YAAY,CACpCC,KAAM,SACNL,aATmB,CACnB8C,OAAQ,GACRC,UAAW,KACXC,YAAY,EACZC,SAAU,MAMV3C,SAAU,CACR4C,WADQ,SACG1C,EAAOC,UACTD,EAAMsC,OAAOrC,EAAOC,UAE7ByC,SAJQ,SAIC3C,EAAOC,GACd,IAAM2C,EAAQ3C,EAAOC,QACrBF,EAAMsC,OAAOM,EAAMC,UAAYD,EAC/B5C,EAAMwC,YAAa,GAErBM,YATQ,SASI9C,EAAOC,GACjBD,EAAMyC,SAAWxC,EAAOC,SAE1B6C,cAZQ,SAYM/C,EAAOC,GACnB,IAAM2C,EAAQ,CAAEC,SAAU,QAASG,QAAS/C,EAAOC,SACnDF,EAAMsC,OAAOM,EAAMC,UAAYD,EAC/B5C,EAAMwC,YAAa,GAErBS,gBAjBQ,SAiBQjD,EAAOC,GACrB,IAAM2C,EAAQ,CAAEC,SAAU,UAAWG,QAAS/C,EAAOC,SACrDF,EAAMsC,OAAOM,EAAMC,UAAYD,EAC/B5C,EAAMwC,YAAa,GAErBU,cAtBQ,SAsBMlD,EAAOC,GACnBD,EAAMwC,WAAavC,EAAOC,SAE5BiD,aAzBQ,SAyBKnD,EAAOC,GAClBD,EAAMuC,UAAYtC,EAAOC,QACzBkD,SAASC,MAAQpD,EAAOC,YAKvB,EAQHmC,EAAWzB,QAPb8B,EADK,EACLA,WAEAK,GAHK,EAELJ,SAFK,EAGLI,eACAE,EAJK,EAILA,gBAMaZ,GAVR,EAKLa,cALK,EAMLC,aANK,EAOLL,YAGaT,EAAf,SC3CeiB,EApBU,WACvB,IAAMhB,EAAStB,aAAY,SAAChB,GAAD,OAAsBA,EAAMsC,OAAOA,UACxDxB,EAAWC,cACXwC,EAAUC,iBAAY,MAc5B,OAZAC,qBAAU,WACRC,OAAOC,KAAKrB,GAAQsB,SAAQ,SAACC,GAAS,IAAD,EACnC,UAAAN,EAAQO,eAAR,SAAiBC,KAAK,CACpBlB,SAAUgB,EACVb,QAASV,EAAOuB,GAAKb,QACrBgB,OAAQ1B,EAAOuB,GAAKG,SAGtBlD,EAAS4B,EAAWmB,SAErB,CAAC/C,EAAUwB,IAEP,cAAC,IAAD,CAAO2B,IAAKV,K,yBCFRW,EAAYtE,YAAY,CACnCC,KAAM,OACNL,aANmC,CACnC2E,KAAM,IAMNrE,SAAU,CACRsE,iBAAkB,SAACpE,EAAOC,GACxBD,EAAMmE,KAAOlE,EAAOC,SAEtBmE,gBAAiB,SAACrE,EAAOC,GACvBD,EAAMmE,KAAKzC,KAAKzB,EAAOC,SACvBtB,QAAQC,IAAI,YAEdyF,YAAa,SAACtE,EAAOC,GACnBD,EAAMuE,OAAStE,EAAOC,YAKrB,EACLgE,EAAUtD,QADGyD,EAAR,EAAQA,gBAAiBD,EAAzB,EAAyBA,iBAAkBE,EAA3C,EAA2CA,YAGnCJ,KAAf,QCvCe,SAASM,GAASC,EAAiBC,GAQhD,IAPA,IAAMC,EAAQ,CACZ,CAAED,OAAQ,EAAGE,KAAM,EAAGC,OAAQ,EAAGC,KAAM,IAAIC,OAC3C,CAAEL,OAAQ,EAAGE,KAAM,EAAGC,OAAQ,EAAGC,KAAM,IAAIC,QAEzCC,EAASN,EAGND,EAAKQ,MAAMD,GAAQE,OAASC,GAASC,YAAY,CACtD,IAAMC,EAAOZ,EAAKQ,MAAMD,GACpBK,EAAKC,MAAQ,GACfX,EAAM,GAAGG,KAAKpD,KAAK2D,EAAKC,OAE1BN,IAQF,IALAL,EAAM,GAAGD,MAAQM,EACjBL,EAAM,GAAGC,IAAOH,EAAKQ,MAAMD,GAAsBO,iBAAoB,EAGrEP,EAASN,GAENM,EAAS,GAAKP,EAAKe,cAAgB,GACpCf,EAAKQ,MAAMD,EAAS,GAAGE,OAASC,GAASC,YACzC,CACAJ,IACA,IAAMK,EAAOZ,EAAKQ,MAAMD,GACpBK,EAAKC,MAAQ,GACfX,EAAM,GAAGG,KAAKpD,KAAK2D,EAAKC,OAI5BX,EAAM,GAAGE,MAAQG,EAASL,EAAM,GAAGD,MAInC,IADA,IAAIe,EAASf,EACND,EAAKQ,MAAMQ,GAAQP,OAASC,GAASC,YAAY,CACtD,IAAMC,EAAOZ,EAAKQ,MAAMQ,GACpBJ,EAAKC,MAAQ,GACfX,EAAM,GAAGG,KAAKpD,KAAK2D,EAAKC,OAE1BG,GAAUhB,EAAKe,YAGjBb,EAAM,GAAGD,MAAQe,EACjBd,EAAM,GAAGC,IAAOH,EAAKQ,MAAMQ,GAAsBC,eAAkB,EAKnE,IADA,IAAIC,GADJF,EAASf,GACcD,EAAKe,YAE1BG,EAAUlB,EAAKQ,MAAMW,QACrBnB,EAAKQ,MAAMU,GAAST,OAASC,GAASC,YACtC,CACAK,EAASE,EACT,IAAMN,EAAOZ,EAAKQ,MAAMQ,GACpBJ,EAAKC,MAAQ,GACfX,EAAM,GAAGG,KAAKpD,KAAK2D,EAAKC,OAE1BK,EAAUF,EAAShB,EAAKe,YAG1B,IAAMX,GAASY,EAASd,EAAM,GAAGD,OAASD,EAAKe,YAG/C,OAFAb,EAAM,GAAGE,MAAQA,EAEVF,E,aCTHkB,GAlDmB,WAwCvB,IAvCA,IAAMA,EAA8B,GAC9BC,EAAS,IAAIf,MAAM,IAAIgB,MAAK,GA0B5BC,EAAoB,SAApBA,EAAqBC,EAAanC,GACtB,KAAZA,EAzBsB,WAK1B,IAJA,IAAMoC,EAAM,IAAInB,MACZF,EAAQ,EACRD,EAAM,EAEDF,EAAQ,EAAGA,EAAQoB,EAAOF,OAAQlB,IACrCoB,EAAOpB,KACTwB,EAAIxE,KAAKgD,GACTG,GAAS,EACTD,GAAOF,GAINmB,EAAahB,KAChBgB,EAAahB,GAAS,IAGnBgB,EAAahB,GAAOD,KACvBiB,EAAahB,GAAOD,GAAO,IAAIG,OAGjCc,EAAahB,GAAOD,GAAKlD,KAAKwE,GAK5BC,IAEAL,EAAOhC,IAAW,EAClBkC,EAAkBC,EAAKnC,EAAU,GACjCgC,EAAOhC,IAAW,EAClBkC,EAAkBC,EAAKnC,EAAU,GACjCA,MAIKmC,EAAM,EAAGA,EAAM,EAAGA,IACzBH,EAAOG,IAAO,EACdD,EAAkBC,EAAKA,EAAM,GAC7BH,EAAOG,IAAO,EAIhB,cADOJ,EAAa,GACbA,EAG2BO,GACpC1C,OAAO2C,OAAOR,IAECA,ICrDXS,GDqDWT,MErDA,SAASU,GACtB5B,GAEA,IAAI6B,EAAQX,GAAalB,EAAME,OAAOF,EAAMC,KAK5C,OAFA4B,EAAQA,EAAMC,QAAO,SAAAC,GAAC,OAAI/B,EAAMG,KAAK6B,OAAM,SAAAC,GAAC,OAAIF,EAAEG,SAASD,SD+B7D,SAASE,GAAarC,EAAiBC,GACrC,GAAIA,GAASD,EAAKQ,MAAMW,OAAQ,CAE9B,IAAMmB,EAAwBhI,KAAKC,MAAMD,KAAKkD,UAAUwC,IACxDsC,EAAW9B,MAAMrB,SAAQ,SAAA8C,GACvB,GAAIA,EAAExB,OAASC,GAASC,WAAY,CAClC,IAAM4B,EAAKN,EACXM,EAAGC,SAAWD,EAAG1B,MACjB0B,EAAG1B,MAAQ,EACX0B,EAAGE,YAAc,OAGrBZ,GAAU5E,KAAKqF,OACV,CACL,IAAM1B,EAAOZ,EAAKQ,MAAMP,GAExB,GAAIW,EAAKH,OAASC,GAASC,YAAeC,EAAqBC,MAAQ,EAErEwB,GAAarC,EAAMC,EAAQ,OACtB,CAGL,IAAMyC,EAAqB9B,EACrB+B,EAAUC,GAAc5C,EAAMY,EAAKX,OACnC4C,EAAaC,GAAiB9C,EAAMY,EAAKX,OAE/CyC,EAAMD,YAAYtD,SAAQ,SAAA4D,GAGxB,IACEJ,EAAQK,WAAWZ,SAASW,KAC5BF,EAAWG,WAAWZ,SAASW,MAS9BJ,EAAQK,WAAW7B,SAAWwB,EAAQvC,MAAQ,GAC7CuC,EAAQxC,IAAM4C,IAAMJ,EAAQM,MAC7BJ,EAAWG,WAAW7B,SAAW0B,EAAWzC,MAAQ,GACnDyC,EAAW1C,IAAM4C,IAAMF,EAAWI,MAJtC,CAUAP,EAAM7B,MAAQkC,EAGd,IAAMG,EAAsB5I,KAAKC,MAAMD,KAAKkD,UAAUwC,IACtDmD,GAAgBD,GAChBE,GAAyBF,GACzBb,GAAaa,EAAUjD,EAAQ,GAC/ByC,EAAM7B,MAAQ,QAyCPwC,IExIHC,GAQA5C,GAMA6C,GF0HGF,GAxBf,SAAqBG,GAEnB,IAAMxD,EAAkB1F,KAAKC,MAAMD,KAAKkD,UAAUgG,IAIlD,IADAL,GAAgBnD,GACToD,GAAyBpD,KAMhC,OAJA6B,GAAY,IAAIvB,MAChB+B,GAAarC,EAAM,GAGM,IAArB6B,GAAUV,OACL,CAAErG,MAAO,gCACP+G,GAAUV,OAAS,EACrB,CACLrG,MAAM,2CAAD,OAA6C+G,GAAUV,OAAvD,QApGX,SAAqBnB,GACnB7F,QAAQC,IACN,WACAE,KAAKkD,UACHwC,EAAKQ,MACFwB,QAAO,SAAAC,GAAC,OAAIA,EAAExB,OAASC,GAASC,cAChC8C,KAAI,SAAAxB,GAAC,OAAKA,EAAkBO,cAiGjCkB,CAAY7B,GAAU,IACf,CAAEW,SAAUX,GAAU,MGrI1B,SAASe,GAAT,EAEL3C,GAUA,IARC,IAHCO,EAGF,EAHEA,MAAOO,EAGT,EAHSA,YAET4C,IACA,yDACMC,EAAQD,EAAS,EAAI5C,EACvB8C,EAAI5D,EAAQ2D,EACZE,EAAc,GACdd,EAAa,GACb7C,EAAM,EACN4D,EAAY,EAETvD,EAAMqD,GAAGpD,OAASC,GAASC,YAChCkD,GAAKD,EAIP,IADA,IAAII,EAAIH,EAENG,EAAIJ,EAAQpD,EAAMW,QAClBX,EAAMwD,EAAIJ,GAAOnD,OAASC,GAASC,YACnC,CACAqD,GAAKJ,EACLE,EAAY7G,KAAK+G,GACjB,IAAMtB,EAAQlC,EAAMwD,GAChBtB,EAAM7B,QACRmC,EAAW/F,KAAKyF,EAAM7B,OACtBV,GAAOuC,EAAM7B,OAGX6B,EAAMF,WACRuB,GAAarB,EAAMF,UAIvB,IAAMS,EAAOU,EACRnD,EAAMqD,GAAiB/C,eACvBN,EAAMqD,GAAiB5C,aACtBb,GAAS4D,EAAIH,GAAKD,EAExB,MAAO,CAAE3D,QAAOgD,OAAM7C,QAAOD,MAAK4D,YAAWD,cAAad,cAGrD,SAASF,GAAiB9C,EAAiBC,GAChD,OAAO2C,GAAc5C,EAAMC,GAAO,GAK7B,SAASmD,GAAyBpD,GACvC,IAAIiE,GAAW,EAaf,OAXAjE,EAAMQ,MAAMrB,SAAQ,SAAA8C,GAClB,GAAIA,EAAExB,OAASC,GAASC,WAAY,CAAC,IAAD,EAC5BC,EAAOqB,EACK,MAAdrB,EAAKC,OAA8C,KAA7B,UAAAD,EAAK6B,mBAAL,eAAkBtB,WHjD3C,SAAqBnB,EAAiBC,EAAeY,GACzDb,EAAKQ,MAAMP,GAAuBY,MAAQA,EAC3C+B,GAAc5C,EAAMC,GAAO6D,YAAY3E,SAAQ,SAAA+E,GAC7C,IAAMxB,EAAQ1C,EAAKQ,MAAM0D,GACzBxB,EAAMD,YAAcC,EAAMD,YAAYT,QAAO,SAAAmC,GAAE,OAAIA,IAAOtD,QAG5DiC,GAAiB9C,EAAMC,GAAO6D,YAAY3E,SAAQ,SAAA+E,GAChD,IAAMxB,EAAQ1C,EAAKQ,MAAM0D,GACzBxB,EAAMD,YAAcC,EAAMD,YAAYT,QAAO,SAAAmC,GAAE,OAAIA,IAAOtD,QG0CtDuD,CAAYpE,EAAMY,EAAKX,MAAOW,EAAK6B,YAAY,IAC/CwB,GAAW,OAKVA,EA4BF,SAASd,GAAgBnD,GAC9BA,EAAKQ,MAAMrB,SAAQ,SAACyB,EAAMX,GACpBW,EAAKH,OAASC,GAASC,YA3BxB,SACL+B,EACAzC,EACAD,GAEA,KAAI0C,EAAM7B,MAAQ,GAAlB,CAKA,IAAMX,EAAQH,GAASC,EAAMC,GACvBoE,EAAQvC,GAAgB5B,EAAM,IAC9BoE,EAAQxC,GAAgB5B,EAAM,IAE9BqE,EAAUjE,MAAMkE,KAAK,IAAIC,IAAIJ,EAAMK,SACnCC,EAAUrE,MAAMkE,KAAK,IAAIC,IAAIH,EAAMI,SAEnCrE,EAAI,uBAAOH,EAAM,GAAGG,MAAhB,aAAyBH,EAAM,GAAGG,OACtCuE,EAAOL,EACVvC,QAAO,SAAA6C,GAAC,OAAIF,EAAQvC,SAASyC,KAAOxE,EAAK+B,SAASyC,MAClDC,OAEHpC,EAAMD,YAAcmC,GAMhBG,CAAuBnE,EAAqBX,EAAOD,O,SD5F7CsD,O,eAAAA,I,mBAAAA,I,2BAAAA,I,eAAAA,I,wBAAAA,Q,cAQA5C,K,sBAAAA,E,oBAAAA,E,yBAAAA,Q,cAMA6C,O,aAAAA,I,iBAAAA,I,oBAAAA,Q,KAkEZ,IAAMxI,GAA+B,CACnCiK,UAAW,EACXhF,KAAM,CACJzE,OAAQ,EACRiF,MAAO,GACPO,aAAc,EACdkE,UAAW,EACX7J,KAAM,QACN8J,OAAQ,EACRC,WAAY,GAEdjF,MAAO,CACL,CAAED,OAAQ,EAAGE,KAAM,EAAGC,OAAQ,EAAGC,KAAM,IAAIC,OAC3C,CAAEL,OAAQ,EAAGE,KAAM,EAAGC,OAAQ,EAAGC,KAAM,IAAIC,SAIlC8E,GAAYjK,YAAY,CACnCC,KAAM,OACNL,gBACAM,SAAU,CACRgK,sBADQ,SACc9J,EAAOC,GAC3BD,EAAMyE,KAAOxE,EAAOC,SAEtB6J,iBAJQ,SAIS/J,EAAOC,GACtBD,EAAMyE,KAAN,eAAkBxE,EAAOC,SAEzBF,EAAMyE,KAAKQ,MACRwB,QAAO,SAAAC,GAAC,OAAIA,EAAExB,OAASC,GAASC,cAChCxB,SAAQ,SAAAyB,GACP,IAAM8B,EAAQ9B,EACT8B,EAAM7B,QACT6B,EAAM7B,MAAQ,GAEX6B,EAAMD,cACTC,EAAMD,YAAc,QAI5B8C,iBAnBQ,SAmBShK,EAAOC,GACtB,IAAIgK,EAAehK,EAAOC,QAC1BF,EAAMkK,cAAgBD,EACtBjK,EAAM2E,MAAQH,GAASxE,EAAMyE,KAAOwF,IAEtCE,aAxBQ,SAwBKnK,GACXA,EAAMyJ,WAAa,GAErBW,aA3BQ,SA2BKpK,GACXA,EAAMyJ,WAAa,GAErBf,SA9BQ,SA8BC1I,EAAOC,GACd,MAAyBA,EAAOC,QAAxBwE,EAAR,EAAQA,MAAOY,EAAf,EAAeA,MACT+E,EAAqBtL,KAAKC,MAAMD,KAAKkD,UAAUjC,EAAMyE,OACrD6F,EAA2BD,EAAQpF,MAAMP,GAC3C4F,EAAYpF,OAASC,GAASC,aAChCkF,EAAYhF,MAAQA,EAIpBtF,EAAMyE,KAAO4F,GAEfrK,EAAM2E,MAAQH,GAASxE,EAAMyE,KAAOC,IAEtC6F,iBA3CQ,SA2CSvK,EAAOC,GACtB,MAAyBA,EAAOC,QAAxBwE,EAAR,EAAQA,MAAOY,EAAf,EAAeA,MACT+E,EAAqBtL,KAAKC,MAAMD,KAAKkD,UAAUjC,EAAMyE,OACrD6F,EAA2BD,EAAQpF,MAAMP,GAE/C,GAAI4F,EAAYpF,OAASC,GAASC,WAAY,CAC5C,IAAMV,EAAQ4F,EAAYpD,YAAYsD,QAAQlF,GAE1CZ,EAAQ,GACV4F,EAAYpD,YAAYxF,KAAK4D,GAC7BgF,EAAYpD,YAAYqC,QAExBe,EAAYpD,YAAYuD,OAAO/F,EAAO,GAExC1E,EAAMyE,KAAO4F,IAGjBK,WA5DQ,SA4DG1K,EAAOC,GAEhB4H,GAAyB7H,EAAMyE,MAG/BmD,GAAgB5H,EAAMyE,UAKrB,GASHoF,GAAUjJ,QAPZuJ,IAFK,GACLJ,iBADK,GAELI,cACAC,GAHK,GAGLA,aACAJ,GAJK,GAILA,iBACAF,GALK,GAKLA,sBACApB,GANK,GAMLA,SACAgC,GAPK,GAOLA,WACAH,GARK,GAQLA,iBAGaV,MAAf,QAEac,GACX,SAAClG,GAAD,8CACA,WAAO3D,GAAP,eAAAgB,EAAA,uDACQuI,EAAqBtL,KAAKC,MAAMD,KAAKkD,UAAUwC,KAG7CQ,MACLwB,QAAO,SAAAC,GAAC,OAAIA,EAAExB,OAASC,GAASC,cAChCxB,SAAQ,SAAAyB,GACP,IAAM8B,EAAQ9B,EACT8B,EAAM7B,QACT6B,EAAM7B,MAAQ,GAEX6B,EAAMD,cACTC,EAAMD,YAAc,OAI1BpG,EAASgJ,GAAsBO,IAhBjC,2CADA,uDEjJaO,OA3Cf,SAAqBC,GACnB,IAAQ5F,EAAU4F,EAAV5F,MAGJ6F,EAAgB,EAChBC,EAAc,EAwBlB,OAnBiB9F,EACdwB,QAAO,SAAAC,GAAC,OAAIA,EAAExB,OAASC,GAAS6F,YAChCrE,OAAM,SAAAD,GACL,IAAMuE,EAAKvE,EAUX,OARIuE,EAAG1F,iBACLuF,GAAiBG,EAAG1F,gBAGlB0F,EAAGvF,eACLqF,GAAeE,EAAGvF,gBAIhBuF,EAAG1F,gBAAkB0F,EAAG1F,gBAAkB,MAC1C0F,EAAGvF,cAAgBuF,EAAGvF,cAAgB,MAQ1CoF,IAAkBC,EACb,CACLG,OAAO,EACP3L,MAAM,iBAAD,OAAmBuL,EAAnB,mBAA2CC,EAA3C,qBAIF,CAAEG,OAAO,GAVP,CAAEA,OAAO,EAAO3L,MAAO,4BCZ3B,SAAS4L,GAAgBN,GAK9B,IAJA,IAAQ5F,EAAU4F,EAAV5F,MACJ2E,EAAY,EAGPlF,EAAQ,EAAGA,EAAQO,EAAMW,OAAS,EAAGlB,IAAS,CACrD,IAAMW,EAAcJ,EAAMP,GACpB0G,EAAa1G,EAAQ,EACrBiB,EAAUjB,EAAQmG,EAAOrF,YAE/B,GAAIH,EAAKH,OAASC,GAASkG,UACrBpG,EAAMmG,GAAYlG,OAASC,GAASC,aACtCC,EAAKH,KAAOC,GAAS6F,SACpB3F,EAAmBE,gBAAkB,EACtCqE,GAAa,GAIbjE,EAAUV,EAAMW,QAChBX,EAAMU,GAAST,OAASC,GAASC,aAEjCC,EAAKH,KAAOC,GAAS6F,SACpB3F,EAAmBK,cAAgB,EACpCkE,GAAa,QAEV,GAAIvE,EAAKH,OAASC,GAAS6F,SAAU,CAC1C,IAAMM,EAAQjG,EACVkG,GAAS,EAETtG,EAAMmG,GAAYlG,OAASC,GAASC,cACR,IAA1BkG,EAAM/F,iBACRqE,GAAa,GAGf2B,GAAS,GAIT5F,EAAUV,EAAMW,QAChBX,EAAMU,GAAST,OAASC,GAASC,cAEL,IAAxBkG,EAAM5F,eACRkE,GAAa,GAGf2B,GAAS,GAINA,IACHlG,EAAKH,KAAOC,GAASkG,YAK3BR,EAAOjB,UAAYA,E,2BCvDN4B,ICHHC,GAcAC,GDXGF,GAbf,SAAuB/G,GACrB,IAAMkH,EAAalH,EAAKQ,MACrBiD,KAAI,SAAA7C,GAAI,OACPA,EAAKH,OAASC,GAASC,WAAa,EAAKC,EAAqB4B,YAE/D2E,KAAK,IAEUvB,GAAY5F,EAAtBQ,MAAR,aAA8BR,EAA9B,KAGA,OAFmB,2BAAQ4F,GAAR,IAAiBsB,iB,SCE1BF,O,2BAAAA,I,uBAAAA,I,gBAAAA,Q,cAcAC,O,qBAAAA,I,uBAAAA,I,6BAAAA,I,8BAAAA,Q,KAOL,IAAMG,GAAc,CACzB,CAAEvK,MAAO,YACT,CAAEA,MAAO,aACT,CAAEA,MAAO,gBACT,CAAEA,MAAO,iBAQLwK,GAAa,SAACC,EAAiBC,GAAlB,OACjBjH,MAAMkE,KAAK,CAAErD,OAAQmG,EAAUC,IAAQ,SAACC,EAAMvH,GAAP,MAAkB,CACvDA,QACAQ,KAAMC,GAASkG,eAGb7L,GAAiC,CACrC0M,WAAY,EACZrB,OAAQ,CACNhL,KAAM,UACN8J,MAAO,EACPnE,YAAa,GACbkE,SAAU,GACVzE,MAAO6G,GAAW,GAAI,IACtB9L,MAAOgI,GAAamE,IACpBvC,WAAY,IAIHwC,GAAcxM,YAAY,CACrCC,KAAM,SACNL,gBACAM,SAAU,CACRuM,cAAe,SAACrM,EAAOC,GACrBD,EAAMkM,WAAajM,EAAOC,QAC1BzB,aAAa6N,QAAQ,cAAevN,KAAKkD,UAAUjC,KAErDuM,YAAa,SAACvM,EAAOC,GACnBD,EAAM6K,OAAN,2BAAoB7K,EAAM6K,QAAW5K,EAAOC,SAC5CF,EAAM6K,OAAO5F,MAAQ6G,GACnB9L,EAAM6K,OAAOrF,YACbxF,EAAM6K,OAAOnB,WAGjB8C,gBAAiB,WAEf,OADA/N,aAAaa,WAAW,eACjBE,IAETiN,eAAgB,SAACzM,EAAOC,GACtB,OAAOA,EAAOC,SAEhBwM,WAAY,SAAC1M,EAAOC,GAClB,IAAM0M,EAAU1M,EAAOC,QAGrByM,EAAQzH,OAASC,GAASC,YACxBuH,EAAwBrH,QAEzBqH,EAAwBrH,MAAQ,GAGnCtF,EAAM6K,OAAO5F,MAAM0H,EAAQjI,OAASiI,EACpC3M,EAAM6K,OAAO7K,MAAQgI,GAAamE,IAClCnM,EAAM6K,OAAOjB,UAAgC5J,EAAM6K,OFtFzC5F,MAAM2H,QAbJ,SAACC,EAAcC,GAC7B,GAAIA,EAAK5H,OAASC,GAAS6F,SACzB,OAAO6B,EAEP,IAAMvB,EAAQwB,EACd,OACED,IAC2B,IAA1BvB,EAAM/F,eAAwB,EAAI,KACV,IAAxB+F,EAAM5F,aAAsB,EAAI,KAKH,IEwFlCqH,cAAe,SAAA/M,GACbmL,GAAgBnL,EAAM6K,SAExBmC,iBAAkB,SAAChN,EAAOC,GACxBD,EAAM6K,OAAS5K,EAAOC,QACtBF,EAAM6K,OAAO7K,MAAQgI,GAAaiF,QAEpCC,gBAAiB,SAAAlN,GACfA,EAAM6K,OAAO7K,MAAQgI,GAAamE,IAClCnM,EAAMkM,WAAaR,GAAgByB,aAErCC,iBAAkB,SAAApN,GAChBA,EAAM6K,OAAO7K,MAAQgI,GAAaqF,OAEpCC,kBAAmB,WAGjB,OADA7O,aAAaa,WAAW,eACjBE,OAKN,GAWH4M,GAAYxL,QATd4L,IAFK,GACLY,iBADK,GAELZ,iBACAc,GAHK,GAGLA,kBACAjB,GAJK,GAILA,cACAE,GALK,GAKLA,YACAE,GANK,GAMLA,eACAM,GAPK,GAOLA,cACAC,GARK,GAQLA,iBACAE,GATK,GASLA,gBACAR,GAVK,GAULA,WAGaN,MAAf,Q,mEC1FemB,GArC+B,SAAAC,GAC5C,IAAQC,EAAqCD,EAArCC,WAAYC,EAAyBF,EAAzBE,WAAYC,EAAaH,EAAbG,SACxBzB,EAAelL,aAAY,SAAChB,GAAD,OAAsBA,EAAM4N,UAAvD1B,WAgCR,OAAO,cAAC,IAAD,CAAO2B,eA9BS,SAACC,GACtB,IAAM3M,EAAS,UAAM2M,EAAQ3M,UAAd,eACT4M,EAAc,UAAMD,EAAQC,eAAd,WAEpB,OACE,sBAAK5M,UAAWA,EAAhB,UACE,uBAAMA,UAAW4M,EAAjB,kBACQ7B,EAAa,EADrB,KAC0BL,GAAYK,GAAY5K,SAGlD,uBAAMH,UAAW4M,EAAjB,UACE,cAAC,IAAD,CACEzM,MAAM,OACNC,KAAK,qBACLM,QAAS4L,EACT9L,SAAwB,MAAd8L,IAGZ,cAAC,IAAD,CACEnM,MAAM,OACNC,KAAK,sBACLM,QAAS6L,EAET/L,SAAwB,MAAd+L,WAOb,SAAwCC,K,wDCqDlCK,GAhFqB,SAAC,GAM9B,IALL3I,EAKI,EALJA,KACA+C,EAII,EAJJA,OACA6F,EAGI,EAHJA,KACAC,EAEI,EAFJA,QACAC,EACI,EADJA,OAEQtD,EAAW7J,aAAY,SAAChB,GAAD,OAAsBA,EAAM4N,UAAnD/C,OACR,EAA8BuD,mBAAmB,IAAjD,oBAAON,EAAP,KAAgBO,EAAhB,KACMvN,EAAWC,cAgBXuN,EAAgB,SAAClG,GACrB,IAAMmG,EAAYlH,GAChBwD,EACAxF,EAAKX,OAAS0D,EAAS,EAAIyC,EAAOrF,aAClC4C,GAMI5B,EAAQ9C,OAAOC,KAAKkC,GAAa0I,EAAU1J,QAAQqD,KAAI,SAAAoB,GAAC,OAAKA,KAC7DkF,EAASC,KAAKxI,IAAL,MAAAwI,KAAI,aAAQjI,IACrBkI,EAASD,KAAKE,IAAL,MAAAF,KAAI,aAAQjI,IAE3B,OACE,sBAAKrF,UAAU,GAAf,UACE,qBAAKA,UAAWC,KAAOE,MAAvB,SAA+B8G,EAAS,SAAW,SACnD,qBAAKjH,UAAWC,KAAOwN,WAAvB,SACGd,EAAQ5F,KAAI,SAAA2G,GAAC,OACZ,cAAC,IAAD,CAEEvN,MAAOuN,EAAIL,GAAUK,EAAIH,EAAS,GAAK,GAAKG,EAC5ChN,QAAS,kBApCD,SAACgN,EAAWC,GAC9B,IAAMnC,EAAO,2BAAQtH,GAAR,IAAcH,KAAMC,GAAS6F,WACtC8D,EACFnC,EAAQpH,eAAiBsJ,EAEzBlC,EAAQjH,aAAemJ,EAGzB/N,EAAS4L,GAAWC,IACfmC,GAAeb,GAClBE,IA0BuBY,CAAYF,EAAGzG,IAC9BzG,SAAUkN,EAAIL,GAAUK,EAAIH,EAC5BvN,UAAW6N,KACT,mBACA5N,KAAO6N,OACP7G,EAAS,mBAAqB,kBAP3ByG,YAsBjB,OANApL,qBAAU,WAER,IAAMyL,EAAUnK,MAAMkE,KAAK,CAAErD,OAAQ,KAAM,SAAC0D,EAAGX,GAAJ,OAAUA,KACrD0F,EAAWa,KACV,IAGD,eAAC,KAAD,CACEC,OAAO,8BACPC,MAAO,CAAEC,MAAO,QAChBnB,QAASA,EACToB,OAAO,EACPnB,OAAQA,EALV,UAMG/F,GAAUkG,GAAc,GACxBL,GAAQK,GAAc,OCtBdiB,GAzDqB,SAAC,GAAqB,IAAnBlK,EAAkB,EAAlBA,KAC7B6G,GAD+C,EAAZxH,MACpB1D,aAAY,SAAChB,GAAD,OAAsBA,EAAM4N,UAAvD1B,YACFpL,EAAWC,cACjB,EAA0CqN,oBAAS,GAAnD,oBAAOoB,EAAP,KAAsBC,EAAtB,KAuBMC,EAAa,SAACC,GAClB,GAAIA,EAAO,CACT,IAAMC,EAAUD,EAAQ,EAAIA,EAAQ,IAC9BE,EAAYF,EAAQ,EAAI,GAAKvO,KAAO0O,YAC1C,OAAO,qBAAK3O,UAAW0O,EAAhB,SAA4BD,IAEnC,OAAO,MAIX,OACE,qCACE,sBACEzO,UAAW4O,KAAW3O,KAAO4O,WAAY3K,EAAKH,MAC9CrD,QA/Bc,SAACyH,GACnB,GAAmB,IAAf4C,EAAkB,CAEpB,IAAMS,EAAO,2BACRtH,GADQ,IAEXH,KACEG,EAAKH,OAASC,GAASkG,UACnBlG,GAASC,WACTD,GAASkG,YAEjBvK,EAAS4L,GAAWC,SACI,IAAfT,GAAoB7G,EAAKH,OAASC,GAAS6F,UAEpDyE,GAAiB,IAgBjB,UAIE,qBAAKtO,UAAU,iBAAf,SAAiCuO,EAAWrK,EAAKE,kBACjD,qBAAKpE,UAAU,eAAf,SAA+BuO,EAAWrK,EAAKK,gBAC/C,qBAAKvE,UAAWC,KAAO6F,SAAvB,SAAkCyI,EAAWrK,EAAK4B,eAEpD,cAAC,GAAD,CACE5B,KAAMA,EACN6I,QAASsB,EACTrB,OA5CO,WACXsB,GAAiB,IA4CbrH,OAA+B,MAAvB/C,EAAKE,eACb0I,KAA2B,MAArB5I,EAAKK,mB,qBCtCJuK,GAtBY,WACzB,MAEIjP,aAAY,SAAChB,GAAD,OAAsBA,EAAM4N,UAD1C/C,OAAUrF,EADZ,EACYA,YAAaP,EADzB,EACyBA,MAGzB,OACE,8BACE,qBAAK9D,UAAWC,KAAO8O,eAAvB,SACE,qBACE/O,UAAWC,KAAO+O,KAClBf,MAAO,CACLgB,oBAAoB,UAAD,OAAY5K,EAAZ,WAHvB,SAKGP,EAAMiD,KAAI,SAACxB,EAAGiC,GAAJ,OACT,cAAC,GAAD,CAAoBjE,MAAOiE,EAAGtD,KAAMqB,GAAnBiC,a,oBC+Fd0H,GAjGY,WACzB,MAA0CjC,oBAAS,GAAnD,oBAAOkC,EAAP,KAAsBC,EAAtB,KACA,EAAoCnC,mBAAS,IAA7C,oBAAOoC,EAAP,KAAmBC,EAAnB,KACA,EAA+BzP,aAC7B,SAAChB,GAAD,OAAsBA,EAAM4N,UADtB1B,EAAR,EAAQA,WAAYrB,EAApB,EAAoBA,OAGd/J,EAAWC,cAEjB0C,qBAAU,WACRgN,EAAc1R,KAAKkD,UAAU4I,MAE5B,CAACA,IAwBJ,OACE,eAAC,GAAD,CAAa4C,WAvBI,WACjB3M,EAASuL,GAAcH,EAAa,KAsBpC,UACE,qCACE,cAAC,IAAD,CACE5K,MAAM,eACNC,KAAK,eACLM,QAxBW,WACjBf,EAAS6J,GAAeE,IACxBpJ,EAAUC,KAAK,UAuBTP,UAAWC,KAAO6N,SAGpB,cAAC,IAAD,CACE3N,MAAM,gBACNC,KAAK,iBACLM,QAAS,kBAAM0O,GAAiB,IAChCpP,UAAWC,KAAO6N,SAGpB,cAAC,IAAD,CACE3N,MAAM,QACNC,KAAK,gBACLM,QAjCY,WAClBf,ELgHqB,uCAAgB,WAAOA,EAAe4P,GAAtB,iBAAA5O,EAAA,sDAC/B+I,EAAW6F,IAAW9C,OAAtB/C,QACF8F,EAAS7I,GAAY+C,IAEhBtL,OACTuB,EAASiC,EAAc,mBAAD,OAAoB4N,EAAOpR,SACjDuB,EAASoM,QAETpM,EAASmC,EAAgB,mBACzBnC,EAASkM,GAAiB2D,EAAO1J,YATI,2CAAhB,0DK/Ef9F,UAAWC,KAAO6N,SAGpB,cAAC,IAAD,CACE3N,MAAM,wBACNC,KAAK,eACLM,QApCW,WLgInB,IAAC+O,EK/HC9P,GL+HD8P,EK/HqB/F,EL+HtB,uCACA,WAAO/J,GAAP,mBAAAgB,EAAA,6DAEM+I,EAASW,GAAcoF,GAF7B,kBAM2B3S,EAAU8D,KAAK,WAAY8I,EAAQ,CACxD7I,QAAS1D,MAPf,OAMUoC,EANV,OASImQ,EAAYnQ,EAASoQ,KATzB,uDAWIlS,QAAQC,IAAI,SAAUE,KAAKkD,UAAL,KAAsB,KAAM,IAClDnB,EACEiC,EAAa,yCAbnB,2BAqBEjC,EAASuD,EAAgBwM,IACzB/P,EAASwM,MACTxM,EAASmC,EAAgB,oBAvB3B,yDADA,wDK9HExB,EAAUC,KAAK,UAmCTP,UAAWC,KAAO6N,OAClBtN,SAAUkJ,EAAO7K,QAAUgI,GAAaiF,SAG1C,cAAC,IAAD,CACE3L,MAAM,aACNC,KAAK,kBACLM,QAvCY,WAClBf,EAAS0L,OAuCHrL,UAAW6N,KACT5N,KAAO6N,OACP,mBACA,sBAIJ,cAAC,KAAD,CACEE,OAAO,oBACPjB,QAASoC,EACTlB,MAAO,CAAEC,MAAO,QAChBC,OAAK,EACLnB,OAAQ,kBAAMoC,GAAiB,IALjC,SAME,cAAC,KAAD,CACEvE,KAAM,EACNoD,MAAO,CAAEC,MAAO,QAChBM,MAAOa,SAKb,cAAC,GAAD,QCpESO,OAnCf,SAAwBlG,GAMtB,IALA,IAAQ5F,EAAU4F,EAAV5F,MACJ+L,EAAc,EAITtM,EAAQ,EAAGA,EAAQO,EAAMW,OAAQlB,IAAS,CACjD,IAAMW,EAAOJ,EAAMP,GAEnB,GAAIW,EAAKH,OAASC,GAASC,WAAY,CAIrC,GAHA4L,GAAe,EAGG,IADN3J,GAAcwD,EAAQxF,EAAKX,OAC/BG,MACN,MAAO,CACLqG,OAAO,EACP+F,QAAS,yDAKb,GAAqB,IADN1J,GAAiBsD,EAAQxF,EAAKX,OAClCG,MACT,MAAO,CACLqG,OAAO,EACP+F,QAAS,wDAMjB,OAAOD,EAAc,EACjB,CAAE9F,OAAO,EAAO+F,QAAS,wBACzB,CAAE/F,OAAO,EAAM+F,QAAS,wBCLfC,GA1BY,WACzB,MAA+BlQ,aAC7B,SAAChB,GAAD,OAAsBA,EAAM4N,UADtB1B,EAAR,EAAQA,WAAYrB,EAApB,EAAoBA,OAGd/J,EAAWC,cAejB,OACE,cAAC,GAAD,CAAa0M,WAdI,WACjB3M,EAASuL,GAAcH,EAAa,KAaCwB,WAVpB,WACjB,IAAMyD,EAAMJ,GAAelG,GACvBsG,EAAIjG,MACNpK,EAASuL,GAAcH,EAAa,IAEpCpL,EAASiC,EAAcoO,EAAIF,WAK7B,SACE,cAAC,GAAD,OCWSG,GAhCY,WACzB,MAA+BpQ,aAC7B,SAAChB,GAAD,OAAsBA,EAAM4N,UADtB1B,EAAR,EAAQA,WAAYrB,EAApB,EAAoBA,OAGd/J,EAAWC,cAEjB0C,qBAAU,WACR3C,EAASiM,SAiBX,OACE,eAAC,GAAD,CAAaW,WAXI,WACjB,IAAMyD,EAAMvG,GAAYC,GAEpBsG,EAAIjG,MACNpK,EAASuL,GAAcH,EAAa,IAEpCpL,EAASiC,EAAcoO,EAAI5R,OAAS,qBAKDkO,WAfpB,WACjB3M,EAASuL,GAAcH,EAAa,KAcpC,UACE,cAAC,GAAD,IACA,sBAAK/K,UAAU,QAAf,4BAAuC0J,EAAOjB,iB,SCDrCyH,GAxBkB,SAAA7D,GAC/B,IAAQlM,EAAsBkM,EAAtBlM,MAAOzB,EAAe2N,EAAf3N,KAAM6H,EAAS8F,EAAT9F,KAErB,OACE,sBAAKvG,UAAU,aAAf,UAEE,uBAAOmQ,QAASzR,EAAMsB,UAAU,+BAAhC,SACGG,IAGH,sBAAKH,UAAU,mBAAf,UAEE,cAAC,KAAD,2BAAWqM,GAAX,IAAkBrM,UAAU,uBAC3BuG,GAAQ,qBAAK6J,wBAAyB,CAAEC,OAAQ9J,KACjD,cAAC,KAAD,CACE7H,KAAMA,EACN4R,UAAU,MACVtQ,UAAU,6B,UCgBLuQ,GA9BmB,SAAC,GAM5B,IALLd,EAKI,EALJA,OACAe,EAII,EAJJA,MACArQ,EAGI,EAHJA,MACAwM,EAEI,EAFJA,QACA8D,EACI,EADJA,cAMA,OACE,sBAAKzQ,UAAU,aAAf,UACE,uBAAOmQ,QAASK,EAAOxQ,UAAU,+BAAjC,SACGG,IAGH,qBAAKH,UAAU,mBAAf,SACE,cAAC,KAAD,CACE0Q,GAAIF,EACJhC,MAAOiB,EAAOe,GACd7D,QAASA,EACTgE,SAAU,SAAAC,GAAK,OAfF,SAACA,GACpBH,EAAcD,EAAOI,EAAMpC,OAcFqC,CAAaD,IAChC5Q,UAAU,gC,oBCcLuQ,GAtCmB,SAAC,GAO5B,IANLd,EAMI,EANJA,OACAe,EAKI,EALJA,MACArQ,EAII,EAJJA,MACAsQ,EAGI,EAHJA,cACA3L,EAEI,EAFJA,IACA0I,EACI,EADJA,IAEMqD,EAAe,SAACD,GACpBH,EAAcD,EAAOI,EAAMpC,QAG7B,OACE,sBAAKxO,UAAU,aAAf,UACE,uBAAOmQ,QAASK,EAAOxQ,UAAU,+BAAjC,SACGG,IAGH,sBAAKH,UAAU,mBAAf,UACE,cAAC,KAAD,CACEwO,MAAOiB,EAAOe,GACdG,SAAU,SAAAC,GAAK,OAAIC,EAAaD,IAChC5Q,UAAU,sBAGZ,cAAC,KAAD,CACE0Q,GAAIF,EACJhC,MAAOiB,EAAOe,GACdG,SAAU,SAAAC,GAAK,OAAIC,EAAaD,IAChC9L,IAAKA,EACL0I,IAAKA,EACLxN,UAAU,6B,SC5CP8Q,GAAmB,CAC9B,EAAG,OACH,EAAG,SACH,EAAG,cACH,EAAG,OACH,EAAG,aAGQC,GAAmB,CAC9B,CACE5Q,MAAO,OACPqO,MAAO,GAET,CACErO,MAAO,SACPqO,MAAO,GAET,CACErO,MAAO,cACPqO,MAAO,GAET,CACErO,MAAO,OACPqO,MAAO,GAET,CACErO,MAAO,YACPqO,MAAO,I,SCRLwC,GAAeC,OAAaC,MAAM,CACtCxS,KAAMuS,OACHzD,IAAI,GAAI,iCACR2D,SAAS,YACZ3I,MAAOyI,OAAanM,IAAI,GAAG0I,IAAI,GAAG2D,WAClC9M,YAAa4M,OACVnM,IARc,EAOJ,0BAPI,EAOJ,YAEV0I,IAAI,IACJ2D,SAAS,YACZ5I,SAAU0I,OACPnM,IAZc,EAWP,0BAXO,EAWP,YAEP0I,IAAI,IACJ2D,SAAS,cAyGCC,GAtGW,WACxB,MAA0CnE,oBAAS,GAAnD,oBAAOoE,EAAP,KAAsBC,EAAtB,KACA,EAAoCrE,mBAAS,IAA7C,oBAAOoC,EAAP,KAAmBC,EAAnB,KACM3P,EAAWC,cACjB,EAA+BC,aAC7B,SAAChB,GAAD,OAAsBA,EAAM4N,UADtB1B,EAAR,EAAQA,WAGFwG,EAHN,EAAoB7H,OAKd8H,EAAYnP,iBAA+B,MAE3CkK,EAAa,WACjB9O,QAAQC,IAAI,SACR8T,EAAU7O,SACZ6O,EAAU7O,QAAQ8O,eAGpB9R,EAASuL,GAAcH,EAAa,KAOhC2G,EAAe,SAACvJ,GACpB,IAAMuH,EAAuB9R,KAAKC,MAAMwR,GACxC5R,QAAQC,IAAI,YAAagS,GACzB4B,GAAiB,GACjB3R,EAAS2L,GAAe,CAAEP,WAAY,EAAGrB,OAAQgG,MAGnD,OACE,cAAC,KAAD,CACEiC,oBAAkB,EAClBJ,cAAeA,EACfK,SAfiB,SAACnC,GACpB9P,EAASyL,GAAYqE,KAenBoC,iBAAkBb,GAClBc,SAAUN,EALZ,SAMG,gBAAGf,EAAH,EAAGA,cAAehB,EAAlB,EAAkBA,OAAlB,OACC,eAAC,GAAD,CAAalD,WAAYA,EAAzB,UACE,+CAEA,cAAC,IAAD,CACEpM,MAAM,gBACNC,KAAK,iBACLM,QAAS,kBAAM4Q,GAAiB,MAIlC,wDACA,eAAC,KAAD,WACE,cAAC,GAAD,CAAS5S,KAAK,OAAOyB,MAAM,cAAc4R,GAAIC,OAE7C,cAACC,GAAD,CACEzB,MAAM,QACNrQ,MAAM,aACNsQ,cAAeA,EACf9D,QAASoE,GACTtB,OAAQA,IAGV,cAAC,GAAD,CACEe,MAAM,cACNrQ,MAAM,iBACNsQ,cAAeA,EACf3L,IAlFK,EAmFL0I,IAAK,GACLiC,OAAQA,IAGV,cAAC,GAAD,CACEe,MAAM,WACNrQ,MAAM,YACNsQ,cAAeA,EACf3L,IA3FK,EA4FL0I,IAAK,GACLiC,OAAQA,OAMZ,eAAC,KAAD,CACEzB,OAAO,oBACPjB,QAASsE,EACTpD,MAAO,CAAEC,MAAO,QAChBC,OAAK,EACLnB,OAAQ,kBAAMsE,GAAiB,IALjC,UAME,cAAC,KAAD,CACEzG,KAAM,EACNoD,MAAO,CAAEC,MAAO,QAChBM,MAAOa,EACPsB,SAAU,SAAAC,GAAK,OAAItB,EAAcsB,EAAMsB,OAAO1D,UAEhD,cAAC,IAAD,CAAQrO,MAAM,SAASO,QAASgR,cCvF7BS,GA7Bc,WAC3B,IAAMxS,EAAWC,cACTmL,EAAelL,aAAY,SAAChB,GAAD,OAAsBA,EAAM4N,UAAvD1B,WAWR,OATAzI,qBAAU,WACR,IAAM8P,EAAkB9U,aAAaC,QAAQ,eAC7C,GAAI6U,EAAiB,CACnB3U,QAAQC,IAAI,iCACZ,IAAMmB,EAAQjB,KAAKC,MAAMuU,GACzBzS,EAAS2L,GAAezM,OAEzB,CAACc,IAGF,sBAAKK,UAAWC,KAAOoS,WAAvB,UACE,cAAC,IAAD,CAAOrE,OAAO,6BAAd,SACE,qBAAKhO,UAAWC,KAAOqS,YAAvB,SACE,cAAC,IAAD,CAAOvR,MAAO2J,GAAa6H,YAAaxH,QAI5B,IAAfA,GAAoB,cAAC,GAAD,IACL,IAAfA,GAAoB,cAAC,GAAD,IACL,IAAfA,GAAoB,cAAC,GAAD,IACL,IAAfA,GAAoB,cAAC,GAAD,Q,6BCkBZyH,GA5Cc,WAC3B,MAAyB3S,aAAY,SAAChB,GAAD,OAAsBA,EAAMmE,QAAzDA,EAAR,EAAQA,KAAMI,EAAd,EAAcA,OACRzD,EAAWC,cAEjB0C,qBAAU,WACR3C,EzB4BqB,uCAAgB,WAAOA,GAAP,iBAAAgB,EAAA,+EAId7D,EAAU2V,IAAI,YAJA,OAI/BlT,EAJ+B,OAKrCyD,EAAOzD,EAASoQ,KALqB,gDAOrClS,QAAQW,MAAM,SAAd,MACAuB,EAASiC,EAAc,0CARc,QAWvCjC,EAASmC,EAAgB,4BACzBnC,EAASsD,EAAiBD,IAZa,yDAAhB,yDyB3BpB,CAACrD,IAUJ,OACE,cAAC,IAAD,CAAOqO,OAAO,kBAAd,SACE,eAAC,KAAD,CACEQ,MAAOxL,EACP0P,YAAU,EACVC,aAAW,EACX3S,UAAU,iBACV4S,cAAc,SACdC,UAAWzP,EACX0P,kBAAmB,SAAA3K,GAAC,OAAIxI,EAASwD,EAAYgF,EAAEqG,SAC/CuE,QAAQ,MARV,UASE,cAAC,KAAD,CAAQvC,MAAM,OAAOxC,OAAO,cAAcgF,UAAQ,IAClD,cAAC,KAAD,CACExC,MAAM,QACNxC,OAAO,aACPiF,KArBmB,SAACvJ,GAAD,OACzBoH,GAAiBpH,EAAOlB,QAqBlBlD,QAAM,EACN0N,UAAQ,IAEV,cAAC,KAAD,CAAQxC,MAAM,cAAcxC,OAAO,UAAUgF,UAAQ,IACrD,cAAC,KAAD,CAAQxC,MAAM,WAAWxC,OAAO,OAAOgF,UAAQ,IAC/C,cAAC,KAAD,CAAQxC,MAAM,cAAcxC,OAAO,UAAU1I,QAAM,EAAC0N,UAAQ,IAC5D,cAAC,KAAD,CAAQxC,MAAM,YAAYxC,OAAO,OAAOiF,KAzBzB,SAACvJ,GAAD,OALDwJ,EAMP,IAAIlV,KAAK0L,EAAOyJ,WANMC,aAAOF,EAAM,cAA7B,IAACA,GA8B8CF,UAAQ,UCb7DK,OA/Bf,SAAsBC,GAEpB,IlByEsC5J,EkBzEhC5F,EAAQwP,EAAM9I,WAAW+I,MAAM,IAAIxM,KAAI,SAACyM,EAAMjQ,GAClD,OAAKiQ,GAAQ,IAAMA,GAAQ,EAClB,CACLjQ,QACAQ,KAAMC,GAASC,WACfE,MAAO,EACP2B,UAAW0N,EACXzN,YAAa,IAGR,CAAExC,QAAOQ,KAAMC,GAASkG,cAK7BwF,EAAoB,2BACrB4D,GADqB,IAExBxP,QACAjF,MAAOgI,GAAaiF,OACpBrD,WAAY,IAOd,OAJAuB,GAAgB0F,IlBmDsBhG,EkBlDdgG,GlBmDhB5L,MAGLwB,QAAO,SAAAC,GAAC,OAAIA,EAAExB,OAASC,GAAS6F,YAChCpH,SAAQ,SAAA8C,GACP,IAAMkO,EAAWlO,EAEjB,IAAiC,IAA7BkO,EAASrP,eAAuB,CAClC,IAAMsP,EAAWxN,GAAcwD,EAAQ+J,EAASlQ,MAAQ,GACxDkQ,EAASrP,eAAiBsP,EAASrM,UAGrC,IAA+B,IAA3BoM,EAASlP,aAAqB,CAChC,IAAMoP,EAAcvN,GAClBsD,EACA+J,EAASlQ,MAAQmG,EAAOrF,aAE1BoP,EAASlP,aAAeoP,EAAYtM,ckBjEnCqI,G,qBC+BMkE,GAnDY,WACzB,IAAQxQ,EAAWvD,aAAY,SAAChB,GAAD,OAAsBA,EAAMmE,QAAnDI,OACFzD,EAAWC,cAQjB,OACE,qBAAKI,UAAWC,KAAO4T,QAAvB,SACE,sBAAK7T,UAAW6N,KAAW,eAA3B,UACE,sBAAK7N,UAAU,0BAAf,UACE,sBAAMA,UAAU,WAAhB,uBACA,sBAAMA,UAAU,gBAAhB,0BACA,sBAAMA,UAAU,WAAhB,8BAEF,qBAAKA,UAAU,wBAAf,4EAIA,qBAAKA,UAAU,GAAf,SACE,cAAC,GAAD,MAGF,sBAAKA,UAAU,uCAAf,UACE,qBAAKA,UAAU,iBAAf,SACE,cAAC,IAAD,CACEG,MAAM,cACNC,KAAK,iBACLJ,UAAU,cACVU,QAAS,SAAAyH,GAAC,OAAI7H,EAAUC,KAAK,gBAIjC,qBAAKP,UAAU,iBAAf,SACE,cAAC,IAAD,CACEG,MAAM,aACNC,KAAK,6BACLJ,UAAU,cACVU,QArCO,WACjB,IAAMgP,EAAY2D,GAAajQ,GAC/BzD,EAAS6J,GAAekG,IACxBpP,EAAUC,KAAK,UAmCLC,UAAW4C,e,oBCqBV0Q,GApEmB,WAChC,IAAQtQ,EAAU3D,aAAY,SAAChB,GAAD,OAAsBA,EAAMyE,QAAlDE,MACR,EAA0CyJ,mBAAuB,CAAC,GAAI,KAAtE,oBAAO8G,EAAP,KAAsBC,EAAtB,KAgBMC,EAAoB,SAACtT,EAAa4C,EAAe2Q,GACrD,IAAMxR,EAAM,IAAM/B,EAAE,GAAU4C,EAAa2Q,EAE3C,OACE,sBAAMlU,UAAWC,KAAOkU,YAAxB,SACGxT,EAAEoG,KAAI,SAAAqN,GAAC,OAnBM,SAACA,EAAWF,GAC9B,IAAMxR,EAAM,IAAM0R,EAASF,EAE3B,OAAI1Q,EAAM0Q,GAAWvQ,KAAK+B,SAAS0O,GAE/B,sBAAMpU,UAAWC,KAAOoU,UAAxB,SACGD,GADqC1R,GAKnC,+BAAiB0R,GAAN1R,GASJ4R,CAAYF,EAAGF,OADaxR,IAMxC6R,EAAsB,SAAC5T,EAAeuT,GAC1C,IAAMxR,EAAM,KAAO/B,EAAE,GAAUuT,EAE/B,OACE,+BACGvT,EAAEoG,KAAI,SAACyN,EAAGhN,GAAJ,OAAUyM,EAAkBO,EAAGhN,EAAG0M,OADhCxR,IAMT+R,EAAa,SAACP,GAClB,OAAI1Q,EAAM0Q,GAAWzQ,IAAM,EAClB,OAGL,qCACE,uBAAMzD,UAAWC,KAAOwD,IAAxB,UAA8BD,EAAM0Q,GAAWzQ,IAA/C,OACC8Q,EAAoBR,EAAcG,GAAYA,OAavD,OAPA5R,qBAAU,WACJkB,EAAM,GAAGD,OAAS,GACpByQ,EAAiB,CAAC5O,GAAgB5B,EAAM,IAAK4B,GAAgB5B,EAAM,QAGpE,CAACA,IAGF,qBAAKxD,UAAWC,KAAOyE,aAAvB,SACE,sBAAK1E,UAAWC,KAAOyU,KAAvB,UACE,8BAAMD,EAAW,KACjB,8BAAMA,EAAW,W,wCC3BVE,GA7BsB,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,WACrC9L,EAAkBlJ,aAAY,SAAChB,GAAD,OAAsBA,EAAMyE,QAA1DyF,cACFpJ,EAAWC,cAYjB,OACE,qBACEI,UAAW6N,KACT5N,KAAO6U,YACPD,GAAc5U,KAAO4U,WACrB5U,KAAO8U,aAETrU,QAjBqB,SAACkQ,GACpBgE,GAAS,GAAKA,GAAS,GAAK7L,GAE5BpJ,EADEkV,EACOzL,GAAiB,CAAE7F,MAAOwF,EAAe5E,MAAOyQ,IAEhDrN,GAAS,CAAEhE,MAAOwF,EAAe5E,MAAOyQ,MAMrD,SAOE,qBAAK5U,UAAW6N,KAAW5N,KAAO2U,MAAOC,GAAc5U,KAAO,QAAD,OAAS2U,KAAtE,SACGA,OCqCMI,GA7DY,WACzB,IAAQjM,EAAkBlJ,aAAY,SAAChB,GAAD,OAAsBA,EAAMyE,QAA1DyF,cACFpJ,EAAWC,cACX+E,EAAS,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAelCsQ,EAAe,SAACL,EAAeC,GACnC,OAAO,cAAC,GAAD,CAAyBD,MAAOA,EAAOC,WAAYA,GAAjCD,IAG3B,OACE,wBAAO5U,UAAW4O,KAAW,WAAY3O,KAAOiV,UAAhD,UACE,sBAAKlV,UAAWC,KAAOkV,YAAvB,UACE,cAAC,IAAD,CAAQ/U,KAAK,wBAAwBM,QAnBrB,kBAAMf,EAASsJ,SAoB/B,cAAC,IAAD,CAAQ7I,KAAK,uBAAwBM,QArBtB,kBAAMf,EAASqJ,YAwBhC,sBAAKhJ,UAAWC,KAAOmV,aAAvB,UACE,qBAAKpV,UAAWC,KAAO2K,QAAvB,SACGjG,EAAOoC,KAAI,SAAAqN,GAAC,OAAIa,EAAab,GAAG,QAGnC,cAAC,IAAD,CACEpU,UAAW4O,KACT,SACA,aACA,WACA3O,KAAO6N,QAETpN,QAjCkB,SAACkQ,GACrB7H,GACFpJ,EAAS4H,GAAS,CAAEhE,MAAOwF,EAAe5E,MAAO,MAwB/C,oBAWA,cAAC,IAAD,CACEnE,UAAW4O,KAAW,kBAAmB3O,KAAO6N,QAChDpN,QAjCiB,SAACkQ,GACxBjR,EAAS4J,OA8BL,yBAMA,qBAAKvJ,UAAWC,KAAO2K,QAAvB,SACGjG,EAAOoC,KAAI,SAAAqN,GAAC,OAAIa,EAAab,GAAG,WAIrC,qBAAKpU,UAAU,oBCpEd,SAASqV,GAAa/M,GAC3B,MAAO,CAAE4F,MAAM,GAAD,OAAK5F,EAAL,Q,yBCsBD4B,GAToB,SAAC,GAAoB,EAAlBhG,KAAkB,EAAZX,MAAa,IAEjD0K,EAAQoH,GADQxV,aAAY,SAAChB,GAAD,OAAsBA,EAAMyE,QAAtDgF,WAGR,OACE,qBAAKtI,UAAW4O,KAAW,WAAY3O,KAAOqV,OAAQrH,MAAOA,K,oBCYlDpE,GAjBmB,SAAC,GAAqB,IAAnB3F,EAAkB,EAAlBA,KAC3BoE,GAD6C,EAAZ/E,MACnB1D,aAAY,SAAChB,GAAD,OAAsBA,EAAMyE,QAAtDgF,WACF2F,EAAQoH,GAAa/M,GACrBiN,EFTD,SAA0BjN,GAC/B,MAAO,CAAEiN,SAAS,GAAD,OAAKjN,EAAY,IAAjB,QEQAkN,CAAiBlN,GAElC,OACE,sBAAKtI,UAAW4O,KAAW,WAAY,YAAaX,MAAOA,EAA3D,UACE,qBAAKjO,UAAU,iBAAiBiO,MAAOsH,EAAvC,SACGrR,EAAKE,iBAER,qBAAKpE,UAAU,eAAeiO,MAAOsH,EAArC,SACGrR,EAAKK,mB,oBCyBCN,GAnCqB,SAAC,GAAqB,IAAD,EAAlBC,EAAkB,EAAlBA,KAAMX,EAAY,EAAZA,MAC3C,EAAqC1D,aACnC,SAAChB,GAAD,OAAsBA,EAAMyE,QADtByF,EAAR,EAAQA,cAAeT,EAAvB,EAAuBA,UAGjB3I,EAAWC,cACX6V,EHhBD,SAA2BnN,GAChC,MAAO,CAAEiN,SAAS,GAAD,OAAKjN,EAAY,IAAjB,QGeKoN,CAAkBpN,GAMlCqN,EAAazR,EAAK4B,SAAW,GAAK5B,EAAKC,QAAUD,EAAK4B,SAE5D,OACE,sBACE9F,UAAW4O,KAAW,WAAY3O,KAAO2V,OAAQ,CAC/CC,SAAUtS,IAAUwF,IAEtBrI,QAXgB,SAACkQ,GACnBjR,EAASkJ,GAAiBtF,KAM1B,UAKGW,EAAKC,MAAQ,GACZ,qBACEnE,UAAW4O,KAAW3O,KAAOkE,MAAO,CAAEwR,eACtC1H,MAAOwH,EAFT,SAGGvR,EAAKC,SAGRD,EAAKC,QAAS,UAAAD,EAAK6B,mBAAL,eAAkBtB,QAAS,GACzC,qBAAKzE,UAAW4O,KAAW3O,KAAO8F,aAAlC,SACG7B,EAAK6B,YAAY0E,KAAK,UCYlBqL,GAtCY,WACzB,IAAQxS,EAASzD,aAAY,SAAChB,GAAD,OAAsBA,EAAMyE,QAAjDA,KA4BR,OACE,qBAAKtD,UAAW4O,KAAW,OAAQ3O,KAAO8O,gBAA1C,SACE,qBAAK/O,UAAWC,KAAO8V,SAAUC,UAAW,EAA5C,SAbA,qBACEhW,UAAWC,KAAO+O,KAClBf,MAAO,CACLgB,oBAAoB,UAAD,OAAY3L,EAAMe,YAAlB,UACnB4R,iBAAiB,UAAD,OAAY3S,EAAMiF,SAAlB,WAJpB,SAMGjF,EAAKQ,MAAMiD,KAAI,SAAC7C,EAAMsD,GAAP,OArBH,SAACtD,EAAaX,GAC/B,OAAIW,EAAKH,OAASC,GAASkG,UAClB,cAAC,GAAD,CAAWhG,KAAMA,EAAoBX,MAAOA,GAAYA,GACtDW,EAAKH,OAASC,GAAS6F,SACzB,cAAC,GAAD,CAAU3F,KAAMA,EAAmBX,MAAOA,GAAYA,GAI3D,cAAC,GAAD,CAAYW,KAAMA,EAAqBX,MAAOA,GAAYA,GAa7B2S,CAAWhS,EAAMsD,aC2CvC2O,GArEY,WACzB,MAAgCtW,aAAY,SAAChB,GAAD,OAAsBA,EAAMyE,QAAhEA,EAAR,EAAQA,KAAMyF,EAAd,EAAcA,cACNjF,EAAUR,EAAVQ,MACFnE,EAAWC,cAEjB0C,qBAAU,WACJgB,EAAKzE,MAAQ,GACfyB,EAAUC,KAAK,QAkDnB,OACE,qCACE,sBAAKP,UAAU,UAAUoW,UAhDN,SAACxF,GACtB,GAAK7H,EAIL,GAAkB,YAAd6H,EAAMlO,KAAqBY,EAAM,CACnC,IAAM+S,EAAmBtN,EAAgBzF,EAAKe,YAE5CgS,EAAmB/S,EAAKe,aACxBP,EAAMuS,GAAkBtS,OAASC,GAASC,YAE1CtE,EAASkJ,GAAiBwN,SAEvB,GAAkB,cAAdzF,EAAMlO,KAAuBY,EAAM,CAC5C,IAAM+S,EAAmBtN,EAAgBzF,EAAKe,YAE5CgS,EAAmBvS,EAAMW,QACzBX,EAAMuS,GAAkBtS,OAASC,GAASC,YAE1CtE,EAASkJ,GAAiBwN,SAEvB,GAAkB,cAAdzF,EAAMlO,KAAuBY,EAAM,CAC5C,IAAM+S,EAAmBtN,EAAgB,EAEvCsN,EAAmB/S,EAAKe,aACxBP,EAAMuS,GAAkBtS,OAASC,GAASC,YAE1CtE,EAASkJ,GAAiBwN,SAEvB,GAAkB,eAAdzF,EAAMlO,KAAwBY,EAAM,CAC7C,IAAM+S,EAAmBtN,EAAgB,EAEvCsN,EAAmBvS,EAAMW,QACzBX,EAAMuS,GAAkBtS,OAASC,GAASC,YAE1CtE,EAASkJ,GAAiBwN,SAEnBzF,EAAMlO,KAAO,KAAOkO,EAAMlO,KAAO,IAC1C/C,EAAS4H,GAAS,CAAEhE,MAAOwF,EAAe5E,OAAQyM,EAAMlO,OACjC,WAAdkO,EAAMlO,IACf/C,EAAS4H,GAAS,CAAEhE,MAAOwF,EAAe5E,MAAO,KAEjD1G,QAAQC,IAAI,eAAgBkT,EAAMlO,MAMlC,UACE,cAAC,GAAD,IACA,cAAC,GAAD,OAGF,cAAC,GAAD,Q,SCeS4T,GAlFU,WACvB,IAAM3W,EAAWC,cACTxC,EAASyC,aAAY,SAAChB,GAAD,OAAsBA,EAAMiB,SAAjD1C,KAmBR,OAPAkF,qBAAU,WACJlF,GACFkD,EAAUC,KAAK,OAGhB,CAACnD,IAGF,qBACE4C,UAAU,iDACViO,MAAO,CAAEsI,OAAQ,OAFnB,SAGE,sBAAKvW,UAAU,uDAAf,UACE,sBAAKA,UAAU,mBAAf,UAOE,qBAAKA,UAAU,qCAAf,4CAGA,sBAAMA,UAAU,qCAAhB,oCAGA,cAAC,KAAD,CACEA,UAAU,6DACVwW,GAAG,UAFL,kCAOF,cAAC,KAAD,CAEEjF,cA3C6B,CACnCkF,MAAO,GACPC,SAAU,IA0CJ9E,SAvCa,SAACnC,GACpB9P,EzCkHF,SAAC8P,GAAD,8CACA,WAAM9P,GAAN,qBAAAgB,EAAA,6DACEhB,EAASP,KADX,kBAI2BtC,EAAU8D,KAAK,eAAgB6O,GAJ1D,OAIUlQ,EAJV,OAKInC,EAAOmC,EAASoQ,KAAKvS,KACrBC,EAAQkC,EAASoQ,KAAKtS,MAEtBC,aAAa6N,QAAQ,OAAQvN,KAAKkD,UAAU1D,IAC5CE,aAAa6N,QAAQ,QAAS9N,GATlC,yDAUakC,EAVb,KAUaA,SACTI,EACEN,EAAc,CAAEsX,aAAc,QAASC,UAAW,GAAIrX,cAZ5D,2BAuBEI,EAASf,EAAaxB,IAvBxB,0DADA,sDyClHWyZ,CAAMpH,KAmCX,SAMG,cAAGgB,cAAH,EAAkBhB,OAAlB,OACC,eAAC,KAAD,CAAMzP,UAAU,UAAhB,UACE,cAAC,GAAD,CACEtB,KAAK,QACLyB,MAAM,QACN4R,GAAIC,KACJhS,UAAU,oCAEZ,cAAC,GAAD,CACEtB,KAAK,WACLyB,MAAM,WACN4D,KAAK,WACLgO,GAAIC,KACJhS,UAAU,oCAGZ,cAAC,IAAD,CACE+D,KAAK,SACL5D,MAAM,WACNC,KAAK,wBACLJ,UAAU,uBCxEpB8W,GAAa7F,OAAaC,MAAM,CACpCxS,KAAMuS,OACHnM,IAAI,GACJ0I,IAAI,GAAI,iCACR2D,SAAS,YACZsF,MAAOxF,OACJzD,IAAI,GAAI,iCACR2D,SAAS,YACZuF,SAAUzF,OACPnM,IAAI,GAAI,kCACR0I,IAAI,GAAI,iCACR2D,SAAS,cAoFC4F,GAjFU,WACvB,IAAMpX,EAAWC,cAcjB,OACE,qBACEI,UAAU,iDACViO,MAAO,CAAEsI,OAAQ,OAFnB,SAGE,sBAAKvW,UAAU,uDAAf,UACE,sBAAKA,UAAU,mBAAf,UAOE,qBAAKA,UAAU,qCAAf,wCAGA,sBAAMA,UAAU,qCAAhB,sCAGA,cAAC,KAAD,CACEA,UAAU,6DACVwW,GAAG,UAFL,yBAOF,cAAC,KAAD,CACE7E,oBAAkB,EAClBJ,cAjC6B,CACnC7S,KAAM,GACN+X,MAAO,GACPC,SAAU,IA+BJ9E,SAvCa,SAACnC,GACpB9P,E1CsJF,SAAC8P,GAAD,8CACA,WAAM9P,GAAN,qBAAAgB,EAAA,6DACEhB,EAASP,KADX,kBAI2BtC,EAAU8D,KAAK,SAAU6O,GAJpD,OAIUlQ,EAJV,OAKInC,EAAOmC,EAASoQ,KAAKvS,KACrBC,EAAQkC,EAASoQ,KAAKtS,MAEtBC,aAAa6N,QAAQ,OAAQvN,KAAKkD,UAAU1D,IAC5CE,aAAa6N,QAAQ,QAAS9N,GATlC,yDAUakC,EAVb,KAUaA,SACT9B,QAAQC,IAAI,YAAa6B,GACzBI,EAASR,EAAa,sBAZ1B,2BAsBEQ,EAASf,EAAaxB,IAtBxB,0DADA,sD0CtJW4Z,CAAOvH,IAChBnP,EAAUC,KAAK,MAsCTsR,iBAAkBiF,GAJpB,SAKG,cAAGrG,cAAH,EAAkBhB,OAAlB,OACC,eAAC,KAAD,CAAMzP,UAAU,UAAhB,UACE,cAAC,GAAD,CACEtB,KAAK,OACLyB,MAAM,aACN4R,GAAIC,KACJhS,UAAU,oCAEZ,cAAC,GAAD,CACEtB,KAAK,QACLyB,MAAM,QACN4R,GAAIC,KACJhS,UAAU,oCAEZ,cAAC,GAAD,CACEtB,KAAK,WACLyB,MAAM,WACN4D,KAAK,WACLgO,GAAIC,KACJhS,UAAU,oCAGZ,cAAC,IAAD,CACE+D,KAAK,SACL5D,MAAM,WACNC,KAAK,uBACLJ,UAAU,uB,2BCrFbiX,GAAcC,aAAgB,CACzC/V,OAAQgW,EACR1K,OAAQ2K,GACRpU,KAAMqU,GACN/T,KAAMgU,GACNxX,MAAOyX,IAYMC,GATDC,YAAe,CAC3BC,UAAUxa,EACVya,QAASV,KCqBIW,GA7BO,WACpB,OACE,eAAC,IAAD,CAAUJ,MAAOA,GAAjB,UACE,cAAC,EAAD,IACA,cAAC,EAAD,IAEA,cAAC,KAAD,CAAQK,QAASvX,EAAjB,SACE,eAAC,KAAD,WACE,cAAC,KAAD,CAAOwX,KAAK,UAAZ,SACE,cAAC,GAAD,MAEF,cAAC,KAAD,CAAOA,KAAK,QAAZ,SACE,cAAC,GAAD,MAEF,cAAC,KAAD,CAAOA,KAAK,UAAZ,SACE,cAAC,GAAD,MAEF,cAAC,KAAD,CAAOA,KAAK,UAAZ,SACE,cAAC,GAAD,MAEF,cAAC,KAAD,CAAOA,KAAK,IAAZ,SACE,cAAC,GAAD,eCrBGC,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFzW,SAAS0W,eAAe,SAM1BZ,M,mBCfApb,EAAOC,QAAU,CAAC,OAAS,2B,mBCA3BD,EAAOC,QAAU,CAAC,aAAe,sCAAsC,KAAO,8BAA8B,IAAM,6BAA6B,YAAc,qCAAqC,UAAY,qC,mBCA9MD,EAAOC,QAAU,CAAC,YAAc,iCAAiC,WAAa,gCAAgC,MAAQ,2BAA2B,OAAS,4BAA4B,OAAS,4BAA4B,OAAS,4BAA4B,OAAS,4BAA4B,OAAS,4BAA4B,OAAS,4BAA4B,OAAS,4BAA4B,OAAS,4BAA4B,OAAS,8B,mBCAlcD,EAAOC,QAAU,CAAC,WAAa,+BAA+B,YAAc,gCAAgC,SAAW,6BAA6B,MAAQ,4B,mBCA5JD,EAAOC,QAAU,CAAC,MAAQ,0BAA0B,WAAa,+BAA+B,OAAS,6B,mBCAzGD,EAAOC,QAAU,CAAC,eAAiB,iCAAiC,KAAO,yB,mBCA3ED,EAAOC,QAAU,CAAC,OAAS,2BAA2B,MAAQ,6B","file":"static/js/main.a5e87e6e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"createGame\":\"CreateGame_createGame__t-nS6\",\"createSteps\":\"CreateGame_createSteps__3TBZt\",\"p-steps\":\"CreateGame_p-steps__1OyM9\",\"p-steps-item\":\"CreateGame_p-steps-item__2Lv77\",\"p-menuitem-link\":\"CreateGame_p-menuitem-link__3yOB-\",\"p-steps-title\":\"CreateGame_p-steps-title__6eRPZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"gameBackground\":\"DrawGrid_gameBackground__2dTqA\",\"grid\":\"DrawGrid_grid__XoYjv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"startItem\":\"MyMenubar_startItem__5gsTl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"MainMenu_content__1zXTd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"blank\":\"BlankCell_blank__h84dH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"controls\":\"Controls_controls__fpjJI\",\"columns\":\"Controls_columns__1dogA\",\"button\":\"Controls_button__3i3Ud\",\"zoomButtons\":\"Controls_zoomButtons__1tiul\"};","import { createHashHistory } from 'history';\n\nexport default createHashHistory();\n","import axios from 'axios';\n\nconst kakuroApi = axios.create({\n  baseURL: process.env.REACT_APP_KAKURO_API_ENDPOINT || 'http://192.168.168.4:5000'\n});\n\nexport default kakuroApi;\n","function authHeader(): {\n  Authorization: string;\n} | {\n  Authorization: null;\n} {\n  const token = localStorage.getItem('token');\n\n  if (token) {\n    return { Authorization: `Bearer ${token}` };\n  } else {\n    return { Authorization: null };\n  }\n}\n\nexport default authHeader;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { decode } from 'jsonwebtoken';\nimport kakuroApi from '../api/kakuroApi';\nimport authHeader from '../utils/authHeader';\nimport { AppThunk } from './store';\n\nexport interface IUser {\n  id: string;\n  name: string;\n  email: string;\n}\n\nexport interface ISigninValues {\n  email: string;\n  password: string;\n}\n\nexport interface ISignUpValues extends ISigninValues {\n  name: string;\n}\n\nexport interface IUserState {\n  isLoggedIn: boolean;\n  isRequesting: boolean;\n  user: IUser | null;\n  error: string | null;\n}\n\nexport interface IUnauthorizedPayload {\n  resourceType: string;\n  resources: string[];\n  // status: number;\n  // message: string;\n  response: any;\n}\n\n// TODO: check token\nlet user;\nconsole.log('userSlice: loading user from storage...');\ntry {\n  const storeduser = localStorage.getItem('user');\n  user = storeduser != null ? JSON.parse(storeduser) : null;\n  const token = localStorage.getItem('token');\n\n  if (token) {\n    let decoded: any = decode(token);\n\n    if (Date.now() >= decoded.exp * 1000) {\n      console.log('token expired');\n      localStorage.removeItem('user');\n      localStorage.removeItem('token');\n      user = null;\n    }\n  }\n} catch (error) {\n  localStorage.removeItem('user');\n  localStorage.removeItem('token');\n  user = null;\n}\n\nconst initialState: IUserState = {\n  isLoggedIn: user == null ? false : true,\n  isRequesting: false,\n  user,\n  error: null,\n};\n\nconst userSlice = createSlice({\n  name: 'user',\n  initialState,\n  reducers: {\n    loginSuccess(state, action: PayloadAction<IUser>) {\n      state.user = action.payload;\n      state.isLoggedIn = action.payload != null;\n      state.error = null;\n      state.isRequesting = false;\n    },\n    logoutFailed(state, action: PayloadAction<string>) {\n      state.error = action.payload;\n      state.user = null;\n      state.isLoggedIn = false;\n      state.isRequesting = false;\n    },\n    logoutSuccess(state) {\n      state.user = null;\n      state.isLoggedIn = false;\n      state.error = null;\n      state.isRequesting = false;\n    },\n    signUpSuccess(state, action: PayloadAction<IUser>) {\n      state.user = action.payload;\n      state.isLoggedIn = action.payload != null;\n      state.error = null;\n      state.isRequesting = false;\n    },\n    signUpFailed(state, action: PayloadAction<string>) {\n      state.error = action.payload;\n      state.user = null;\n      state.isLoggedIn = false;\n      state.isRequesting = false;\n    },\n    submitting(state) {\n      state.isRequesting = true;\n    },\n    requestFailed(state, action: PayloadAction<IUnauthorizedPayload>) {\n      console.log('action.payload:', action.payload);\n\n      // console.log('state:', state);\n      // console.log('action:', action);\n      const code = action.payload.response.status;\n\n      if (code === 401 || code === 403) {\n        // Unauthorized\n        localStorage.removeItem('user');\n        localStorage.removeItem('token');\n        state.user = null;\n        state.isLoggedIn = false;\n        state.error = null;\n        state.isRequesting = false;\n      }\n    },\n  },\n});\n\nexport const {\n  loginSuccess,\n  logoutFailed,\n  logoutSuccess,\n  requestFailed,\n  signUpFailed,\n  signUpSuccess,\n  submitting,\n} = userSlice.actions;\n\nexport default userSlice.reducer;\n\nexport const login =\n  (values: ISigninValues): AppThunk =>\n  async dispatch => {\n    dispatch(submitting());\n    let user, token;\n    try {\n      const response = await kakuroApi.post('/users/login', values);\n      user = response.data.user;\n      token = response.data.token;\n\n      localStorage.setItem('user', JSON.stringify(user));\n      localStorage.setItem('token', token);\n    } catch ({ response }) {\n      dispatch(\n        requestFailed({ resourceType: 'users', resources: [], response })\n      );\n      // dispatch(\n      //   setAlert({\n      //     type: 'error',\n      //     message: 'Beim Anmelden gab es einen Fehler. Bitte probieren Sie es später noch einmal.',\n      //   }),\n      // );\n      return;\n    }\n\n    dispatch(loginSuccess(user));\n    // dispatch(setAlert({ type: 'success', message: 'Sie haben sich erfolgreich angemeldet.' }));\n  };\n\nexport const logout = (): AppThunk => async dispatch => {\n  try {\n    await kakuroApi.post('/users/logout', null, { headers: authHeader() });\n  } catch ({ response }) {\n    dispatch(logoutFailed(JSON.stringify(response)));\n    return;\n  } finally {\n    localStorage.removeItem('user');\n    localStorage.removeItem('token');\n  }\n\n  dispatch(logoutSuccess());\n  // dispatch(setAlert({ type: 'success', message: 'Sie haben sich erfolgreich abgemeldet.' }));\n};\n\nexport const signUp =\n  (values: ISignUpValues): AppThunk =>\n  async dispatch => {\n    dispatch(submitting());\n    let user, token;\n    try {\n      const response = await kakuroApi.post('/users', values);\n      user = response.data.user;\n      token = response.data.token;\n\n      localStorage.setItem('user', JSON.stringify(user));\n      localStorage.setItem('token', token);\n    } catch ({ response }: any) {\n      console.log('response:', response);\n      dispatch(signUpFailed(\"Unable to sign up\"));\n      // dispatch(\n      //   setAlert({\n      //     type: 'error',\n      //     message: 'Beim Anmelden gab es einen Fehler. Bitte probieren Sie es später noch einmal.',\n      //   }),\n      // );\n      return;\n    }\n\n    dispatch(loginSuccess(user));\n    // dispatch(setAlert({ type: 'success', message: 'Sie haben sich erfolgreich angemeldet.' }));\n  };\n","import myHistory from 'myHistory';\nimport { Button } from 'primereact/button';\nimport { Menubar } from 'primereact/menubar';\nimport React from 'react';\nimport { RootState } from 'store/store';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { logout } from 'store/userSlice';\nimport styles from './MyMenubar.module.scss';\n\nconst MyMenubar: React.FC = () => {\n  const dispatch = useDispatch();\n  const { user } = useSelector((state: RootState) => state.users);\n\n  const startItem = (\n    <div className={styles.startItem}>\n      <h3>Mr K.'s Kakuro</h3>\n    </div>\n  );\n\n  const menuItems = [\n    {\n      label: 'Menu',\n      icon: 'mdi mdi-hamburger',\n      command: () => myHistory.push('/'),\n    },\n    {\n      label: 'Design Puzzle',\n      icon: 'mdi mdi-pencil',\n      command: () => myHistory.push('/create'),\n      disabled: user == null,\n    },\n    {\n      label: 'Play Puzzle',\n      icon: 'mdi mdi-play',\n      command: () => myHistory.push('/play'),\n    },\n  ];\n\n  const endItem = user ? (\n    <Button\n      label={`Sign Out ${user.name}`}\n      icon='mdi mdi-logout'\n      onClick={() => dispatch(logout())}\n    />\n  ) : (\n    <Button\n      label='Sign Up/Sign In'\n      icon='mdi mdi-login'\n      onClick={() => myHistory.push('/signin')}\n    />\n  );\n\n  return <Menubar model={menuItems} start={startItem} end={endItem} />;\n};\n\nexport default MyMenubar;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nexport interface AlertType {\n  severity: string;\n  summary: string;\n  detail?: string;\n}\n\ntype GlobalSliceState = {\n  alerts: {\n    [key: string]: AlertType;\n  };\n  pageTitle: string | null;\n  isFetching: boolean;\n  notFound: string | null;\n};\n\nconst initialState = {\n  alerts: {},\n  pageTitle: null,\n  isFetching: false,\n  notFound: null,\n};\n\nexport const alertSlice = createSlice({\n  name: 'alerts',\n  initialState: initialState as GlobalSliceState,\n  reducers: {\n    clearAlert(state, action: PayloadAction<string>) {\n      delete state.alerts[action.payload];\n    },\n    setAlert(state, action: PayloadAction<AlertType>) {\n      const alert = action.payload;\n      state.alerts[alert.severity] = alert;\n      state.isFetching = false;\n    },\n    setNotFound(state, action: PayloadAction<string | null>) {\n      state.notFound = action.payload;\n    },\n    setErrorAlert(state, action: PayloadAction<string>) {\n      const alert = { severity: 'error', summary: action.payload };\n      state.alerts[alert.severity] = alert;\n      state.isFetching = false;\n    },\n    setSuccessAlert(state, action: PayloadAction<string>) {\n      const alert = { severity: 'success', summary: action.payload };\n      state.alerts[alert.severity] = alert;\n      state.isFetching = false;\n    },\n    setIsFetching(state, action: PayloadAction<boolean>) {\n      state.isFetching = action.payload;\n    },\n    setPageTitle(state, action: PayloadAction<string>) {\n      state.pageTitle = action.payload;\n      document.title = action.payload;\n    },\n  },\n});\n\nexport const {\n  clearAlert,\n  setAlert,\n  setErrorAlert,\n  setSuccessAlert,\n  setIsFetching,\n  setPageTitle,\n  setNotFound,\n} = alertSlice.actions;\n\nexport default alertSlice.reducer;\n","import { Toast } from 'primereact/toast';\nimport React, { useEffect, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { clearAlert } from './alertSlice';\nimport { RootState } from 'store/store';\n\nconst Alerts: React.FC = () => {\n  const alerts = useSelector((state: RootState) => state.alerts.alerts);\n  const dispatch = useDispatch();\n  const toastEl = useRef<any>(null);\n\n  useEffect(() => {\n    Object.keys(alerts).forEach((key) => {\n      toastEl.current?.show({\n        severity: key,\n        summary: alerts[key].summary,\n        detail: alerts[key].detail,\n      });\n\n      dispatch(clearAlert(key));\n    });\n  }, [dispatch, alerts]);\n\n  return <Toast ref={toastEl} />;\n};\n\nexport default Alerts;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport kakuroApi from 'api/kakuroApi';\nimport { setErrorAlert, setSuccessAlert } from 'features/alerts/alertSlice';\nimport { AppThunk } from 'store/store';\nimport { IBaseGame } from '../../store/gameSlice';\n\nexport interface IListGame extends IBaseGame {\n  cellString: string;\n  createdAt: Date;\n  _id: string;\n}\n\ntype ListSliceState = {\n  list: IListGame[];\n  choice?: IListGame;\n};\n\nconst initialState: ListSliceState = {\n  list: [],\n};\n\nexport const listSlice = createSlice({\n  name: 'list',\n  initialState,\n  reducers: {\n    fetchListSuccess: (state, action: PayloadAction<IListGame[]>) => {\n      state.list = action.payload;\n    },\n    addPuzzleToList: (state, action: PayloadAction<IListGame>) => {\n      state.list.push(action.payload);\n      console.log('Me here');\n    },\n    setChoiceID: (state, action: PayloadAction<IListGame>) => {\n      state.choice = action.payload;\n    },\n  },\n});\n\nexport const { addPuzzleToList, fetchListSuccess, setChoiceID } =\n  listSlice.actions;\n\nexport default listSlice.reducer;\n\nexport const fetchList = (): AppThunk => async (dispatch: any) => {\n  let list;\n\n  try {\n    const response = await kakuroApi.get('/puzzles');\n    list = response.data;\n  } catch (error) {\n    console.error('error:', error);\n    dispatch(setErrorAlert('Puzzles konnten nicht geladen werden.'));\n  }\n\n  dispatch(setSuccessAlert('Puzzles wurden geladen.'));\n  dispatch(fetchListSuccess(list));\n};\n","import { CellType, IGameData, IHintCell, INumberCell } from 'store/gameSlice';\n\nexport default function getHints(game: IGameData, index: number) {\n  const hints = [\n    { index: -1, sum: -1, count: -1, used: new Array<number>() },\n    { index: -1, sum: -1, count: -1, used: new Array<number>() },\n  ];\n  let hIndex = index;\n\n  // Find corresponding hint cell horizontally\n  while (game.cells[hIndex].type === CellType.NumberCell) {\n    const cell = game.cells[hIndex] as INumberCell;\n    if (cell.guess > 0) {\n      hints[0].used.push(cell.guess);\n    }\n    hIndex--;\n  }\n\n  hints[0].index = hIndex;\n  hints[0].sum = (game.cells[hIndex] as IHintCell).hintHorizontal! || -1;\n\n  // Find count of cells for this hint\n  hIndex = index;\n  while (\n    (hIndex + 1) % game.columnCount !== 0 &&\n    game.cells[hIndex + 1].type === CellType.NumberCell\n  ) {\n    hIndex++;\n    const cell = game.cells[hIndex] as INumberCell;\n    if (cell.guess > 0) {\n      hints[0].used.push(cell.guess);\n    }\n  }\n\n  hints[0].count = hIndex - hints[0].index;\n\n  // Find corresponding hint cell vertically\n  let vIndex = index;\n  while (game.cells[vIndex].type === CellType.NumberCell) {\n    const cell = game.cells[vIndex] as INumberCell;\n    if (cell.guess > 0) {\n      hints[1].used.push(cell.guess);\n    }\n    vIndex -= game.columnCount;\n  }\n\n  hints[1].index = vIndex;\n  hints[1].sum = (game.cells[vIndex] as IHintCell).hintVertical! || -1;\n\n  // Find count of cells for this hint\n  vIndex = index;\n  let nextRow = vIndex + game.columnCount;\n  while (\n    nextRow < game.cells.length &&\n    game.cells[nextRow].type === CellType.NumberCell\n  ) {\n    vIndex = nextRow;\n    const cell = game.cells[vIndex] as INumberCell;\n    if (cell.guess > 0) {\n      hints[1].used.push(cell.guess);\n    }\n    nextRow = vIndex + game.columnCount;\n  }\n\n  const count = (vIndex - hints[1].index) / game.columnCount;\n  hints[1].count = count;\n\n  return hints;\n}\n","export interface ICombinationsForCount {\n  [sum: string]: number[][];\n}\n\nexport interface ICombinations {\n  [count: string]: ICombinationsForCount;\n}\n\nconst makeCombinations = () => {\n  const combinations: ICombinations = {};\n  const digits = new Array(10).fill(false);\n\n  const digitsToCombination = () => {\n    const set = new Array<number>();\n    let count = 0;\n    let sum = 0;\n\n    for (let index = 1; index < digits.length; index++) {\n      if (digits[index]) {\n        set.push(index);\n        count += 1;\n        sum += index;\n      }\n    }\n\n    if (!combinations[count]) {\n      combinations[count] = {};\n    }\n\n    if (!combinations[count][sum]) {\n      combinations[count][sum] = new Array<number[]>();\n    }\n\n    combinations[count][sum].push(set);\n  };\n\n  const _makeCombinations = (min: number, current: number) => {\n    if (current === 10) {\n      digitsToCombination();\n    } else {\n      digits[current] = true;\n      _makeCombinations(min, current + 1);\n      digits[current] = false;\n      _makeCombinations(min, current + 1);\n      current++;\n    }\n  };\n\n  for (let min = 1; min < 9; min++) {\n    digits[min] = true;\n    _makeCombinations(min, min + 1);\n    digits[min] = false;\n  }\n\n  delete combinations['1'];\n  return combinations;\n};\n\nconst combinations: ICombinations = makeCombinations();\nObject.freeze(combinations);\n\nexport default combinations;\n","import { CellType, IGameData, INumberCell } from 'store/gameSlice';\nimport {\n  makePencilmarks,\n  getRowForCell,\n  singlePencilmarksToGuess,\n  getColumnForCell,\n} from './pencilmarks';\n\nlet solutions: IGameData[];\n\nexport function guessNumber(game: IGameData, index: number, guess: number) {\n  (game.cells[index] as INumberCell).guess = guess;\n  getRowForCell(game, index).cellIndexes.forEach(i => {\n    const nCell = game.cells[i] as INumberCell;\n    nCell.pencilMarks = nCell.pencilMarks.filter(pm => pm !== guess);\n  });\n\n  getColumnForCell(game, index).cellIndexes.forEach(i => {\n    const nCell = game.cells[i] as INumberCell;\n    nCell.pencilMarks = nCell.pencilMarks.filter(pm => pm !== guess);\n  });\n}\n\n// function logBoard(game: IGameData) {\n//   console.log(\n//     'Board',\n//     JSON.stringify(\n//       game.cells\n//         .filter(c => c.type === CellType.NumberCell)\n//         .map(c => (c as INumberCell).guess)\n//     )\n//   );\n// }\n\nfunction logSolution(game: IGameData) {\n  console.log(\n    'Solution',\n    JSON.stringify(\n      game.cells\n        .filter(c => c.type === CellType.NumberCell)\n        .map(c => (c as INumberCell).solution)\n    )\n  );\n}\n\nfunction _solvePuzzle(game: IGameData, index: number) {\n  if (index >= game.cells.length) {\n    // found a solution\n    const solvedGame: IGameData = JSON.parse(JSON.stringify(game));\n    solvedGame.cells.forEach(c => {\n      if (c.type === CellType.NumberCell) {\n        const nc = c as INumberCell;\n        nc.solution = nc.guess;\n        nc.guess = 0;\n        nc.pencilMarks = [];\n      }\n    });\n    solutions.push(solvedGame);\n  } else {\n    const cell = game.cells[index];\n\n    if (cell.type !== CellType.NumberCell || (cell as INumberCell).guess > 0) {\n      // if cell is not a number cell or if there is a guess in it already\n      _solvePuzzle(game, index + 1);\n    } else {\n      // Try all options for current cell's pencil marks\n      // and solve rest of puzzle recursively\n      const nCell: INumberCell = cell as INumberCell;\n      const rowData = getRowForCell(game, cell.index);\n      const columnData = getColumnForCell(game, cell.index);\n\n      nCell.pencilMarks.forEach(p => {\n        // TODO: check if pencil mark is valid option\n        // this should not happen\n        if (\n          rowData.usedDigits.includes(p) ||\n          columnData.usedDigits.includes(p)\n        ) {\n          return;\n        }\n\n        // logBoard(game);\n        // console.log(p, rowData.usedDigits, columnData.usedDigits);\n\n        if (\n          (rowData.usedDigits.length === rowData.count - 1 &&\n            rowData.sum + p !== rowData.hint) ||\n          (columnData.usedDigits.length === columnData.count - 1 &&\n            columnData.sum + p !== columnData.hint)\n        ) {\n          // only one digit missing, check if p is the missing number\n          return;\n        }\n\n        nCell.guess = p;\n        // console.log(`Cell no. ${index}: Guessing ${p}...`);\n\n        const tempGame: IGameData = JSON.parse(JSON.stringify(game));\n        makePencilmarks(tempGame);\n        singlePencilmarksToGuess(tempGame);\n        _solvePuzzle(tempGame, index + 1);\n        nCell.guess = 0;\n      });\n    }\n  }\n}\n\nexport interface ISolvePuzzleResult {\n  error?: string;\n  solution?: IGameData;\n}\n\n/**\n * Solves the entered puzzle. First version is a brute-force to see how long it takes :D\n * @param original the game to be solved\n * @param combinations all possible combinations\n * @returns the solved game\n */\nfunction solvePuzzle(original: IGameData): ISolvePuzzleResult {\n  // create copy of entered game\n  const game: IGameData = JSON.parse(JSON.stringify(original));\n  // create initial pencil marks\n  // logBoard(game);\n  makePencilmarks(game);\n  while (singlePencilmarksToGuess(game)) {}\n\n  solutions = new Array<IGameData>();\n  _solvePuzzle(game, 0);\n  // console.log(`Found ${solutions.length}:`);\n\n  if (solutions.length === 0) {\n    return { error: 'Puzzle invalid; no solution.' };\n  } else if (solutions.length > 1) {\n    return {\n      error: `Puzzle invalid; more than one solution (${solutions.length}).`,\n    };\n  } else {\n    logSolution(solutions[0]);\n    return { solution: solutions[0] };\n  }\n}\n\nexport default solvePuzzle;\n","import { IHintValues } from 'store/gameSlice';\nimport combinations from './combinations';\n\n/**\n *\n * @param hints the computed hints for a particular cell\n * @param combinations all combinations\n */\nexport default function getCombinations(\n  hints: IHintValues,\n) {\n  let combs = combinations[hints.count][hints.sum];\n\n  // only select those combinations which contain every used digit\n  combs = combs.filter(c => hints.used.every(h => c.includes(h)));\n\n  return combs;\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport getHints from 'utils/getHints';\nimport { makePencilmarks, singlePencilmarksToGuess } from 'utils/pencilmarks';\nimport { AppThunk } from './store';\n\n/* Types */\nexport enum Difficulty {\n  Easy = 0,\n  Medium = 1,\n  MediumPlus = 2,\n  Hard = 3,\n  VeryHard = 4,\n}\n\nexport enum CellType {\n  BlankCell = 'blankCell',\n  HintCell = 'hintCell',\n  NumberCell = 'numberCell',\n}\n\nexport enum PuzzleStates {\n  Raw = 0,\n  Valid = 1,\n  Solved = 2,\n}\n\nexport interface ICell {\n  index: number;\n  type: CellType;\n}\n\nexport interface IBlankCell extends ICell {\n  type: CellType.BlankCell;\n}\n\nexport interface IHintCell extends ICell {\n  type: CellType.HintCell;\n  hintHorizontal?: number;\n  hintVertical?: number;\n}\n\nexport interface INumberCell extends ICell {\n  type: CellType.NumberCell;\n  pencilMarks: number[];\n  guess: number;\n  solution: number;\n}\n\nexport type IBaseGame = {\n  name: string;\n  columnCount: number;\n  rowCount: number;\n  level: Difficulty;\n};\n\nexport interface IServerGameData extends IBaseGame {\n  state: PuzzleStates;\n  cellString: string;\n}\n\nexport interface IGameData extends IBaseGame {\n  state: PuzzleStates;\n  cells: ICell[];\n  hintCount: number;\n}\n\nexport interface IGuess {\n  index: number;\n  guess: number;\n}\n\nexport interface IHintValues {\n  index: number;\n  sum: number;\n  count: number;\n  used: number[];\n}\n\n/* State */\ntype GameSliceState = {\n  zoomLevel: number;\n  game: IGameData;\n  selectedIndex?: number;\n  hints: IHintValues[];\n};\n\nconst initialState: GameSliceState = {\n  zoomLevel: 2,\n  game: {\n    state: -1,\n    cells: [],\n    columnCount: -1,\n    rowCount: -1,\n    name: 'Dummy',\n    level: -1,\n    hintCount: -1,\n  },\n  hints: [\n    { index: -1, sum: -1, count: -1, used: new Array<number>() },\n    { index: -1, sum: -1, count: -1, used: new Array<number>() },\n  ],\n};\n\nexport const gameSlice = createSlice({\n  name: 'game',\n  initialState,\n  reducers: {\n    setCurrentGameSuccess(state, action: PayloadAction<IGameData>) {\n      state.game = action.payload;\n    },\n    fetchGameSuccess(state, action: PayloadAction<IGameData>) {\n      state.game = { ...action.payload };\n      // create pencilmarks for all number cells\n      state.game.cells\n        .filter(c => c.type === CellType.NumberCell)\n        .forEach(cell => {\n          const nCell = cell as INumberCell;\n          if (!nCell.guess) {\n            nCell.guess = 0;\n          }\n          if (!nCell.pencilMarks) {\n            nCell.pencilMarks = [];\n          }\n        });\n    },\n    setSelectedIndex(state, action: PayloadAction<number>) {\n      let currentIndex = action.payload;\n      state.selectedIndex = currentIndex;\n      state.hints = getHints(state.game!, currentIndex);\n    },\n    increaseZoom(state) {\n      state.zoomLevel += 1;\n    },\n    decreaseZoom(state) {\n      state.zoomLevel -= 1;\n    },\n    setGuess(state, action: PayloadAction<IGuess>) {\n      const { index, guess } = action.payload;\n      const newGame: IGameData = JSON.parse(JSON.stringify(state.game));\n      const currentCell: INumberCell = newGame.cells[index] as INumberCell;\n      if (currentCell.type === CellType.NumberCell) {\n        currentCell.guess = guess;\n        // if (guess === 0) {\n        //   makePencilmarksForCell(currentCell, index, newGame);\n        // }\n        state.game = newGame;\n      }\n      state.hints = getHints(state.game!, index);\n    },\n    togglePencilMark(state, action: PayloadAction<IGuess>) {\n      const { index, guess } = action.payload;\n      const newGame: IGameData = JSON.parse(JSON.stringify(state.game));\n      const currentCell: INumberCell = newGame.cells[index] as INumberCell;\n\n      if (currentCell.type === CellType.NumberCell) {\n        const index = currentCell.pencilMarks.indexOf(guess);\n\n        if (index < 0) {\n          currentCell.pencilMarks.push(guess);\n          currentCell.pencilMarks.sort();\n        } else {\n          currentCell.pencilMarks.splice(index, 1);\n        }\n        state.game = newGame;\n      }\n    },\n    autoPencil(state, action: PayloadAction) {\n      // set guesses where there is only one pencil mark option\n      singlePencilmarksToGuess(state.game!);\n\n      // calculate pencil marks\n      makePencilmarks(state.game!);\n    },\n  },\n});\n\nexport const {\n  fetchGameSuccess,\n  increaseZoom,\n  decreaseZoom,\n  setSelectedIndex,\n  setCurrentGameSuccess,\n  setGuess,\n  autoPencil,\n  togglePencilMark,\n} = gameSlice.actions;\n\nexport default gameSlice.reducer;\n\nexport const setCurrentGame =\n  (game: IGameData): AppThunk =>\n  async (dispatch: any) => {\n    const newGame: IGameData = JSON.parse(JSON.stringify(game));\n\n    // create pencilmarks for all number cells\n    newGame.cells\n      .filter(c => c.type === CellType.NumberCell)\n      .forEach(cell => {\n        const nCell = cell as INumberCell;\n        if (!nCell.guess) {\n          nCell.guess = 0;\n        }\n        if (!nCell.pencilMarks) {\n          nCell.pencilMarks = [];\n        }\n      });\n\n    dispatch(setCurrentGameSuccess(newGame));\n  };\n","import { CellType, IGameData, IHintCell, INumberCell } from 'store/gameSlice';\nimport getCombinations from './getCombinations';\nimport getHints from './getHints';\nimport { guessNumber } from './solvePuzzle';\n\nexport function getRowForCell(\n  { cells, columnCount }: IGameData,\n  index: number,\n  across = true\n) {\n  const delta = across ? 1 : columnCount;\n  let x = index - delta;\n  let cellIndexes = [];\n  let usedDigits = [];\n  let sum = 0;\n  let sumSolved = 0;\n\n  while (cells[x].type === CellType.NumberCell) {\n    x -= delta;\n  }\n\n  let y = x;\n  while (\n    y + delta < cells.length &&\n    cells[y + delta].type === CellType.NumberCell\n  ) {\n    y += delta;\n    cellIndexes.push(y);\n    const nCell = cells[y] as INumberCell;\n    if (nCell.guess) {\n      usedDigits.push(nCell.guess);\n      sum += nCell.guess;\n    }\n\n    if (nCell.solution) {\n      sumSolved += nCell.solution;\n    }\n  }\n\n  const hint = across\n    ? (cells[x] as IHintCell).hintHorizontal\n    : (cells[x] as IHintCell).hintVertical;\n  const count = (y - x) / delta;\n\n  return { index, hint, count, sum, sumSolved, cellIndexes, usedDigits };\n}\n\nexport function getColumnForCell(game: IGameData, index: number) {\n  return getRowForCell(game, index, false);\n}\n\nexport function guessRemovesPencilmarks(game: IGameData, index: number) {}\n\nexport function singlePencilmarksToGuess(game: IGameData): boolean {\n  let setGuess = false;\n\n  game!.cells.forEach(c => {\n    if (c.type === CellType.NumberCell) {\n      const cell = c as INumberCell;\n      if (cell.guess == null && cell.pencilMarks?.length === 1) {\n        // cell.guess = cell.pencilMarks[0];\n        guessNumber(game, cell.index, cell.pencilMarks[0]);\n        setGuess = true;\n      }\n    }\n  });\n\n  return setGuess;\n}\n\nexport function makePencilmarksForCell(\n  nCell: INumberCell,\n  index: number,\n  game: IGameData\n) {\n  if (nCell.guess > 0) {\n    return;\n  }\n\n  // Filter out impossible combinations\n  const hints = getHints(game, index);\n  const hComb = getCombinations(hints[0]);\n  const vComb = getCombinations(hints[1]);\n  // Get possible digits\n  const hDigits = Array.from(new Set(hComb.flat()));\n  const vDigits = Array.from(new Set(vComb.flat()));\n\n  const used = [...hints[0].used, ...hints[1].used];\n  const poss = hDigits\n    .filter(e => vDigits.includes(e) && !used.includes(e))\n    .sort();\n\n  nCell.pencilMarks = poss;\n}\n\nexport function makePencilmarks(game: IGameData) {\n  game.cells.forEach((cell, index) => {\n    if (cell.type === CellType.NumberCell) {\n      makePencilmarksForCell(cell as INumberCell, index, game);\n    }\n  });\n}\n","import { CellType, IGameData, IHintCell } from 'store/gameSlice';\n\nfunction checkPuzzle(puzzle: IGameData) {\n  const { cells } = puzzle;\n  // TODO: Which clever checks should we implement?\n  // * are the sums possible?\n  let sumHorizontal = 0;\n  let sumVertical = 0;\n\n  // * are the values of rows and columns correct?\n\n  // * do all hint cells have all necessary hints?\n  const allHints = cells\n    .filter(c => c.type === CellType.HintCell)\n    .every(c => {\n      const hc = c as IHintCell;\n\n      if (hc.hintHorizontal) {\n        sumHorizontal += hc.hintHorizontal;\n      }\n\n      if (hc.hintVertical) {\n        sumVertical += hc.hintVertical;\n      }\n\n      return (\n        (!hc.hintHorizontal || hc.hintHorizontal > -1) &&\n        (!hc.hintVertical || hc.hintVertical > -1)\n      );\n    });\n\n  if (!allHints) {\n    return { valid: false, error: 'Not all hints provided.' };\n  }\n\n  if (sumHorizontal !== sumVertical) {\n    return {\n      valid: false,\n      error: `Hints across: ${sumHorizontal}, down: ${sumVertical}. Must be equal.`,\n    };\n  }\n\n  return { valid: true };\n}\n\nexport default checkPuzzle;\n","import { CellType, ICell, IGameData, IHintCell } from 'store/gameSlice';\nimport { getColumnForCell, getRowForCell } from './pencilmarks';\n\nexport function doCountMissingHints(puzzle: IGameData) {\n  const reducer = (prev: number, curr: ICell) => {\n    if (curr.type !== CellType.HintCell) {\n      return prev;\n    } else {\n      const hCell = curr as IHintCell;\n      return (\n        prev +\n        (hCell.hintHorizontal === -1 ? 1 : 0) +\n        (hCell.hintVertical === -1 ? 1 : 0)\n      );\n    }\n  };\n\n  return puzzle.cells.reduce(reducer, 0);\n}\n\nexport function doMakeHintCells(puzzle: IGameData) {\n  const { cells } = puzzle;\n  let hintCount = 0;\n\n  // no hint cells in last cell\n  for (let index = 0; index < cells.length - 1; index++) {\n    const cell: ICell = cells[index];\n    const nextColumn = index + 1;\n    const nextRow = index + puzzle.columnCount;\n\n    if (cell.type === CellType.BlankCell) {\n      if (cells[nextColumn].type === CellType.NumberCell) {\n        cell.type = CellType.HintCell;\n        (cell as IHintCell).hintHorizontal = -1;\n        hintCount += 1;\n      }\n\n      if (\n        nextRow < cells.length &&\n        cells[nextRow].type === CellType.NumberCell\n      ) {\n        cell.type = CellType.HintCell;\n        (cell as IHintCell).hintVertical = -1;\n        hintCount += 1;\n      }\n    } else if (cell.type === CellType.HintCell) {\n      const hCell = cell as IHintCell;\n      let isHint = false;\n\n      if (cells[nextColumn].type === CellType.NumberCell) {\n        if (hCell.hintHorizontal === -1) {\n          hintCount += 1;\n        }\n\n        isHint = true;\n      }\n\n      if (\n        nextRow < cells.length &&\n        cells[nextRow].type === CellType.NumberCell\n      ) {\n        if (hCell.hintVertical === -1) {\n          hintCount += 1;\n        }\n\n        isHint = true;\n      }\n\n      // check if hint cell is no longer a hint cell\n      if (!isHint) {\n        cell.type = CellType.BlankCell;\n      }\n    }\n  }\n\n  puzzle.hintCount = hintCount;\n  // console.log('puzzle:', JSON.stringify(puzzle));\n}\n\nexport function doFillHintsFromSolution(puzzle: IGameData) {\n  const { cells } = puzzle;\n\n  cells\n    .filter(c => c.type === CellType.HintCell)\n    .forEach(c => {\n      const hintCell = c as IHintCell;\n\n      if (hintCell.hintHorizontal === -1) {\n        const rowGroup = getRowForCell(puzzle, hintCell.index + 1);\n        hintCell.hintHorizontal = rowGroup.sumSolved;\n      }\n\n      if (hintCell.hintVertical === -1) {\n        const columnGroup = getColumnForCell(\n          puzzle,\n          hintCell.index + puzzle.columnCount\n        );\n        hintCell.hintVertical = columnGroup.sumSolved;\n      }\n    });\n}\n","import {\n  CellType,\n  IGameData,\n  INumberCell,\n  IServerGameData,\n} from 'store/gameSlice';\n\nfunction preparePuzzle(game: IGameData): IServerGameData {\n  const cellString = game.cells\n    .map(cell =>\n      cell.type !== CellType.NumberCell ? 0 : (cell as INumberCell).solution\n    )\n    .join('');\n\n  const { cells, ...newGame } = game;\n  const newServerGame = { ...newGame, cellString } as IServerGameData;\n\n  return newServerGame;\n}\n\nexport default preparePuzzle;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport kakuroApi from 'api/kakuroApi';\nimport { setErrorAlert, setSuccessAlert } from 'features/alerts/alertSlice';\nimport { addPuzzleToList, IListGame } from 'features/list/listSlice';\nimport authHeader from 'utils/authHeader';\nimport checkPuzzle from 'utils/checkPuzzle';\nimport { doCountMissingHints, doMakeHintCells } from 'utils/hintCells';\nimport preparePuzzle from 'utils/preparePuzzle';\nimport solvePuzzle from 'utils/solvePuzzle';\nimport {\n  CellType,\n  IBaseGame,\n  IGameData,\n  INumberCell, PuzzleStates\n} from './gameSlice';\nimport { AppThunk } from './store';\n\nexport enum Direction {\n  Horizontal = 0,\n  Vertical = 1,\n  Both = 2,\n}\n\nexport interface IDesignCell {\n  type: CellType;\n  index: number;\n  hintHorizontal?: number;\n  hintVertical?: number;\n  solution?: number;\n}\n\nexport enum DesignStepsEnum {\n  SetSize = 0,\n  DrawGrid = 1,\n  InsertHints = 2,\n  CheckPuzzle = 3,\n}\n\nexport const designSteps = [\n  { label: 'Set Size' },\n  { label: 'Draw Grid' },\n  { label: 'Insert Hints' },\n  { label: 'Check Puzzle' },\n];\n\ntype DesignSliceState = {\n  activeStep: number;\n  puzzle: IGameData;\n};\n\nconst createGrid = (columns: number, rows: number) =>\n  Array.from({ length: columns * rows }, (item, index) => ({\n    index,\n    type: CellType.BlankCell,\n  }));\n\nconst initialState: DesignSliceState = {\n  activeStep: 0,\n  puzzle: {\n    name: 'Unnamed',\n    level: 4,\n    columnCount: 10,\n    rowCount: 10,\n    cells: createGrid(10, 10),\n    state: PuzzleStates.Raw,\n    hintCount: -1,\n  },\n};\n\nexport const designSlice = createSlice({\n  name: 'design',\n  initialState,\n  reducers: {\n    setActiveStep: (state, action) => {\n      state.activeStep = action.payload;\n      localStorage.setItem('puzzleState', JSON.stringify(state));\n    },\n    setBaseGame: (state, action: PayloadAction<IBaseGame>) => {\n      state.puzzle = { ...state.puzzle, ...action.payload };\n      state.puzzle.cells = createGrid(\n        state.puzzle.columnCount,\n        state.puzzle.rowCount\n      );\n    },\n    clearDesignGame: () => {\n      localStorage.removeItem('puzzleState');\n      return initialState;\n    },\n    setPuzzleState: (state, action: PayloadAction<DesignSliceState>) => {\n      return action.payload;\n    },\n    updateCell: (state, action) => {\n      const newCell = action.payload;\n\n      if (\n        newCell.type === CellType.NumberCell &&\n        !(newCell as INumberCell).guess\n      ) {\n        (newCell as INumberCell).guess = 0;\n      }\n\n      state.puzzle.cells[newCell.index] = newCell;\n      state.puzzle.state = PuzzleStates.Raw;\n      state.puzzle.hintCount = doCountMissingHints(state.puzzle);\n    },\n    makeHintCells: state => {\n      doMakeHintCells(state.puzzle);\n    },\n    solveGameSuccess: (state, action: PayloadAction<IGameData>) => {\n      state.puzzle = action.payload;\n      state.puzzle.state = PuzzleStates.Solved;\n    },\n    solveGameFailed: state => {\n      state.puzzle.state = PuzzleStates.Raw;\n      state.activeStep = DesignStepsEnum.InsertHints;\n    },\n    checkGameSuccess: state => {\n      state.puzzle.state = PuzzleStates.Valid;\n    },\n    createGameSuccess: () => {\n      // myHistory.push('/');\n      localStorage.removeItem('puzzleState');\n      return initialState;\n    },\n  },\n});\n\nexport const {\n  checkGameSuccess,\n  clearDesignGame,\n  createGameSuccess,\n  setActiveStep,\n  setBaseGame,\n  setPuzzleState,\n  makeHintCells,\n  solveGameSuccess,\n  solveGameFailed,\n  updateCell,\n} = designSlice.actions;\n\nexport default designSlice.reducer;\n\nexport const checkGame = (): AppThunk => async (dispatch: any, getState) => {\n  const { puzzle } = getState().design;\n  const isValid = checkPuzzle(puzzle);\n\n  if (isValid) {\n    dispatch(setSuccessAlert('Puzzle is valid.'));\n    dispatch(checkGameSuccess());\n  } else {\n    dispatch(setErrorAlert(`Puzzle invalid`));\n  }\n};\n\nexport const solveGame = (): AppThunk => async (dispatch: any, getState) => {\n  const { puzzle } = getState().design;\n  const result = solvePuzzle(puzzle);\n\n  if (result.error) {\n    dispatch(setErrorAlert(`Puzzle invalid: ${result.error}`));\n    dispatch(solveGameFailed());\n  } else {\n    dispatch(setSuccessAlert('Puzzle solved.'));\n    dispatch(solveGameSuccess(result.solution!));\n  }\n};\n\nexport interface IApiError {\n  code: number;\n  message: string;\n}\n\nexport const createGame =\n  (values: IGameData): AppThunk =>\n  async (dispatch: any) => {\n    // dispatch(submitting());\n    let puzzle = preparePuzzle(values);\n    let newPuzzle: IListGame;\n\n    try {\n      const response = await kakuroApi.post('/puzzles', puzzle, {\n        headers: authHeader(),\n      });\n      newPuzzle = response.data;\n    } catch (error) {\n      console.log('error:', JSON.stringify(error, null, 4));\n      dispatch(\n        setErrorAlert(\n          // `Error trying to save puzzle: ${(error as IApiError).message}`\n          `Error: Puzzle is already in database`\n        )\n      );\n      return;\n    }\n\n    dispatch(addPuzzleToList(newPuzzle));\n    dispatch(createGameSuccess());\n    dispatch(setSuccessAlert('Puzzle erzeugt.'));\n  };\n","import { Panel } from 'primereact/panel';\nimport { Button } from 'primereact/button';\nimport React, { FunctionComponent } from 'react';\nimport { useSelector } from 'react-redux';\nimport { designSteps } from 'store/designSlice';\nimport { RootState } from '../../store/store';\n\ninterface Props {\n  children?: JSX.Element | JSX.Element[];\n  handleBack?: () => void;\n  handleNext?: () => void;\n}\n\nconst DesignPanel: FunctionComponent<Props> = props => {\n  const { handleBack, handleNext, children } = props;\n  const { activeStep } = useSelector((state: RootState) => state.design);\n\n  const headerTemplate = (options: any) => {\n    const className = `${options.className} p-jc-start`;\n    const titleClassName = `${options.titleClassName} p-pl-1`;\n\n    return (\n      <div className={className}>\n        <span className={titleClassName}>\n          Step {activeStep + 1}: {designSteps[activeStep].label}\n        </span>\n\n        <span className={titleClassName}>\n          <Button\n            label='Back'\n            icon='mdi mdi-arrow-left'\n            onClick={handleBack}\n            disabled={handleBack == null}\n          />\n\n          <Button\n            label='Next'\n            icon='mdi mdi-arrow-right'\n            onClick={handleNext}\n            // disabled={activeStep === designSteps.length - 1}\n            disabled={handleNext == null}\n          />\n        </span>\n      </div>\n    );\n  };\n\n  return <Panel headerTemplate={headerTemplate}>{children}</Panel>;\n};\n\nexport default DesignPanel;\n","import classNames from 'classnames';\nimport { Button } from 'primereact/button';\nimport { Dialog } from 'primereact/dialog';\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { CellType } from 'store/gameSlice';\nimport { RootState } from 'store/store';\nimport combinations from 'utils/combinations';\nimport { getRowForCell } from 'utils/pencilmarks';\nimport { IDesignCell, updateCell } from '../../store/designSlice';\nimport styles from './HintDialog.module.scss';\n\nexport interface Props {\n  cell: IDesignCell;\n  across: boolean;\n  down: boolean;\n  visible: boolean;\n  onHide: () => void;\n}\n\nconst HintDialog: React.FC<Props> = ({\n  cell,\n  across,\n  down,\n  visible,\n  onHide,\n}) => {\n  const { puzzle } = useSelector((state: RootState) => state.design);\n  const [options, setOptions] = useState<number[]>([]);\n  const dispatch = useDispatch();\n\n  const handleClick = (n: number, acrossHint: boolean) => {\n    const newCell = { ...cell, type: CellType.HintCell };\n    if (acrossHint) {\n      newCell.hintHorizontal = n;\n    } else {\n      newCell.hintVertical = n;\n    }\n\n    dispatch(updateCell(newCell));\n    if (!acrossHint || !down) {\n      onHide();\n    }\n  };\n\n  const renderButtons = (across: boolean) => {\n    const groupData = getRowForCell(\n      puzzle,\n      cell.index + (across ? 1 : puzzle.columnCount),\n      across\n    );\n\n    // console.log('groupData.index', groupData.index, 'groupData.count', groupData.count);\n    // const minSum = 3;\n    // const maxSum = 45;\n    const combs = Object.keys(combinations[groupData.count]).map(e => +e);\n    const minSum = Math.min(...combs);\n    const maxSum = Math.max(...combs);\n\n    return (\n      <div className=''>\n        <div className={styles.label}>{across ? 'Across' : 'Down'}</div>\n        <div className={styles.buttonGrid}>\n          {options.map(n => (\n            <Button\n              key={n}\n              label={n < minSum || n > maxSum ? '' : '' + n}\n              onClick={() => handleClick(n, across)}\n              disabled={n < minSum || n > maxSum}\n              className={classNames(\n                'p-button-rounded',\n                styles.button,\n                across ? 'p-button-success' : 'p-button-info'\n              )}\n            />\n          ))}\n        </div>\n      </div>\n    );\n  };\n\n  useEffect(() => {\n    // const numbers = Array.from({ length: 43 }, (e, i) => i + 3);\n    const numbers = Array.from({ length: 46 }, (e, i) => i);\n    setOptions(numbers);\n  }, []);\n\n  return (\n    <Dialog\n      header='Set number(s) for hint cell'\n      style={{ width: '30vw' }}\n      visible={visible}\n      modal={true}\n      onHide={onHide}>\n      {across && renderButtons(true)}\n      {down && renderButtons(false)}\n    </Dialog>\n  );\n};\n\nexport default HintDialog;\n","import classnames from 'classnames';\nimport React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { CellType } from 'store/gameSlice';\nimport { IDesignCell, updateCell } from '../../store/designSlice';\nimport { RootState } from '../../store/store';\nimport '../playing/Cell.scss';\nimport '../playing/HintCell.scss';\nimport styles from './DesignCell.module.scss';\nimport HintDialog from './HintDialog';\n\nexport interface Props {\n  cell: IDesignCell;\n  index: number;\n}\n\nconst DesignCell: React.FC<Props> = ({ cell, index }) => {\n  const { activeStep } = useSelector((state: RootState) => state.design);\n  const dispatch = useDispatch();\n  const [dialogVisible, setDialogVisible] = useState(false);\n\n  const hide = () => {\n    setDialogVisible(false);\n  };\n\n  const handleClick = (e: React.MouseEvent) => {\n    if (activeStep === 1) {\n      // Toggle between blank and number cell\n      const newCell = {\n        ...cell,\n        type:\n          cell.type === CellType.BlankCell\n            ? CellType.NumberCell\n            : CellType.BlankCell,\n      };\n      dispatch(updateCell(newCell));\n    } else if (activeStep === 2 && cell.type === CellType.HintCell) {\n      // Show dialog to pick hint value\n      setDialogVisible(true);\n    }\n  };\n\n  const renderHint = (value: number | undefined) => {\n    if (value) {\n      const hintStr = value > 0 ? value : '?';\n      const hintClass = value > 0 ? '' : styles.hintMissing;\n      return <div className={hintClass}>{hintStr}</div>;\n    } else {\n      return null;\n    }\n  };\n\n  return (\n    <>\n      <div\n        className={classnames(styles.designCell, cell.type)}\n        onClick={handleClick}>\n        {/* <div className={styles.index}>{cell.index}</div> */}\n        <div className='horizontalHint'>{renderHint(cell.hintHorizontal)}</div>\n        <div className='verticalHint'>{renderHint(cell.hintVertical)}</div>\n        <div className={styles.solution}>{renderHint(cell.solution)}</div>\n      </div>\n      <HintDialog\n        cell={cell}\n        visible={dialogVisible}\n        onHide={hide}\n        across={cell.hintHorizontal != null}\n        down={cell.hintVertical != null}\n      />\n    </>\n  );\n};\n\nexport default DesignCell;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { IDesignCell } from 'store/designSlice';\nimport { RootState } from '../../store/store';\nimport DesignCell from './DesignCell';\nimport styles from './DrawGrid.module.scss';\n\nconst DrawGrid: React.FC = () => {\n  const {\n    puzzle: { columnCount, cells },\n  } = useSelector((state: RootState) => state.design);\n\n  return (\n    <div>\n      <div className={styles.gameBackground}>\n        <div\n          className={styles.grid}\n          style={{\n            gridTemplateColumns: `repeat(${columnCount}, 1fr)`,\n          }}>\n          {cells.map((c, i) => (\n            <DesignCell key={i} index={i} cell={c as IDesignCell} />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default DrawGrid;\n","import classNames from 'classnames';\nimport myHistory from 'myHistory';\nimport { Button } from 'primereact/button';\nimport { Dialog } from 'primereact/dialog';\nimport { InputTextarea } from 'primereact/inputtextarea';\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  clearDesignGame,\n  createGame,\n  setActiveStep,\n  solveGame\n} from 'store/designSlice';\nimport { PuzzleStates, setCurrentGame } from 'store/gameSlice';\nimport { RootState } from '../../store/store';\nimport DesignPanel from './DesignPanel';\nimport DrawGrid from './DrawGrid';\nimport styles from './SaveGame.module.scss';\n\nconst SaveGame: React.FC = () => {\n  const [exportVisible, setExportVisible] = useState(false);\n  const [puzzleJSON, setPuzzleJSON] = useState('');\n  const { activeStep, puzzle } = useSelector(\n    (state: RootState) => state.design\n  );\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    setPuzzleJSON(JSON.stringify(puzzle));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [puzzle]);\n\n  const handleBack = () => {\n    dispatch(setActiveStep(activeStep - 1));\n  };\n\n  const handlePlay = () => {\n    dispatch(setCurrentGame(puzzle));\n    myHistory.push('/play');\n  };\n\n  const handleSolve = () => {\n    dispatch(solveGame());\n  };\n\n  const handleSend = () => {\n    dispatch(createGame(puzzle));\n    myHistory.push('/play');\n  };\n\n  const handleClear = () => {\n    dispatch(clearDesignGame());\n  };\n\n  return (\n    <DesignPanel handleBack={handleBack}>\n      <>\n        <Button\n          label='Play Locally'\n          icon='mdi mdi-play'\n          onClick={handlePlay}\n          className={styles.button}\n        />\n\n        <Button\n          label='Export Puzzle'\n          icon='mdi mdi-export'\n          onClick={() => setExportVisible(true)}\n          className={styles.button}\n        />\n\n        <Button\n          label='Solve'\n          icon='mdi mdi-brain'\n          onClick={handleSolve}\n          className={styles.button}\n        />\n\n        <Button\n          label='Send to Server & Play'\n          icon='mdi mdi-send'\n          onClick={handleSend}\n          className={styles.button}\n          disabled={puzzle.state !== PuzzleStates.Solved}\n        />\n\n        <Button\n          label='Start Over'\n          icon='mdi mdi-restart'\n          onClick={handleClear}\n          className={classNames(\n            styles.button,\n            'p-button-warning',\n            'p-button-success'\n          )}\n        />\n\n        <Dialog\n          header='Spiel exportieren'\n          visible={exportVisible}\n          style={{ width: '50vw' }}\n          modal\n          onHide={() => setExportVisible(false)}>\n          <InputTextarea\n            rows={8}\n            style={{ width: '100%' }}\n            value={puzzleJSON}\n          />\n        </Dialog>\n      </>\n\n      <DrawGrid />\n    </DesignPanel>\n  );\n};\n\nexport default SaveGame;\n","import { CellType, IGameData } from 'store/gameSlice';\nimport { getColumnForCell, getRowForCell } from './pencilmarks';\n\nexport interface IValidatePuzzleResult {\n  valid: boolean;\n  message: string;\n}\n\nfunction validatePuzzle(puzzle: IGameData): IValidatePuzzleResult {\n  const { cells } = puzzle;\n  let numberCount = 0;\n\n  // check that there is at least two groups with count > 1\n  // and that there are no groups with count 1\n  for (let index = 0; index < cells.length; index++) {\n    const cell = cells[index];\n\n    if (cell.type === CellType.NumberCell) {\n      numberCount += 1;\n\n      const row = getRowForCell(puzzle, cell.index);\n      if (row.count === 1) {\n        return {\n          valid: false,\n          message: 'There is at least one group across with only one cell',\n        };\n      }\n\n      const column = getColumnForCell(puzzle, cell.index);\n      if (column.count === 1) {\n        return {\n          valid: false,\n          message: 'There is at least one group down with only one cell',\n        };\n      }\n    }\n  }\n\n  return numberCount < 3\n    ? { valid: false, message: 'Too few number cells' }\n    : { valid: true, message: 'Puzzle grid is fine' };\n}\n\nexport default validatePuzzle;\n","import { setErrorAlert } from 'features/alerts/alertSlice';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setActiveStep } from 'store/designSlice';\nimport validatePuzzle from 'utils/validateGrid';\nimport { RootState } from '../../store/store';\nimport DesignPanel from './DesignPanel';\nimport DrawGrid from './DrawGrid';\n\nconst SetCells: React.FC = () => {\n  const { activeStep, puzzle } = useSelector(\n    (state: RootState) => state.design\n  );\n  const dispatch = useDispatch();\n\n  const handleBack = () => {\n    dispatch(setActiveStep(activeStep - 1));\n  };\n\n  const handleNext = () => {\n    const res = validatePuzzle(puzzle);\n    if (res.valid) {\n      dispatch(setActiveStep(activeStep + 1));\n    } else {\n      dispatch(setErrorAlert(res.message));\n    }\n  };\n\n  return (\n    <DesignPanel handleBack={handleBack} handleNext={handleNext}>\n      <DrawGrid />\n    </DesignPanel>\n  );\n};\n\nexport default SetCells;\n","import { setErrorAlert } from 'features/alerts/alertSlice';\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { makeHintCells, setActiveStep } from 'store/designSlice';\nimport checkPuzzle from 'utils/checkPuzzle';\nimport { RootState } from '../../store/store';\nimport DesignPanel from './DesignPanel';\nimport DrawGrid from './DrawGrid';\n\nconst SetHints: React.FC = () => {\n  const { activeStep, puzzle } = useSelector(\n    (state: RootState) => state.design\n  );\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(makeHintCells());\n  });\n\n  const handleBack = () => {\n    dispatch(setActiveStep(activeStep - 1));\n  };\n\n  const handleNext = () => {\n    const res = checkPuzzle(puzzle);\n\n    if (res.valid) {\n      dispatch(setActiveStep(activeStep + 1));\n    } else {\n      dispatch(setErrorAlert(res.error || \"Error in puzzle\"));\n    }\n  };\n\n  return (\n    <DesignPanel handleNext={handleNext} handleBack={handleBack}>\n      <DrawGrid />\n      <div className='notes'>Missing hints: {puzzle.hintCount}</div>\n    </DesignPanel>\n  );\n};\n\nexport default SetHints;\n","import { ErrorMessage, Field } from 'formik';\nimport React from 'react';\n\ninterface Props {\n  name: string;\n  label: string;\n  as: any;\n  hint?: string;\n  [key: string]: any;\n}\n\nconst MyInput: React.FC<Props> = props => {\n  const { label, name, hint } = props;\n\n  return (\n    <div className='field grid'>\n      {/* <label htmlFor={name} className='block text-900 font-medium mb-2'> */}\n      <label htmlFor={name} className='col-12 mb-2 md:col-2 md:mb-0'>\n        {label}\n      </label>\n\n      <div className='col-12 md:col-10'>\n        {/* <Field {...props} className='w-full mb-3' /> */}\n        <Field {...props} className=\"inputfield w-full\" />\n        {hint && <div dangerouslySetInnerHTML={{ __html: hint }} />}\n        <ErrorMessage\n          name={name}\n          component='div'\n          className='fieldErrorMessage'\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default MyInput;\n","import {\n  SelectButton,\n  SelectButtonChangeParams,\n} from 'primereact/selectbutton';\nimport React from 'react';\n\ninterface Props {\n  field: string;\n  label: string;\n  values: { [key: string]: any };\n  options: any;\n  setFieldValue: (label: string, newValue: number) => void;\n}\n\nconst MySlider: React.FC<Props> = ({\n  values,\n  field,\n  label,\n  options,\n  setFieldValue,\n}) => {\n  const handleChange = (event: SelectButtonChangeParams) => {\n    setFieldValue(field, event.value as number);\n  };\n\n  return (\n    <div className='field grid'>\n      <label htmlFor={field} className='col-12 mb-2 md:col-2 md:mb-0'>\n        {label}\n      </label>\n\n      <div className='col-12 md:col-10'>\n        <SelectButton\n          id={field}\n          value={values[field]}\n          options={options}\n          onChange={event => handleChange(event)}\n          className='justify-content-start'\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default MySlider;\n","import { InputNumber } from 'primereact/inputnumber';\nimport { Slider, SliderChangeParams } from 'primereact/slider';\nimport React from 'react';\n\ninterface Props {\n  field: string;\n  label: string;\n  values: { [key: string]: any };\n  min?: number;\n  max?: number;\n  setFieldValue: (label: string, newValue: number) => void;\n}\n\nconst MySlider: React.FC<Props> = ({\n  values,\n  field,\n  label,\n  setFieldValue,\n  min,\n  max,\n}) => {\n  const handleChange = (event: SliderChangeParams) => {\n    setFieldValue(field, event.value as number);\n  };\n\n  return (\n    <div className='field grid'>\n      <label htmlFor={field} className='col-12 mb-2 md:col-2 md:mb-0'>\n        {label}\n      </label>\n\n      <div className='col-12 md:col-10'>\n        <InputNumber\n          value={values[field]}\n          onChange={event => handleChange(event)}\n          className='inputfield w-full'\n        />\n\n        <Slider\n          id={field}\n          value={values[field]}\n          onChange={event => handleChange(event)}\n          min={min}\n          max={max}\n          className='inputfield w-full'\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default MySlider;\n","export const difficultyLevels = {\n  0: 'Easy',\n  1: 'Medium',\n  2: 'Medium Plus',\n  3: 'Hard',\n  4: 'Very Hard',\n};\n\nexport const difficultyLabels = [\n  {\n    label: 'Easy',\n    value: 0,\n  },\n  {\n    label: 'Medium',\n    value: 1,\n  },\n  {\n    label: 'Medium Plus',\n    value: 2,\n  },\n  {\n    label: 'Hard',\n    value: 3,\n  },\n  {\n    label: 'Very Hard',\n    value: 4,\n  },\n];\n","import MyInput from 'components/MyInput';\nimport MySelectButton from 'components/MySelectButton';\nimport MySlider from 'components/MySlider';\nimport { Form, Formik, FormikProps } from 'formik';\nimport { Button } from 'primereact/button';\nimport { Dialog } from 'primereact/dialog';\nimport { InputText } from 'primereact/inputtext';\nimport { InputTextarea } from 'primereact/inputtextarea';\nimport React, { useRef, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setActiveStep, setBaseGame, setPuzzleState } from 'store/designSlice';\nimport { IBaseGame, IGameData } from 'store/gameSlice';\nimport { difficultyLabels } from 'types/puzzle';\nimport * as Yup from 'yup';\nimport { RootState } from '../../store/store';\nimport DesignPanel from './DesignPanel';\n\nconst minColumns = 4;\n\nconst PuzzleSchema = Yup.object().shape({\n  name: Yup.string()\n    .max(50, 'Must be 50 characters or less')\n    .required('Required'),\n  level: Yup.number().min(0).max(4).required(),\n  columnCount: Yup.number()\n    .min(minColumns, `Must be between ${minColumns} and 30`)\n    .max(30)\n    .required('Required'),\n  rowCount: Yup.number()\n    .min(minColumns, `Must be between ${minColumns} and 30`)\n    .max(30)\n    .required('Required'),\n});\n\nconst SetSize: React.FC = () => {\n  const [importVisible, setImportVisible] = useState(false);\n  const [puzzleJSON, setPuzzleJSON] = useState('');\n  const dispatch = useDispatch();\n  const { activeStep, puzzle } = useSelector(\n    (state: RootState) => state.design\n  );\n  const initialValues: IBaseGame = puzzle;\n  // const formikRef = useRef<FormikProps<FormikValues>>(null);\n  const formikRef = useRef<FormikProps<IBaseGame>>(null);\n\n  const handleNext = () => {\n    console.log('Click');\n    if (formikRef.current) {\n      formikRef.current.handleSubmit();\n    }\n\n    dispatch(setActiveStep(activeStep + 1));\n  };\n\n  const handleSubmit = (values: IBaseGame) => {\n    dispatch(setBaseGame(values));\n  };\n\n  const handleImport = (e: React.MouseEvent) => {\n    const newPuzzle: IGameData = JSON.parse(puzzleJSON);\n    console.log('newPuzzle', newPuzzle);\n    setImportVisible(false);\n    dispatch(setPuzzleState({ activeStep: 1, puzzle: newPuzzle }));\n  };\n\n  return (\n    <Formik\n      enableReinitialize\n      initialValues={initialValues}\n      onSubmit={handleSubmit}\n      validationSchema={PuzzleSchema}\n      innerRef={formikRef}>\n      {({ setFieldValue, values }) => (\n        <DesignPanel handleNext={handleNext}>\n          <h1>Import Puzzle</h1>\n\n          <Button\n            label='Import Puzzle'\n            icon='mdi mdi-import'\n            onClick={() => setImportVisible(true)}\n            // className={styles.button}\n          />\n\n          <h1>…Or Create Puzzle</h1>\n          <Form>\n            <MyInput name='name' label='Puzzle Name' as={InputText} />\n\n            <MySelectButton\n              field='level'\n              label='Difficulty'\n              setFieldValue={setFieldValue}\n              options={difficultyLabels}\n              values={values}\n            />\n\n            <MySlider\n              field='columnCount'\n              label='Columns Across'\n              setFieldValue={setFieldValue}\n              min={minColumns}\n              max={40}\n              values={values}\n            />\n\n            <MySlider\n              field='rowCount'\n              label='Rows Down'\n              setFieldValue={setFieldValue}\n              min={minColumns}\n              max={40}\n              values={values}\n            />\n\n            {/* <Button type='submit' label='Set Size' className='' /> */}\n          </Form>\n\n          <Dialog\n            header='Spiel importieren'\n            visible={importVisible}\n            style={{ width: '50vw' }}\n            modal\n            onHide={() => setImportVisible(false)}>\n            <InputTextarea\n              rows={8}\n              style={{ width: '100%' }}\n              value={puzzleJSON}\n              onChange={event => setPuzzleJSON(event.target.value)}\n            />\n            <Button label='Import' onClick={handleImport} />\n          </Dialog>\n        </DesignPanel>\n      )}\n    </Formik>\n  );\n};\n\nexport default SetSize;\n","import { Panel } from 'primereact/panel';\nimport { Steps } from 'primereact/steps';\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { designSteps, setPuzzleState } from 'store/designSlice';\nimport { RootState } from '../../store/store';\nimport styles from './CreateGame.module.scss';\nimport SaveGame from './SaveGame';\nimport SetCells from './SetCells';\nimport SetHints from './SetHints';\nimport SetSize from './SetSize';\n\nconst CreateGame: React.FC = () => {\n  const dispatch = useDispatch();\n  const { activeStep } = useSelector((state: RootState) => state.design);\n\n  useEffect(() => {\n    const puzzleStateJSON = localStorage.getItem('puzzleState');\n    if (puzzleStateJSON) {\n      console.log('Found puzzle in local storage');\n      const state = JSON.parse(puzzleStateJSON);\n      dispatch(setPuzzleState(state));\n    }\n  }, [dispatch]);\n\n  return (\n    <div className={styles.createGame}>\n      <Panel header='Create a new Kakuro puzzle'>\n        <div className={styles.createSteps}>\n          <Steps model={designSteps} activeIndex={activeStep} />\n        </div>\n      </Panel>\n\n      {activeStep === 0 && <SetSize />}\n      {activeStep === 1 && <SetCells />}\n      {activeStep === 2 && <SetHints />}\n      {activeStep === 3 && <SaveGame />}\n    </div>\n  );\n};\n\nexport default CreateGame;\n","import { format } from 'date-fns';\nimport { Column } from 'primereact/column';\nimport { DataTable } from 'primereact/datatable';\nimport { Panel } from 'primereact/panel';\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState } from 'store/store';\nimport { difficultyLevels } from 'types/puzzle';\nimport { fetchList, IListGame, setChoiceID } from './listSlice';\n\nconst PuzzleList: React.FC = () => {\n  const { list, choice } = useSelector((state: RootState) => state.list);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchList());\n  }, [dispatch]);\n\n  const formatDate = (date: Date) => format(date, 'dd-MM-yyyy');\n\n  const difficultyTemplate = (puzzle: IListGame) =>\n    difficultyLevels[puzzle.level];\n\n  const dateTemplate = (puzzle: IListGame) =>\n    formatDate(new Date(puzzle.createdAt));\n\n  return (\n    <Panel header='List of Puzzles'>\n      <DataTable\n        value={list}\n        autoLayout\n        stripedRows\n        className='p-datatable-sm'\n        selectionMode='single'\n        selection={choice}\n        onSelectionChange={e => dispatch(setChoiceID(e.value))}\n        dataKey='_id'>\n        <Column field='name' header='Puzzle name' sortable />\n        <Column\n          field='level'\n          header='Difficulty'\n          body={difficultyTemplate}\n          filter\n          sortable\n        />\n        <Column field='columnCount' header='Columns' sortable />\n        <Column field='rowCount' header='Rows' sortable />\n        <Column field='creatorName' header='Creator' filter sortable />\n        <Column field='createdAt' header='Date' body={dateTemplate} sortable />\n      </DataTable>\n    </Panel>\n  );\n};\n\nexport default PuzzleList;\n","import { IListGame } from 'features/list/listSlice';\nimport { CellType, IGameData, PuzzleStates } from 'store/gameSlice';\nimport { doMakeHintCells, doFillHintsFromSolution } from './hintCells';\n\nfunction makePlayable(input: IListGame): IGameData {\n  // convert each digit of cell string to proper cell\n  const cells = input.cellString.split('').map((char, index) => {\n    if (+char >= 1 && +char <= 9) {\n      return {\n        index,\n        type: CellType.NumberCell,\n        guess: 0,\n        solution: +char,\n        pencilMarks: [],\n      };\n    } else {\n      return { index, type: CellType.BlankCell };\n    }\n  });\n\n  // make hint cells\n  const newPuzzle: IGameData = {\n    ...input,\n    cells,\n    state: PuzzleStates.Solved,\n    hintCount: -1,\n  };\n\n  doMakeHintCells(newPuzzle);\n  doFillHintsFromSolution(newPuzzle);\n\n  // JSON.stringify(newPuzzle, null, 4);\n  return newPuzzle;\n}\n\nexport default makePlayable;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport classNames from 'classnames';\nimport PuzzleList from 'features/list/PuzzleList';\nimport myHistory from 'myHistory';\nimport { Button } from 'primereact/button';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setCurrentGame } from 'store/gameSlice';\nimport { RootState } from 'store/store';\nimport makePlayable from 'utils/makePlayable';\nimport styles from './MainMenu.module.scss';\n\nconst MainMenu: React.FC = () => {\n  const { choice } = useSelector((state: RootState) => state.list);\n  const dispatch = useDispatch();\n\n  const handlePlay = () => {\n    const newPuzzle = makePlayable(choice!);\n    dispatch(setCurrentGame(newPuzzle))\n    myHistory.push('/play');\n  };\n\n  return (\n    <div className={styles.content}>\n      <div className={classNames('text-center')}>\n        <div className='mb-3 font-bold text-2xl'>\n          <span className='text-900'>The best </span>\n          <span className='text-blue-600'>Kakuro Game </span>\n          <span className='text-900'>money can buy</span>\n        </div>\n        <div className='text-700 text-sm mb-6'>\n          All of this is work in progress, so be patient and stay tuned.\n        </div>\n\n        <div className=''>\n          <PuzzleList />\n        </div>\n\n        <div className='flex flex-row justify-content-center'>\n          <div className='w-10rem h-4rem'>\n            <Button\n              label='Create game'\n              icon='mdi mdi-pencil'\n              className='p-button-lg'\n              onClick={e => myHistory.push('/create')}\n            />\n          </div>\n\n          <div className='w-10rem h-4rem'>\n            <Button\n              label='Play Game!'\n              icon='mdi mdi-controller-classic'\n              className='p-button-lg'\n              onClick={handlePlay}\n              disabled={!choice}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default MainMenu;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport getCombinations from 'utils/getCombinations';\nimport React, { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../../store/store';\nimport styles from './CombinationLine.module.scss';\n\nconst CombinationLine: React.FC = () => {\n  const { hints } = useSelector((state: RootState) => state.game);\n  const [possibilities, setPossibilities] = useState<number[][][]>([[], []]);\n\n  const renderDigit = (d: number, direction: number) => {\n    const key = 'd' + d + '' + direction;\n\n    if (hints[direction].used.includes(d)) {\n      return (\n        <span className={styles.highlight} key={key}>\n          {d}\n        </span>\n      );\n    } else {\n      return <span key={key}>{d}</span>;\n    }\n  };\n\n  const renderPossibility = (a: number[], index: number, direction: number) => {\n    const key = 'p' + a[0] + '' + index + '' + direction;\n\n    return (\n      <span className={styles.possibility} key={key}>\n        {a.map(d => renderDigit(d, direction))}\n      </span>\n    );\n  };\n\n  const renderPossibilities = (a: number[][], direction: number) => {\n    const key = 'ps' + a[0] + '' + direction;\n\n    return (\n      <span key={key}>\n        {a.map((b, i) => renderPossibility(b, i, direction))}\n      </span>\n    );\n  };\n\n  const renderLine = (direction: number) => {\n    if (hints[direction].sum < 0) {\n      return '\\u00a0';\n    } else {\n      return (\n        <>\n          <span className={styles.sum}>{hints[direction].sum}:</span>\n          {renderPossibilities(possibilities[direction], direction)}\n        </>\n      );\n    }\n  };\n\n  useEffect(() => {\n    if (hints[0].index > -1) {\n      setPossibilities([getCombinations(hints[0]), getCombinations(hints[1])]);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [hints]);\n\n  return (\n    <div className={styles.combinations}>\n      <div className={styles.text}>\n        <div>{renderLine(0)}</div>\n        <div>{renderLine(1)}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default CombinationLine;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport classNames from 'classnames';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setGuess, togglePencilMark } from '../../store/gameSlice';\nimport { RootState } from '../../store/store';\nimport styles from './GuessButton.module.scss';\n\nexport interface Props {\n  digit: number;\n  pencilMark: boolean;\n}\n\nconst GuessButton: React.FC<Props> = ({ digit, pencilMark }) => {\n  const { selectedIndex } = useSelector((state: RootState) => state.game);\n  const dispatch = useDispatch();\n\n  const handleGuessClick = (event: React.MouseEvent) => {\n    if (digit >= 0 && digit <= 9 && selectedIndex) {\n      if (pencilMark) {\n        dispatch(togglePencilMark({ index: selectedIndex, guess: digit }));\n      } else {\n        dispatch(setGuess({ index: selectedIndex, guess: digit }));\n      }\n    }\n  };\n\n  return (\n    <div\n      className={classNames(\n        styles.guessButton,\n        pencilMark && styles.pencilMark,\n        styles.pencilMark1\n      )}\n      onClick={handleGuessClick}>\n      <div className={classNames(styles.digit, pencilMark && styles[`digit${digit}`])}>\n        {digit}\n      </div>\n    </div>\n  );\n};\n\nexport default GuessButton;\n","import React from 'react';\nimport styles from './Controls.module.scss';\nimport classnames from 'classnames';\nimport GuessButton from './GuessButton';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState } from '../../store/store';\nimport { autoPencil, decreaseZoom, increaseZoom, setGuess } from '../../store/gameSlice';\nimport { Button } from 'primereact/button';\n\n/*\n * Here be number buttons for guesses and pencil marks\n */\nconst Controls: React.FC = () => {\n  const { selectedIndex } = useSelector((state: RootState) => state.game);\n  const dispatch = useDispatch();\n  const digits = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n\n  const handleZoomIn = () => dispatch(increaseZoom());\n  const handleZoomOut = () => dispatch(decreaseZoom());\n\n  const handleDeleteClick = (event: React.MouseEvent) => {\n    if (selectedIndex) {\n      dispatch(setGuess({ index: selectedIndex, guess: 0 }));\n    }\n  };\n\n  const handleAutoPencil = (event: React.MouseEvent) => {\n    dispatch(autoPencil());\n  };\n\n  const renderButton = (digit: number, pencilMark: boolean) => {\n    return <GuessButton key={digit} digit={digit} pencilMark={pencilMark} />;\n  };\n\n  return (\n    <aside className={classnames('controls', styles.controls)}>\n      <div className={styles.zoomButtons}>\n        <Button icon='mdi mdi-magnify-minus' onClick={handleZoomOut} />\n        <Button icon='mdi mdi-magnify-plus'  onClick={handleZoomIn} />\n      </div>\n\n      <div className={styles.guessButtons}>\n        <div className={styles.columns}>\n          {digits.map(d => renderButton(d, true))}\n        </div>\n\n        <Button\n          className={classnames(\n            'button',\n            'is-warning',\n            'is-large',\n            styles.button\n          )}\n          onClick={handleDeleteClick}>\n          Delete\n        </Button>\n\n        <Button\n          className={classnames('button is-large', styles.button)}\n          onClick={handleAutoPencil}>\n          Auto Pencil\n        </Button>\n\n        <div className={styles.columns}>\n          {digits.map(d => renderButton(d, false))}\n        </div>\n      </div>\n\n      <div className='pencilmarks'></div>\n    </aside>\n  );\n};\n\nexport default Controls;\n","export function calcCellSize(zoomLevel: number) {\n  return { width: `${zoomLevel}rem` };\n}\n\nexport function calcGuessFontSize(zoomLevel: number) {\n  return { fontSize: `${zoomLevel / 1.5}rem` };\n}\n\nexport function calcHintFontSize(zoomLevel: number) {\n  return { fontSize: `${zoomLevel / 2.4 }rem` };\n}\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport classnames from 'classnames';\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport { RootState } from 'store/store';\nimport { calcCellSize } from 'utils/calcCellSize';\nimport { IBlankCell } from '../../store/gameSlice';\nimport styles from './BlankCell.module.scss';\n\nexport interface Props {\n  cell: IBlankCell;\n  index: number;\n}\n\nconst BlankCell: React.FC<Props> = ({ cell, index }) => {\n  const { zoomLevel } = useSelector((state: RootState) => state.game);\n  const style = calcCellSize(zoomLevel);\n\n  return (\n    <div className={classnames('gamecell', styles.blank)} style={style}></div>\n  );\n};\n\nexport default BlankCell;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport classnames from 'classnames';\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport { RootState } from 'store/store';\nimport { calcCellSize, calcHintFontSize } from 'utils/calcCellSize';\nimport { IHintCell } from '../../store/gameSlice';\nimport './HintCell.scss';\n\nexport interface Props {\n  cell: IHintCell;\n  index: number;\n}\n\nconst HintCell: React.FC<Props> = ({ cell, index }) => {\n  const { zoomLevel } = useSelector((state: RootState) => state.game);\n  const style = calcCellSize(zoomLevel);\n  const fontSize = calcHintFontSize(zoomLevel);\n\n  return (\n    <div className={classnames('gamecell', 'hintCell')} style={style}>\n      <div className='horizontalHint' style={fontSize}>\n        {cell.hintHorizontal}\n      </div>\n      <div className='verticalHint' style={fontSize}>\n        {cell.hintVertical}\n      </div>\n    </div>\n  );\n};\n\nexport default HintCell;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport classnames from 'classnames';\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { INumberCell, setSelectedIndex } from '../../store/gameSlice';\nimport styles from './NumberCell.module.scss';\nimport { RootState } from '../../store/store';\nimport { useSelector } from 'react-redux';\nimport { calcGuessFontSize } from 'utils/calcCellSize';\n\nexport interface Props {\n  cell: INumberCell;\n  index: number;\n}\n\nconst NumberCell: React.FC<Props> = ({ cell, index }) => {\n  const { selectedIndex, zoomLevel } = useSelector(\n    (state: RootState) => state.game\n  );\n  const dispatch = useDispatch();\n  const guessFontSize = calcGuessFontSize(zoomLevel);\n\n  const handleClick = (event: React.MouseEvent) => {\n    dispatch(setSelectedIndex(index));\n  };\n\n  const wrongGuess = cell.solution > 0 && cell.guess !== cell.solution;\n\n  return (\n    <div\n      className={classnames('gamecell', styles.number, {\n        selected: index === selectedIndex,\n      })}\n      onClick={handleClick}>\n      {cell.guess > 0 && (\n        <div\n          className={classnames(styles.guess, { wrongGuess })}\n          style={guessFontSize}>\n          {cell.guess}\n        </div>\n      )}\n      {!cell.guess && cell.pencilMarks?.length > 0 && (\n        <div className={classnames(styles.pencilMarks)}>\n          {cell.pencilMarks.join('')}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default NumberCell;\n","import classnames from 'classnames';\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport {\n  CellType,\n  IBlankCell,\n  ICell,\n  IHintCell,\n  INumberCell\n} from '../../store/gameSlice';\nimport { RootState } from '../../store/store';\nimport BlankCell from './BlankCell';\nimport './Cell.scss';\nimport styles from './GameGrid.module.scss';\nimport HintCell from './HintCell';\nimport NumberCell from './NumberCell';\n\nconst GameGrid: React.FC = () => {\n  const { game } = useSelector((state: RootState) => state.game);\n\n  const renderCell = (cell: ICell, index: number) => {\n    if (cell.type === CellType.BlankCell) {\n      return <BlankCell cell={cell as IBlankCell} index={index} key={index} />;\n    } else if (cell.type === CellType.HintCell) {\n      return <HintCell cell={cell as IHintCell} index={index} key={index} />;\n    } else {\n      // type == Number\n      return (\n        <NumberCell cell={cell as INumberCell} index={index} key={index} />\n      );\n    }\n  };\n\n  const renderGrid = () => {\n    return (\n      <div\n        className={styles.grid}\n        style={{\n          gridTemplateColumns: `repeat(${game!.columnCount}, 1fr)`,\n          gridTemplateRows: `repeat(${game!.rowCount}, 1fr)`,\n        }}>\n        {game.cells.map((cell, i) => renderCell(cell, i))}\n      </div>\n    );\n  };\n\n  return (\n    <div className={classnames('main', styles.gameBackground)}>\n      <div className={styles.gamegrid} tabIndex={-1}>\n        {renderGrid()}\n      </div>\n    </div>\n  );\n};\n\nexport default GameGrid;\n","import myHistory from 'myHistory';\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  CellType,\n  IGameData,\n  setGuess,\n  setSelectedIndex,\n} from '../../store/gameSlice';\nimport { RootState } from '../../store/store';\nimport './Cell.scss';\nimport CombinationLine from './CombinationLine';\nimport Controls from './Controls';\nimport GameGrid from './GameGrid';\n\nconst PlayGame: React.FC = () => {\n  const { game, selectedIndex } = useSelector((state: RootState) => state.game);\n  const { cells } = game as IGameData;\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (game.state < 0) {\n      myHistory.push('/');\n    }\n  });\n\n  const handleKeyPress = (event: any) => {\n    if (!selectedIndex) {\n      // do nothing if no cell selected\n      return;\n    }\n    if (event.key === 'ArrowUp' && game) {\n      const newSelectedIndex = selectedIndex - game.columnCount;\n      if (\n        newSelectedIndex > game.columnCount &&\n        cells[newSelectedIndex].type === CellType.NumberCell\n      ) {\n        dispatch(setSelectedIndex(newSelectedIndex));\n      }\n    } else if (event.key === 'ArrowDown' && game) {\n      const newSelectedIndex = selectedIndex + game.columnCount;\n      if (\n        newSelectedIndex < cells.length &&\n        cells[newSelectedIndex].type === CellType.NumberCell\n      ) {\n        dispatch(setSelectedIndex(newSelectedIndex));\n      }\n    } else if (event.key === 'ArrowLeft' && game) {\n      const newSelectedIndex = selectedIndex - 1;\n      if (\n        newSelectedIndex > game.columnCount &&\n        cells[newSelectedIndex].type === CellType.NumberCell\n      ) {\n        dispatch(setSelectedIndex(newSelectedIndex));\n      }\n    } else if (event.key === 'ArrowRight' && game) {\n      const newSelectedIndex = selectedIndex + 1;\n      if (\n        newSelectedIndex < cells.length &&\n        cells[newSelectedIndex].type === CellType.NumberCell\n      ) {\n        dispatch(setSelectedIndex(newSelectedIndex));\n      }\n    } else if (event.key >= '0' && event.key <= '9') {\n      dispatch(setGuess({ index: selectedIndex, guess: +event.key }));\n    } else if (event.key === 'Delete') {\n      dispatch(setGuess({ index: selectedIndex, guess: 0 }));\n    } else {\n      console.log('Key pressed:', event.key);\n    }\n  };\n\n  return (\n    <>\n      <div className='content' onKeyDown={handleKeyPress}>\n        <GameGrid />\n        <Controls />\n      </div>\n\n      <CombinationLine />\n    </>\n  );\n};\n\nexport default PlayGame;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport MyInput from 'components/MyInput';\nimport { Form, Formik } from 'formik';\nimport myHistory from 'myHistory';\nimport { Button } from 'primereact/button';\nimport { InputText } from 'primereact/inputtext';\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { RootState } from 'store/store';\nimport { ISigninValues, login } from 'store/userSlice';\n\nconst SignIn: React.FC = () => {\n  const dispatch = useDispatch();\n  const { user } = useSelector((state: RootState) => state.users);\n  // const [checked, setChecked] = useState(false);\n\n  const initialValues: ISigninValues = {\n    email: '',\n    password: '',\n  };\n\n  const handleSubmit = (values: ISigninValues) => {\n    dispatch(login(values));\n  };\n\n  useEffect(() => {\n    if (user) {\n      myHistory.push('/');\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [user]);\n\n  return (\n    <div\n      className='flex align-items-center justify-content-center'\n      style={{ height: '60%' }}>\n      <div className='surface-card p-4 shadow-2 border-round w-full lg:w-6'>\n        <div className='text-center mb-5'>\n          {/* <img\n            src='assets/images/blocks/logos/hyper.svg'\n            alt='hyper'\n            height={50}\n            className='mb-3'\n          /> */}\n          <div className='text-900 text-3xl font-medium mb-3'>\n            Welcome Back to Mr K.'s Kakuro\n          </div>\n          <span className='text-600 font-medium line-height-3'>\n            Don't have an account?\n          </span>\n          <Link\n            className='font-medium no-underline ml-2 text-blue-500 cursor-pointer'\n            to='/signup'>\n            Create one today!\n          </Link>\n        </div>\n\n        <Formik\n          // enableReinitialize\n          initialValues={initialValues}\n          onSubmit={handleSubmit}\n          // validationSchema={UserSchema}\n        >\n          {({ setFieldValue, values }) => (\n            <Form className='p-fluid'>\n              <MyInput\n                name='email'\n                label='Email'\n                as={InputText}\n                className='block text-900 font-medium mb-2'\n              />\n              <MyInput\n                name='password'\n                label='Password'\n                type='password'\n                as={InputText}\n                className='block text-900 font-medium mb-2'\n              />\n\n              <Button\n                type='submit'\n                label='Sign In!'\n                icon='mdi mdi-login-variant'\n                className='w-full'\n              />\n            </Form>\n          )}\n        </Formik>\n      </div>\n    </div>\n  );\n};\n\nexport default SignIn;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport MyInput from 'components/MyInput';\nimport { Form, Formik } from 'formik';\nimport myHistory from 'myHistory';\nimport { Button } from 'primereact/button';\nimport { InputText } from 'primereact/inputtext';\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { ISignUpValues, signUp } from 'store/userSlice';\nimport * as Yup from 'yup';\n\nconst UserSchema = Yup.object().shape({\n  name: Yup.string()\n    .min(3)\n    .max(50, 'Must be 50 characters or less')\n    .required('Required'),\n  email: Yup.string()\n    .max(50, 'Must be 50 characters or less')\n    .required('Required'),\n  password: Yup.string()\n    .min(10, 'Must be at least 10 characters')\n    .max(25, 'Must be 25 characters or less')\n    .required('Required'),\n});\n\nconst SignUp: React.FC = () => {\n  const dispatch = useDispatch();\n  // const [checked, setChecked] = useState(false);\n\n  const handleSubmit = (values: ISignUpValues) => {\n    dispatch(signUp(values));\n    myHistory.push('/')\n  };\n\n  const initialValues: ISignUpValues = {\n    name: '',\n    email: '',\n    password: '',\n  };\n\n  return (\n    <div\n      className='flex align-items-center justify-content-center'\n      style={{ height: '60%' }}>\n      <div className='surface-card p-4 shadow-2 border-round w-full lg:w-6'>\n        <div className='text-center mb-5'>\n          {/* <img\n            src='assets/images/blocks/logos/hyper.svg'\n            alt='hyper'\n            height={50}\n            className='mb-3'\n          /> */}\n          <div className='text-900 text-3xl font-medium mb-3'>\n            Sign Up For Mr K.'s Kakuro\n          </div>\n          <span className='text-600 font-medium line-height-3'>\n            Already have an account?\n          </span>\n          <Link\n            className='font-medium no-underline ml-2 text-blue-500 cursor-pointer'\n            to='/signin'>\n            Sign In!\n          </Link>\n        </div>\n\n        <Formik\n          enableReinitialize\n          initialValues={initialValues}\n          onSubmit={handleSubmit}\n          validationSchema={UserSchema}>\n          {({ setFieldValue, values }) => (\n            <Form className='p-fluid'>\n              <MyInput\n                name='name'\n                label='Gamer Name'\n                as={InputText}\n                className='block text-900 font-medium mb-2'\n              />\n              <MyInput\n                name='email'\n                label='Email'\n                as={InputText}\n                className='block text-900 font-medium mb-2'\n              />\n              <MyInput\n                name='password'\n                label='Password'\n                type='password'\n                as={InputText}\n                className='block text-900 font-medium mb-2'\n              />\n\n              <Button\n                type='submit'\n                label='Sign Up!'\n                icon='mdi mdi-account-plus'\n                className='w-full'\n              />\n            </Form>\n          )}\n        </Formik>\n      </div>\n    </div>\n  );\n};\n\nexport default SignUp;\n","import {\n  Action,\n  combineReducers,\n  configureStore,\n  ThunkAction,\n} from '@reduxjs/toolkit';\nimport alertReducer from '../features/alerts/alertSlice';\nimport gameReducer from './gameSlice';\nimport designReducer from './designSlice';\nimport userReducer from './userSlice';\nimport listReducer from '../features/list/listSlice';\n\nexport const rootReducer = combineReducers({\n  alerts: alertReducer,\n  design: designReducer,\n  list: listReducer,\n  game: gameReducer,\n  users: userReducer,\n});\n\nconst store = configureStore({\n  devTools: process.env.NODE_ENV !== 'production',\n  reducer: rootReducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\nexport type AppThunk = ThunkAction<void, RootState, null, Action<string>>;\nexport type AppDispatch = typeof store.dispatch;\n\nexport default store;\n","import MyMenubar from 'components/MyMenubar';\nimport Alerts from 'features/alerts/Alerts';\nimport CreateGame from 'features/creating/CreateGame';\nimport MainMenu from 'features/menu/MainMenu';\nimport PlayGame from 'features/playing/PlayGame';\nimport SignIn from 'features/users/SignIn';\nimport SignUp from 'features/users/SignUp';\nimport myHistory from 'myHistory';\nimport React from 'react';\nimport { Provider } from 'react-redux';\nimport { Router, Route, Switch } from 'react-router-dom';\nimport './App.scss';\nimport store from './store/store';\n\nconst App: React.FC = () => {\n  return (\n    <Provider store={store}>\n      <MyMenubar />\n      <Alerts />\n\n      <Router history={myHistory}>\n        <Switch>\n          <Route path='/create'>\n            <CreateGame />\n          </Route>\n          <Route path='/play'>\n            <PlayGame />\n          </Route>\n          <Route path='/signin'>\n            <SignIn />\n          </Route>\n          <Route path='/signup'>\n            <SignUp />\n          </Route>\n          <Route path='/'>\n            <MainMenu />\n          </Route>\n        </Switch>\n      </Router>\n    </Provider>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"SaveGame_button__3Is-u\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"combinations\":\"CombinationLine_combinations__2uXXm\",\"text\":\"CombinationLine_text__3BaJ1\",\"sum\":\"CombinationLine_sum__ijz9v\",\"possibility\":\"CombinationLine_possibility__ru2Ma\",\"highlight\":\"CombinationLine_highlight__2hWQX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"guessButton\":\"GuessButton_guessButton__2HTay\",\"pencilMark\":\"GuessButton_pencilMark__30ALz\",\"digit\":\"GuessButton_digit__1y-ZY\",\"digit1\":\"GuessButton_digit1__2OikV\",\"digit2\":\"GuessButton_digit2__1EUR8\",\"digit3\":\"GuessButton_digit3__tibxt\",\"digit4\":\"GuessButton_digit4__2bG_l\",\"digit5\":\"GuessButton_digit5__1DTxj\",\"digit6\":\"GuessButton_digit6__29Opa\",\"digit7\":\"GuessButton_digit7__3aZzj\",\"digit8\":\"GuessButton_digit8__2lnCS\",\"digit9\":\"GuessButton_digit9__35MKY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"designCell\":\"DesignCell_designCell__1mdb1\",\"hintMissing\":\"DesignCell_hintMissing__GjhmS\",\"solution\":\"DesignCell_solution__1hCNm\",\"index\":\"DesignCell_index__1hyaN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"HintDialog_label__1UY5p\",\"buttonGrid\":\"HintDialog_buttonGrid__3MkIY\",\"button\":\"HintDialog_button__2lNtm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"gameBackground\":\"GameGrid_gameBackground__2gUQF\",\"grid\":\"GameGrid_grid__3SI7n\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"number\":\"NumberCell_number__1mt2Y\",\"guess\":\"NumberCell_guess__1Iq08\"};"],"sourceRoot":""}