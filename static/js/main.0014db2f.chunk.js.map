{"version":3,"sources":["components/HintCell.module.scss","components/NumberCell.module.scss","components/Controls.module.scss","components/BlankCell.module.scss","components/GuessButton.module.scss","components/CombinationLine.module.scss","helpers/getHints.ts","helpers/getCombinations.ts","helpers/makePencilmarks.ts","store/gameSlice.ts","helpers/makeCombinations.ts","components/BlankCell.tsx","components/HintCell.tsx","components/NumberCell.tsx","components/GameGrid.tsx","components/GuessButton.tsx","components/Controls.tsx","store/store.ts","components/CombinationLine.tsx","App.tsx","reportWebVitals.ts","index.tsx","components/GameGrid.module.scss"],"names":["module","exports","getHints","game","index","hints","sum","count","used","Array","hIndex","cells","type","CellType","Number","cell","guess","push","hintHorizontal","columnCount","vIndex","hintVertical","nextRow","length","getCombinations","combinations","combs","filter","c","every","h","includes","makePencilmarksForCell","nCell","hComb","vComb","hDigits","from","Set","flat","vDigits","poss","e","sort","pencilMarks","makePencilmarks","Difficulty","forEach","makeCombinations","digits","fill","_makeCombinations","min","current","set","digitsToCombination","initialState","gameSlice","createSlice","name","reducers","fetchGameSuccess","state","action","payload","fetchCombinations","setSelectedIndex","currentIndex","selectedIndex","setGuess","newGame","JSON","parse","stringify","currentCell","autoPencil","actions","BlankCell","className","classnames","styles","blank","HintCell","hint","horizontalHint","verticalHint","NumberCell","useSelector","dispatch","useDispatch","number","selected","onClick","event","join","GameGrid","useEffect","a","axios","get","headers","response","data","gameBackground","gamegrid","onKeyDown","key","console","log","tabIndex","grid","map","i","Blank","Hint","renderCell","renderGrid","GuessButton","digit","guessButton","Controls","controls","guessButtons","columns","d","rootReducer","combineReducers","gameReducer","store","configureStore","devTools","process","reducer","CombinationLine","renderPossibility","direction","possibility","highlight","renderDigit","renderPossibilities","b","renderLine","possibilities","text","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0014db2f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"hint\":\"HintCell_hint__11Qo5\",\"verticalHint\":\"HintCell_verticalHint__1uE5f\",\"horizontalHint\":\"HintCell_horizontalHint__1K2-x\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"number\":\"NumberCell_number__3Tz54\",\"guess\":\"NumberCell_guess__EikMx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"controls\":\"Controls_controls__2tkdC\",\"columns\":\"Controls_columns__2txFE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"blank\":\"BlankCell_blank__3hSGd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"guessButton\":\"GuessButton_guessButton__Tugwc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"combinations\":\"CombinationLine_combinations__2C57N\",\"text\":\"CombinationLine_text__1uRFE\",\"sum\":\"CombinationLine_sum__18MvN\",\"possibility\":\"CombinationLine_possibility__meNi6\",\"highlight\":\"CombinationLine_highlight__1cxYc\"};","import { CellType, IGameData, IHintCell, INumberCell } from 'store/gameSlice';\n\nexport default function getHints(game: IGameData, index: number) {\n  const hints = [\n    { index: -1, sum: -1, count: -1, used: new Array<number>() },\n    { index: -1, sum: -1, count: -1, used: new Array<number>() },\n  ];\n  let hIndex = index;\n\n  // Find corresponding hint cell horizontally\n  while (game.cells[hIndex].type === CellType.Number) {\n    const cell = game.cells[hIndex] as INumberCell;\n    if (cell.guess > 0) {\n      hints[0].used.push(cell.guess);\n    }\n    hIndex--;\n  }\n\n  hints[0].index = hIndex;\n  hints[0].sum = (game.cells[hIndex] as IHintCell).hintHorizontal! || -1;\n\n  // Find count of cells for this hint\n  hIndex = index;\n  while (\n    (hIndex + 1) % game.columnCount !== 0 &&\n    game.cells[hIndex + 1].type === CellType.Number\n  ) {\n    hIndex++;\n    const cell = game.cells[hIndex] as INumberCell;\n    if (cell.guess > 0) {\n      hints[0].used.push(cell.guess);\n    }\n  }\n\n  hints[0].count = hIndex - hints[0].index;\n\n  // Find corresponding hint cell vertically\n  let vIndex = index;\n  while (game.cells[vIndex].type === CellType.Number) {\n    const cell = game.cells[vIndex] as INumberCell;\n    if (cell.guess > 0) {\n      hints[1].used.push(cell.guess);\n    }\n    vIndex -= game.columnCount;\n  }\n\n  hints[1].index = vIndex;\n  hints[1].sum = (game.cells[vIndex] as IHintCell).hintVertical! || -1;\n\n  // Find count of cells for this hint\n  vIndex = index;\n  let nextRow = vIndex + game.columnCount;\n  while (\n    nextRow < game.cells.length &&\n    game.cells[nextRow].type === CellType.Number\n  ) {\n    vIndex = nextRow;\n    const cell = game.cells[vIndex] as INumberCell;\n    if (cell.guess > 0) {\n      hints[1].used.push(cell.guess);\n    }\n    nextRow = vIndex + game.columnCount;\n  }\n\n  const count = (vIndex - hints[1].index) / game.columnCount;\n  hints[1].count = count;\n\n  return hints;\n}\n","import { IHintValues } from 'store/gameSlice';\nimport { ICombinations } from './makeCombinations';\n\n/**\n *\n * @param hints the computed hints for a particular cell\n * @param combinations all combinations\n */\nexport default function getCombinations(\n  hints: IHintValues,\n  combinations: ICombinations\n) {\n  let combs = combinations[hints.count][hints.sum];\n\n  // only select those combinations which contain every used digit\n  combs = combs.filter(c => hints.used.every(h => c.includes(h)));\n\n  return combs;\n}\n","import { CellType, IGameData, INumberCell } from 'store/gameSlice';\nimport getCombinations from './getCombinations';\nimport getHints from './getHints';\nimport { ICombinations } from './makeCombinations';\n\nexport function makePencilmarksForCell(nCell: INumberCell, index: number, game: IGameData, combinations: ICombinations) {\n  if (nCell.guess > 0) {\n    return;\n  }\n\n  // Filter out impossible combinations\n  const hints = getHints(game, index);\n  const hComb = getCombinations(hints[0], combinations);\n  const vComb = getCombinations(hints[1], combinations);\n  // Get possible digits\n  const hDigits = Array.from(new Set(hComb.flat()));\n  const vDigits = Array.from(new Set(vComb.flat()));\n\n  const used = [...hints[0].used, ...hints[1].used];\n  const poss = hDigits\n    .filter(e => vDigits.includes(e) && !used.includes(e))\n    .sort();\n\n  nCell.pencilMarks = poss;\n}\n\nexport function makePencilmarks(game: IGameData, combinations: ICombinations) {\n  game.cells.forEach((cell, index) => {\n    if (cell.type === CellType.Number) {\n      makePencilmarksForCell(cell as INumberCell, index, game, combinations)\n    }\n  });\n}\n\nexport default makePencilmarks;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport axios from 'axios';\nimport getHints from 'helpers/getHints';\nimport makePencilmarks, { makePencilmarksForCell } from 'helpers/makePencilmarks';\nimport makeCombinations, { ICombinations } from '../helpers/makeCombinations';\nimport { AppThunk } from './store';\n\n/* Types */\nexport enum Difficulty {\n  Easy = 0,\n  Medium = 1,\n  MediumPlus = 2,\n  Hard = 3,\n  VeryHard = 4,\n}\n\nexport enum CellType {\n  Blank = 0,\n  Hint = 1,\n  Number = 2,\n}\n\nexport interface ICell {\n  type: CellType;\n}\n\nexport interface IBlankCell extends ICell {\n  type: CellType.Blank;\n}\n\nexport interface IHintCell extends ICell {\n  type: CellType.Hint;\n  hintHorizontal?: number;\n  hintVertical?: number;\n}\n\nexport interface INumberCell extends ICell {\n  type: CellType.Number;\n  pencilMarks: number[];\n  guess: number;\n  solution: number;\n}\n\nexport interface IGameData {\n  name: string;\n  level: Difficulty;\n  columnCount: number;\n  cells: ICell[];\n}\n\nexport interface IGuess {\n  index: number;\n  guess: number;\n}\n\nexport interface IHintValues {\n  index: number;\n  sum: number;\n  count: number;\n  used: number[];\n}\n\n/* State */\ntype GameSliceState = {\n  game?: IGameData;\n  combinations?: ICombinations;\n  selectedIndex?: number;\n  hints: IHintValues[];\n};\n\nconst initialState: GameSliceState = {\n  hints: [\n    { index: -1, sum: -1, count: -1, used: new Array<number>() },\n    { index: -1, sum: -1, count: -1, used: new Array<number>() },\n  ],\n};\n\nexport const gameSlice = createSlice({\n  name: 'game',\n  initialState,\n  reducers: {\n    fetchGameSuccess(state, action: PayloadAction<IGameData>) {\n      state.game = action.payload;\n    },\n    fetchCombinations(state, action: PayloadAction) {\n      state.combinations = makeCombinations();\n    },\n    setSelectedIndex(state, action: PayloadAction<number>) {\n      let currentIndex = action.payload;\n      state.selectedIndex = currentIndex;\n      state.hints = getHints(state.game!, currentIndex);\n    },\n    setGuess(state, action: PayloadAction<IGuess>) {\n      const { index, guess } = action.payload;\n      const newGame: IGameData = JSON.parse(JSON.stringify(state.game));\n      const currentCell: INumberCell = newGame.cells[index] as INumberCell;\n      if (currentCell.type === CellType.Number) {\n        currentCell.guess = guess;\n        if (guess === 0) {\n          // currentCell.pencilMarks = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n          makePencilmarksForCell(currentCell, index, newGame, state.combinations!);\n        }\n        state.game = newGame;\n      }\n      state.hints = getHints(state.game!, index);\n    },\n    autoPencil(state, action: PayloadAction) {\n      // set guesses where there is only one pencil mark option\n      state.game!.cells.forEach(c => {\n        if (c.type === CellType.Number) {\n          const cell = c as INumberCell;\n          if (cell.pencilMarks?.length === 1) {\n            cell.guess = cell.pencilMarks[0];\n          }\n        }\n      });\n\n      // calculate pencil marks\n      makePencilmarks(state.game!, state.combinations!);\n    },\n  },\n});\n\nexport const {\n  fetchGameSuccess,\n  fetchCombinations,\n  setSelectedIndex,\n  setGuess,\n  autoPencil,\n} = gameSlice.actions;\n\nexport default gameSlice.reducer;\n\nexport const fetchGame = (): AppThunk => async (dispatch: any) => {\n  let game;\n  try {\n    const response = await axios.get('puzzles/sample.json', {\n      headers: { 'Access-Control-Allow-Origin': '*' },\n    });\n    game = response.data;\n  } catch (error) {\n    // TODO: Show error\n    // dispatch(setErrorAlert(`error fetching downloads`));\n    return;\n  }\n\n  dispatch(fetchGameSuccess(game));\n};\n","export interface ICombinationsForCount {\n  [sum: string]: number[][];\n}\n\nexport interface ICombinations {\n  [count: string]: ICombinationsForCount;\n}\n\nconst makeCombinations = () => {\n  const combinations: ICombinations = {};\n  const digits = new Array(10).fill(false);\n\n  const digitsToCombination = () => {\n    const set = new Array<number>();\n    let count = 0;\n    let sum = 0;\n\n    for (let index = 1; index < digits.length; index++) {\n      if (digits[index]) {\n        set.push(index);\n        count += 1;\n        sum += index;\n      }\n    }\n\n    if (!combinations[count]) {\n      combinations[count] = {};\n    }\n\n    if (!combinations[count][sum]) {\n      combinations[count][sum] = new Array<number[]>();\n    }\n\n    combinations[count][sum].push(set);\n  };\n\n  const _makeCombinations = (min: number, current: number) => {\n    if (current === 10) {\n      digitsToCombination();\n    } else {\n      digits[current] = true;\n      _makeCombinations(min, current + 1);\n      digits[current] = false;\n      _makeCombinations(min, current + 1);\n      current++;\n    }\n  };\n\n  for (let min = 1; min < 9; min++) {\n    digits[min] = true;\n    _makeCombinations(min, min + 1);\n    digits[min] = false;\n  }\n\n  delete combinations['1'];\n  return combinations;\n};\n\nexport default makeCombinations;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport classnames from 'classnames';\nimport React from 'react';\nimport { IBlankCell } from '../store/gameSlice';\nimport styles from './BlankCell.module.scss';\n\nexport interface Props {\n  cell: IBlankCell;\n  index: number;\n}\n\nconst BlankCell: React.FC<Props> = ({ cell, index }) => {\n  return <div className={classnames('gamecell', styles.blank)}></div>;\n};\n\nexport default BlankCell;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport classnames from 'classnames';\nimport React from 'react';\nimport { IHintCell } from '../store/gameSlice';\nimport styles from './HintCell.module.scss';\n\nexport interface Props {\n  cell: IHintCell;\n  index: number;\n}\n\nconst HintCell: React.FC<Props> = ({ cell, index }) => {\n  return (\n    <div className={classnames('gamecell', styles.hint)}>\n      <div className={styles.horizontalHint}>{cell.hintHorizontal}</div>\n      <div className={styles.verticalHint}>{cell.hintVertical}</div>\n    </div>\n  );\n};\n\nexport default HintCell;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport classnames from 'classnames';\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { INumberCell, setSelectedIndex } from '../store/gameSlice';\nimport styles from './NumberCell.module.scss';\nimport { RootState } from '../store/store';\nimport { useSelector } from 'react-redux';\n\nexport interface Props {\n  cell: INumberCell;\n  index: number;\n}\n\nconst NumberCell: React.FC<Props> = ({ cell, index }) => {\n  const selectedIndex = useSelector(\n    (state: RootState) => state.game.selectedIndex\n  );\n  const dispatch = useDispatch();\n\n  const handleClick = (event: React.MouseEvent) => {\n    dispatch(setSelectedIndex(index));\n  };\n\n  return (\n    <div\n      className={classnames('gamecell', styles.number, {\n        selected: index === selectedIndex,\n      })}\n      onClick={handleClick}>\n      {cell.guess > 0 && (\n        <div className={classnames(styles.guess)}>{cell.guess}</div>\n      )}\n      {!cell.guess && cell.pencilMarks?.length > 0 && (\n        <div className={classnames(styles.pencilMarks)}>{cell.pencilMarks.join('')}</div>\n      )}\n    </div>\n  );\n};\n\nexport default NumberCell;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport classnames from 'classnames';\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  CellType,\n  fetchCombinations,\n  fetchGame,\n  IBlankCell,\n  ICell,\n  IHintCell,\n  INumberCell,\n  setGuess\n} from '../store/gameSlice';\nimport { RootState } from '../store/store';\nimport BlankCell from './BlankCell';\nimport './Cell.scss';\nimport styles from './GameGrid.module.scss';\nimport HintCell from './HintCell';\nimport NumberCell from './NumberCell';\n\nconst GameGrid: React.FC = () => {\n  const { combinations, game, selectedIndex } =\n    useSelector((state: RootState) => state.game);\n  const dispatch = useDispatch();\n\n  const handleKeyPress = (event: any) => {\n    if (!selectedIndex) {\n      // do nothing if no cell selected\n      return;\n    }\n\n    if (event.key >= '0' && event.key <= '9') {\n      dispatch(setGuess({ index: selectedIndex, guess: +event.key }));\n    } else if (event.key === 'Delete') {\n      dispatch(setGuess({ index: selectedIndex, guess: 0 }));\n    } else {\n      console.log('Key pressed:', event.key);\n    }\n  };\n\n  const renderCell = (cell: ICell, index: number) => {\n    if (cell.type === CellType.Blank) {\n      return <BlankCell cell={cell as IBlankCell} index={index} key={index} />;\n    } else if (cell.type === CellType.Hint) {\n      return <HintCell cell={cell as IHintCell} index={index} key={index} />;\n    } else {\n      // type == Number\n      return (\n        <NumberCell cell={cell as INumberCell} index={index} key={index} />\n      );\n    }\n  };\n\n  const renderGrid = () => {\n    if (!game) {\n      return;\n    }\n\n    return (\n      <div className={styles.grid}>\n        {game.cells.map((cell, i) => renderCell(cell, i))}\n      </div>\n    );\n  };\n\n  useEffect(() => {\n    if (game == null) {\n      dispatch(fetchGame());\n    }\n    if (combinations == null) {\n      dispatch(fetchCombinations());\n    }\n  }, []);\n\n  return (\n    <div className={classnames('main', styles.gameBackground)}>\n      <div className={styles.gamegrid} onKeyDown={handleKeyPress} tabIndex={-1}>\n        {renderGrid()}\n      </div>\n    </div>\n  );\n};\n\nexport default GameGrid;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setGuess } from '../store/gameSlice';\nimport { RootState } from '../store/store';\nimport styles from './GuessButton.module.scss';\n\nexport interface Props {\n  digit: number;\n}\n\nconst GuessButton: React.FC<Props> = ({ digit }) => {\n  const { selectedIndex } = useSelector((state: RootState) => state.game);\n  const dispatch = useDispatch();\n\n  const handleGuessClick = (event: React.MouseEvent) => {\n    if (digit >= 0 && digit <= 9 && selectedIndex) {\n      dispatch(setGuess({ index: selectedIndex, guess: digit }));\n    }\n  };\n\n  return (\n    <button className={styles.guessButton} onClick={handleGuessClick}>\n      {digit}\n    </button>\n  );\n};\n\nexport default GuessButton;\n","import React from 'react';\nimport styles from './Controls.module.scss';\nimport classnames from 'classnames';\nimport GuessButton from './GuessButton';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState } from '../store/store';\nimport { autoPencil, setGuess } from '../store/gameSlice';\n\n/*\n * Here be number buttons for guesses and pencil marks\n */\nconst Controls: React.FC = () => {\n  const { selectedIndex } = useSelector((state: RootState) => state.game);\n  const dispatch = useDispatch();\n  const digits = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n\n  const handleDeleteClick = (event: React.MouseEvent) => {\n    if (selectedIndex) {\n      dispatch(setGuess({ index: selectedIndex, guess: 0 }));\n    }\n  };\n\n  const handleAutoPencil = (event: React.MouseEvent) => {\n    dispatch(autoPencil());\n  };\n\n  const renderButton = (digit: number) => {\n    return <GuessButton key={digit} digit={digit} />;\n  };\n\n  return (\n    <aside className={classnames('controls', styles.controls)}>\n      <div className={styles.guessButtons}>\n        <div className={styles.columns}>\n          {digits.map(d => renderButton(d))}\n        </div>\n\n        <button\n          className={classnames('button', 'is-warning', 'is-large')}\n          onClick={handleDeleteClick}>\n          X\n        </button>\n\n        <button\n          className={classnames('button is-large')}\n          onClick={handleAutoPencil}>\n          Auto Pencil\n        </button>\n      </div>\n\n      <div className='pencilmarks'></div>\n    </aside>\n  );\n};\n\nexport default Controls;\n","import { Action, combineReducers, configureStore, ThunkAction } from '@reduxjs/toolkit';\nimport gameReducer from './gameSlice';\n\nexport const rootReducer = combineReducers({\n  game: gameReducer,\n});\n\nconst store = configureStore({\n  devTools: process.env.NODE_ENV !== 'production',\n  reducer: rootReducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\nexport type AppThunk = ThunkAction<void, RootState, null, Action<string>>;\nexport type AppDispatch = typeof store.dispatch;\n\nexport default store;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport getCombinations from 'helpers/getCombinations';\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../store/store';\nimport styles from './CombinationLine.module.scss';\n\nconst CombinationLine: React.FC = () => {\n  const { combinations, hints } = useSelector((state: RootState) => state.game);\n\n  const renderDigit = (d: number, direction: number) => {\n    if (hints[direction].used.includes(d)) {\n      return <span className={styles.highlight}>{d}</span>;\n    } else {\n      return <span>{d}</span>;\n    }\n  };\n\n  const renderPossibility = (a: number[], direction: number) => {\n    return (\n      <span className={styles.possibility} key={a.join('')}>\n        {a.map(d => renderDigit(d, direction))}\n      </span>\n    );\n  };\n\n  const renderPossibilities = (a: number[][], direction: number) => {\n    return <span>{a.map(b => renderPossibility(b, direction))}</span>;\n  };\n\n  if (hints[0].index === -1) {\n    return null;\n  }\n\n  const renderLine = (direction: number) => (\n    <div className=''>\n      <span className={styles.sum}>{hints[direction].sum}:</span>\n      {renderPossibilities(possibilities[direction], direction)}\n    </div>\n  );\n\n  const possibilities = [\n    getCombinations(hints[0], combinations!),\n    getCombinations(hints[1], combinations!),\n  ];\n\n  return (\n    <div className={styles.combinations}>\n      <div className={styles.text}>\n        {renderLine(0)}\n        {renderLine(1)}\n      </div>\n    </div>\n  );\n};\n\nexport default CombinationLine;\n","import { Provider } from 'react-redux';\nimport React from 'react';\nimport GameGrid from './components/GameGrid';\nimport Controls from './components/Controls';\nimport './App.scss';\nimport store from './store/store';\nimport CombinationLine from 'components/CombinationLine';\n\nconst App: React.FC = () => {\n  return (\n    <Provider store={store}>\n      <header className='header'>Mister K.ʼs Kakuro</header>\n\n      <div className='content'>\n        <GameGrid />\n        <Controls />\n      </div>\n\n      <CombinationLine />\n    </Provider>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"gameBackground\":\"GameGrid_gameBackground__3HuJu\",\"grid\":\"GameGrid_grid__129PN\"};"],"sourceRoot":""}