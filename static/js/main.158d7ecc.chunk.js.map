{"version":3,"sources":["features/playing/GameGrid.module.scss","components/MyMenubar.module.scss","features/creating/CreateGame.module.scss","features/creating/DrawGrid.module.scss","features/menu/MainMenu.module.scss","features/playing/BlankCell.module.scss","features/playing/PlayGame.module.scss","features/playing/Controls.module.scss","features/creating/SaveGame.module.scss","features/playing/CombinationLine.module.scss","myHistory.ts","features/alerts/alertSlice.ts","api/kakuroApi.ts","utils/authHeader.ts","store/userSlice.ts","models/designModels.ts","components/MyMenubar.tsx","components/ProtectedRoute.tsx","models/cellModels.ts","features/list/listSlice.ts","utils/checkPuzzle.ts","utils/combinations.ts","utils/getCombinations.ts","utils/getHintsForCell.ts","utils/doSetGuess.ts","utils/pencilmarks.ts","utils/hintCells.ts","utils/preparePuzzle.ts","utils/solvePuzzle.ts","utils/validateGrid.ts","store/designSlice.ts","utils/doCountMissingCells.ts","store/gameSlice.ts","utils/clearGuesses.ts","features/creating/ExportButton.tsx","features/creating/DesignPanel.tsx","features/creating/HintDialog.tsx","features/creating/DesignCell.tsx","features/creating/DrawGrid.tsx","features/creating/SaveGame.tsx","features/creating/SetCells.tsx","features/creating/SetHints.tsx","components/MyInput.tsx","components/MySelectButton.tsx","components/MySlider.tsx","types/puzzle.ts","features/creating/ImportDialog.tsx","features/creating/SetSize.tsx","features/creating/CreateGame.tsx","features/list/PuzzleList.tsx","utils/makePlayable.ts","features/menu/MainMenu.tsx","hooks/useEventListener.js","components/KeyboardListener.tsx","features/playing/CombinationLine.tsx","features/playing/GuessButton.tsx","features/playing/Controls.tsx","utils/calcCellSize.ts","features/playing/BlankCell.tsx","features/playing/HintCell.tsx","features/playing/NumberCell.tsx","features/playing/GameGrid.tsx","features/playing/PlayGame.tsx","features/users/SignIn.tsx","features/users/SignUp.tsx","components/Routes.tsx","features/alerts/Alerts.tsx","store/store.ts","App.tsx","reportWebVitals.ts","index.tsx","features/creating/DesignCell.module.scss","features/creating/ImportDialog.module.scss","features/playing/GuessButton.module.scss","features/creating/HintDialog.module.scss","features/playing/NumberCell.module.scss"],"names":["module","exports","createHashHistory","alertSlice","createSlice","name","initialState","alerts","pageTitle","isFetching","notFound","reducers","clearAlert","state","action","payload","setAlert","alert","severity","setNotFound","setErrorAlert","summary","setSuccessAlert","setWarningAlert","setIsFetching","setPageTitle","document","title","actions","kakuroApi","axios","create","baseURL","process","authHeader","user","token","localStorage","getItem","Authorization","console","log","storeduser","JSON","parse","decoded","decode","Date","now","exp","removeItem","error","Direction","DesignStepsEnum","isLoggedIn","isRequesting","debugMode","userSlice","loginSuccess","logoutFailed","logoutSuccess","signUpSuccess","signUpFailed","submitting","requestFailed","code","response","status","toggleDebugMode","MyMenubar","dispatch","useDispatch","useSelector","users","startItem","className","styles","menuItems","label","icon","command","myHistory","push","disabled","endItem","checked","onLabel","offLabel","onIcon","offIcon","onChange","onClick","a","post","headers","stringify","model","start","end","header","ProtectedRoute","isAuthenticated","authenticationPath","routeProps","useEffect","to","pathname","Difficulty","CellType","PuzzleStates","designSteps","listSlice","list","solved","fetchListSuccess","fetchSolvedSuccess","addPuzzleToList","setChoiceID","choice","checkPuzzle","puzzle","cells","sumHorizontal","sumVertical","filter","c","type","HintCell","every","hc","hints","sumSolved","valid","checkAllSolved","NumberCell","solution","combinations","digits","Array","fill","_makeCombinations","min","current","set","count","index","length","digitsToCombination","makeCombinations","Object","freeze","getCombinations","combs","map","excluded","impossible","getHintsForCell","hintMaps","tempCandidates","forEach","dir","hintCell","_","uniq","flat","sort","candidates","intersection","allUsed","union","usedDigits","difference","doSetGuess","game","guess","cellHints","currentCell","pull","cellIndexes","e","i","nCell","pencilMarks","d","getGroupForCell","direction","delta","x","sumGuessed","y","singlePencilmarksToGuess","setGuess","cell","makePencilmarks","newPM","hHint","vHint","used","hComb","vComb","hDigits","from","Set","vDigits","includes","neighbour","p","columnCount","makePencilmarksForCell","makeHints","counts","across","down","doMakeHintCells","solutionKnown","hintCount","next","join","hCell","needsNew0","needsNew1","BlankCell","group","hint","numberCell","preparePuzzle","solutions","cellString","newGame","missingCells","_solvePuzzle","solvedGame","nc","solvePuzzle","original","validatePuzzle","numberCount","message","createGrid","columns","rows","item","activeStep","level","rowCount","Raw","designSlice","setActiveStep","setBaseGame","oldCols","oldRows","newPuzzle","clearDesignGame","setPuzzle","setItem","InsertHints","CheckPuzzle","updateCell","newCell","reduce","prev","curr","makeHintCells","solveGameSuccess","Solved","solveGameFailed","checkGameSuccess","Valid","createGameSuccess","doCountMissingCells","zoomLevel","markWrong","undoStack","redoStack","gameSlice","setGameState","setCurrentGameSuccess","selectedIndex","currentGame","setSelectedIndex","newIndex","increaseZoom","newValue","setGuessSuccess","newMissingCells","togglePencilMark","indexOf","splice","resetGame","undefined","clearGuesses","toggleMarkWrong","clearPencilMarks","doClearPencilMarks","autoPencil","toggleCombination","hintIndex","combinationIndex","comb","undo","oldGameString","pop","redo","setCurrentGame","getState","_id","id","ExportButton","useState","exportVisible","setExportVisible","puzzleJSON","setPuzzleJSON","design","button","visible","style","width","height","modal","onHide","fontFamily","value","blob","Blob","filename","fileDownload","DesignPanel","props","handleBack","handleNext","children","headerTemplate","options","titleClassName","HintDialog","setOptions","renderButtons","groupData","keys","minSum","Math","maxSum","max","buttonGrid","n","acrossHint","handleClick","classNames","numbers","dialog","DesignCell","dialogVisible","setDialogVisible","renderHint","hintStr","hintClass","hintMissing","hasNumber","pm","classnames","designCell","DrawGrid","pencilmarks","debug","gameBackground","grid","gridTemplateColumns","SaveGame","result","values","data","SetCells","res","SetHints","MyInput","htmlFor","dangerouslySetInnerHTML","__html","component","MySlider","field","setFieldValue","event","handleChange","difficultyLevels","difficultyLabels","SetSize","importVisible","setImportVisible","onDrop","useCallback","acceptedFiles","file","reader","FileReader","onabort","onerror","onload","readAsText","useDropzone","getRootProps","getInputProps","isDragActive","textarea","dragging","target","PuzzleSchema","Yup","shape","required","initialValues","formikRef","useRef","handleSubmit","enableReinitialize","onSubmit","validationSchema","innerRef","ImportDialog","as","InputText","MySelectButton","CreateGame","createGame","createSteps","activeIndex","PuzzleList","filtered","get","autoLayout","stripedRows","scrollable","scrollHeight","selectionMode","selection","onSelectionChange","dataKey","stateStorage","stateKey","sortable","body","date","createdAt","format","makePlayable","input","split","char","puzzleSizes","MainMenu","puzzleSize","setPuzzleSize","content","bar","placeholder","size","useEventListener","eventName","handler","element","window","savedHandler","addEventListener","eventListener","removeEventListener","KeyboardListener","selectCell","handleKeyDown","key","CombinationLine","setCellHints","icons","renderCombination","combination","possibility","handleToggleCombination","usedDigit","candidateDigit","renderDigit","renderCombinations","renderLine","dirHints","ch","column","text","GuessButton","digit","pencilMark","guessButton","pencilMark1","Controls","handleZoom","renderButton","controls","zoomButtons","guessButtons","confirmDialog","accept","calcBoardSize","calcCellSize","blank","fontSize","calcHintFontSize","guessFontSize","calcGuessFontSize","pencilMarkFontSize","lineHeight","calcPencilMarkFontSize","cellStyle","wrongGuess","number","selected","GameGrid","gridContainer","gridTemplateRows","renderCell","PlayGame","SignIn","email","password","resourceType","resources","login","UserSchema","SignUp","signUp","Routes","prot","history","path","Alerts","toastEl","show","detail","ref","rootReducer","combineReducers","alertReducer","designReducer","listReducer","gameReducer","userReducer","store","configureStore","devTools","reducer","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.158d7ecc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"gameBackground\":\"GameGrid_gameBackground__2gUQF\",\"gridContainer\":\"GameGrid_gridContainer__1jqzn\",\"grid\":\"GameGrid_grid__3SI7n\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"MyMenubar_header__1SUGp\",\"startItem\":\"MyMenubar_startItem__5gsTl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"createGame\":\"CreateGame_createGame__t-nS6\",\"createSteps\":\"CreateGame_createSteps__3TBZt\",\"p-steps\":\"CreateGame_p-steps__1OyM9\",\"p-steps-item\":\"CreateGame_p-steps-item__2Lv77\",\"p-menuitem-link\":\"CreateGame_p-menuitem-link__3yOB-\",\"p-steps-title\":\"CreateGame_p-steps-title__6eRPZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"gameBackground\":\"DrawGrid_gameBackground__2dTqA\",\"grid\":\"DrawGrid_grid__XoYjv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"MainMenu_content__1zXTd\",\"bar\":\"MainMenu_bar__12htD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"blank\":\"BlankCell_blank__h84dH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"PlayGame_content__3keJX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"controls\":\"Controls_controls__fpjJI\",\"columns\":\"Controls_columns__1dogA\",\"button\":\"Controls_button__3i3Ud\",\"zoomButtons\":\"Controls_zoomButtons__1tiul\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"SaveGame_button__3Is-u\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"combinations\":\"CombinationLine_combinations__2uXXm\",\"column\":\"CombinationLine_column__1JW6l\",\"text\":\"CombinationLine_text__3BaJ1\",\"sumSolved\":\"CombinationLine_sumSolved__3F-S9\",\"possibility\":\"CombinationLine_possibility__ru2Ma\",\"excluded\":\"CombinationLine_excluded__1pGKs\",\"impossible\":\"CombinationLine_impossible__2l3BJ\",\"usedDigit\":\"CombinationLine_usedDigit__1Yysu\",\"candidateDigit\":\"CombinationLine_candidateDigit__1X8Zc\",\"impossibleDigit\":\"CombinationLine_impossibleDigit__sdzMi\"};","import { createHashHistory } from 'history';\n\nexport default createHashHistory();\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nexport interface AlertType {\n  severity: string;\n  summary: string;\n  detail?: string;\n}\n\ntype GlobalSliceState = {\n  alerts: {\n    [key: string]: AlertType;\n  };\n  pageTitle: string | null;\n  isFetching: boolean;\n  notFound: string | null;\n};\n\nconst initialState = {\n  alerts: {},\n  pageTitle: null,\n  isFetching: false,\n  notFound: null,\n};\n\nexport const alertSlice = createSlice({\n  name: 'alerts',\n  initialState: initialState as GlobalSliceState,\n  reducers: {\n    clearAlert(state, action: PayloadAction<string>) {\n      delete state.alerts[action.payload];\n    },\n    setAlert(state, action: PayloadAction<AlertType>) {\n      const alert = action.payload;\n      state.alerts[alert.severity] = alert;\n      state.isFetching = false;\n    },\n    setNotFound(state, action: PayloadAction<string | null>) {\n      state.notFound = action.payload;\n    },\n    setErrorAlert(state, action: PayloadAction<string>) {\n      const alert = { severity: 'error', summary: action.payload };\n      state.alerts[alert.severity] = alert;\n      state.isFetching = false;\n    },\n    setSuccessAlert(state, action: PayloadAction<string>) {\n      const alert = { severity: 'success', summary: action.payload };\n      state.alerts[alert.severity] = alert;\n      state.isFetching = false;\n    },\n    setWarningAlert(state, action: PayloadAction<string>) {\n      const alert = { severity: 'warn', summary: action.payload };\n      state.alerts[alert.severity] = alert;\n      state.isFetching = false;\n    },\n    setIsFetching(state, action: PayloadAction<boolean>) {\n      state.isFetching = action.payload;\n    },\n    setPageTitle(state, action: PayloadAction<string>) {\n      state.pageTitle = action.payload;\n      document.title = action.payload;\n    },\n  },\n});\n\nexport const {\n  clearAlert,\n  setAlert,\n  setErrorAlert,\n  setIsFetching,\n  setNotFound,\n  setPageTitle,\n  setSuccessAlert,\n  setWarningAlert,\n} = alertSlice.actions;\n\nexport default alertSlice.reducer;\n","import axios from 'axios';\n\nconst kakuroApi = axios.create({\n  baseURL: process.env.REACT_APP_KAKURO_API_ENDPOINT || 'http://192.168.168.4:5000'\n});\n\nexport default kakuroApi;\n","function authHeader(): {\n  Authorization: string;\n} | {\n  Authorization: null;\n} {\n  const token = localStorage.getItem('token');\n\n  if (token) {\n    return { Authorization: `Bearer ${token}` };\n  } else {\n    return { Authorization: null };\n  }\n}\n\nexport default authHeader;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { setErrorAlert, setSuccessAlert } from 'features/alerts/alertSlice';\nimport { decode } from 'jsonwebtoken';\nimport kakuroApi from '../api/kakuroApi';\nimport authHeader from '../utils/authHeader';\nimport { AppThunk } from './store';\n\nexport interface IUser {\n  id: string;\n  name: string;\n  email: string;\n}\n\nexport interface ISigninValues {\n  email: string;\n  password: string;\n}\n\nexport interface ISignUpValues extends ISigninValues {\n  name: string;\n}\n\nexport interface IUserState {\n  isLoggedIn: boolean;\n  isRequesting: boolean;\n  user: IUser | null;\n  error: string | null;\n  debugMode: boolean;\n}\n\nexport interface IUnauthorizedPayload {\n  resourceType: string;\n  resources: string[];\n  // status: number;\n  // message: string;\n  response: any;\n}\n\n// TODO: check token\nlet user;\nconsole.log('userSlice: loading user from storage...');\ntry {\n  const storeduser = localStorage.getItem('user');\n  user = storeduser != null ? JSON.parse(storeduser) : null;\n  const token = localStorage.getItem('token');\n\n  if (token) {\n    let decoded: any = decode(token);\n\n    if (Date.now() >= decoded.exp * 1000) {\n      console.log('token expired');\n      localStorage.removeItem('user');\n      localStorage.removeItem('token');\n      user = null;\n    }\n  }\n} catch (error) {\n  localStorage.removeItem('user');\n  localStorage.removeItem('token');\n  user = null;\n}\n\nconst initialState: IUserState = {\n  isLoggedIn: user == null ? false : true,\n  isRequesting: false,\n  user,\n  error: null,\n  debugMode: false,\n};\n\nconst userSlice = createSlice({\n  name: 'user',\n  initialState,\n  reducers: {\n    loginSuccess(state, action: PayloadAction<IUser>) {\n      state.user = action.payload;\n      state.isLoggedIn = action.payload != null;\n      state.error = null;\n      state.isRequesting = false;\n    },\n    logoutFailed(state, action: PayloadAction<string>) {\n      state.error = action.payload;\n      state.user = null;\n      state.isLoggedIn = false;\n      state.isRequesting = false;\n    },\n    logoutSuccess(state) {\n      state.user = null;\n      state.isLoggedIn = false;\n      state.error = null;\n      state.isRequesting = false;\n    },\n    signUpSuccess(state, action: PayloadAction<IUser>) {\n      state.user = action.payload;\n      state.isLoggedIn = action.payload != null;\n      state.error = null;\n      state.isRequesting = false;\n    },\n    signUpFailed(state, action: PayloadAction<string>) {\n      state.error = action.payload;\n      state.user = null;\n      state.isLoggedIn = false;\n      state.isRequesting = false;\n    },\n    submitting(state) {\n      state.isRequesting = true;\n    },\n    requestFailed(state, action: PayloadAction<IUnauthorizedPayload>) {\n      console.log('action.payload:', action.payload);\n\n      // console.log('state:', state);\n      // console.log('action:', action);\n      const code = action.payload.response.status;\n\n      if (code === 401 || code === 403) {\n        // Unauthorized\n        localStorage.removeItem('user');\n        localStorage.removeItem('token');\n        state.user = null;\n        state.isLoggedIn = false;\n        state.error = null;\n        state.isRequesting = false;\n      }\n    },\n    toggleDebugMode(state) {\n      state.debugMode = !state.debugMode;\n    },\n  },\n});\n\nexport const {\n  loginSuccess,\n  logoutFailed,\n  logoutSuccess,\n  requestFailed,\n  signUpFailed,\n  signUpSuccess,\n  submitting,\n  toggleDebugMode,\n} = userSlice.actions;\n\nexport default userSlice.reducer;\n\nexport const login =\n  (values: ISigninValues): AppThunk =>\n  async dispatch => {\n    dispatch(submitting());\n    let user, token;\n    try {\n      const response = await kakuroApi.post('/users/login', values);\n      user = response.data.user;\n      token = response.data.token;\n\n      localStorage.setItem('user', JSON.stringify(user));\n      localStorage.setItem('token', token);\n    } catch ({ response }) {\n      dispatch(\n        setSuccessAlert(\n          'There was an error signing you in. Please check email and password.'\n        )\n      );\n      dispatch(\n        requestFailed({ resourceType: 'users', resources: [], response })\n      );\n      return;\n    }\n\n    dispatch(setSuccessAlert('Successfully signed in.'));\n    dispatch(loginSuccess(user));\n  };\n\nexport const logout = (): AppThunk => async dispatch => {\n  try {\n    await kakuroApi.post('/users/logout', null, { headers: authHeader() });\n  } catch ({ response }) {\n    dispatch(setErrorAlert('There was a problem signing you out.'));\n    dispatch(logoutFailed(JSON.stringify(response)));\n    return;\n  } finally {\n    localStorage.removeItem('user');\n    localStorage.removeItem('token');\n  }\n\n  dispatch(setSuccessAlert('You have successfully signed out.'));\n  dispatch(logoutSuccess());\n};\n\nexport const signUp =\n  (values: ISignUpValues): AppThunk =>\n  async dispatch => {\n    dispatch(submitting());\n    let user, token;\n    try {\n      const response = await kakuroApi.post('/users', values);\n      user = response.data.user;\n      token = response.data.token;\n\n      localStorage.setItem('user', JSON.stringify(user));\n      localStorage.setItem('token', token);\n    } catch ({ response }: any) {\n      dispatch(setErrorAlert('Unable to sign you up.'));\n      dispatch(signUpFailed('Unable to sign up'));\n      return;\n    }\n\n    dispatch(setSuccessAlert('Successfully signed up.'));\n    dispatch(loginSuccess(user));\n  };\n","export enum Direction {\n  Horizontal = 0,\n  Vertical = 1,\n  Both = 2,\n}\n\nexport enum DesignStepsEnum {\n  SetSize = 0,\n  DrawGrid = 1,\n  InsertHints = 2,\n  CheckPuzzle = 3,\n}\n\nexport const designSteps = [\n  { label: 'Set Size' },\n  { label: 'Draw Grid' },\n  { label: 'Insert Hints' },\n  { label: 'Check Puzzle' },\n];\n","import myHistory from 'myHistory';\nimport { Button } from 'primereact/button';\nimport { Menubar } from 'primereact/menubar';\nimport React from 'react';\nimport { RootState } from 'store/store';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { logout, toggleDebugMode } from 'store/userSlice';\nimport styles from './MyMenubar.module.scss';\nimport { ToggleButton } from 'primereact/togglebutton';\n\nconst MyMenubar: React.FC = () => {\n  const dispatch = useDispatch();\n  const { user } = useSelector((state: RootState) => state.users);\n  const { debugMode } = useSelector((state: RootState) => state.users);\n\n  const handleToggleDebug = () => {\n    dispatch(toggleDebugMode());\n  };\n\n  const startItem = (\n    <div className={styles.startItem}>\n      <h3>Mr K.'s Kakuro</h3>\n    </div>\n  );\n\n  const menuItems = [\n    {\n      label: 'Menu',\n      icon: 'mdi mdi-hamburger',\n      command: () => myHistory.push('/'),\n    },\n    {\n      label: 'Design Puzzle',\n      icon: 'mdi mdi-pencil',\n      command: () => myHistory.push('/create'),\n      disabled: user == null,\n    },\n    {\n      label: 'Play Puzzle',\n      icon: 'mdi mdi-play',\n      command: () => myHistory.push('/play'),\n    },\n  ];\n\n  const endItem = (\n    <>\n      <ToggleButton\n        checked={debugMode}\n        onLabel='Debug'\n        offLabel='No Debug'\n        onIcon='mdi mdi-bug'\n        offIcon='mdi mdi-bug-check'\n        onChange={handleToggleDebug}\n      />\n\n      {user ? (\n        <Button\n          label={`Sign Out ${user.name}`}\n          icon='mdi mdi-logout'\n          onClick={() => dispatch(logout())}\n        />\n      ) : (\n        <Button\n          label='Sign Up/Sign In'\n          icon='mdi mdi-login'\n          onClick={() => myHistory.push('/signin')}\n        />\n      )}\n    </>\n  );\n\n  return (\n    <Menubar\n      model={menuItems}\n      start={startItem}\n      end={endItem}\n      className={styles.header}\n    />\n  );\n};\n\nexport default MyMenubar;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport { setErrorAlert } from 'features/alerts/alertSlice';\nimport { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Redirect, Route, RouteProps } from 'react-router';\n\nexport type ProtectedRouteProps = {\n  isAuthenticated: boolean;\n  authenticationPath: string;\n} & RouteProps;\n\nexport default function ProtectedRoute({\n  isAuthenticated,\n  authenticationPath,\n  ...routeProps\n}: ProtectedRouteProps) {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (!isAuthenticated) {\n      dispatch(setErrorAlert('You must be signed in to do this.'));\n    }\n  }, [isAuthenticated]);\n\n  if (isAuthenticated) {\n    return <Route {...routeProps} />;\n  } else {\n    return <Redirect to={{ pathname: authenticationPath }} />;\n  }\n}\n","export enum Difficulty {\n  Easy = 0,\n  Medium = 1,\n  MediumPlus = 2,\n  Hard = 3,\n  VeryHard = 4,\n}\n\nexport enum CellType {\n  BlankCell = 'blankCell',\n  HintCell = 'hintCell',\n  NumberCell = 'numberCell',\n}\n\nexport enum PuzzleStates {\n  Raw = 0,\n  Valid = 1,\n  Solved = 2,\n}\n\nexport interface ICell {\n  index: number;\n  type: CellType;\n}\n\nexport interface IBlankCell extends ICell {\n  type: CellType.BlankCell;\n}\n\nexport interface ICombination {\n  digits: number[];\n  excluded: boolean;\n  impossible: boolean;\n}\n\nexport interface IHint {\n  index: number; // index of this cell\n  sumSolved: number; // hint for this cell\n  sumGuessed: number; // sumSolved of guessed cells\n  count: number;\n  cellIndexes: number[];\n  usedDigits: number[];\n  combinations: ICombination[]; // [combination][digit]\n}\n\nexport interface IHintCell extends ICell {\n  type: CellType.HintCell;\n  hints: (IHint | null)[];\n}\n\nexport interface INumberCell extends ICell {\n  type: CellType.NumberCell;\n  pencilMarks: number[];\n  guess: number;\n  solution: number;\n}\n\nexport type IBaseGame = {\n  _id?: string;\n  name: string;\n  columnCount: number;\n  rowCount: number;\n  level: Difficulty;\n};\n\nexport interface IServerGameData extends IBaseGame {\n  state: PuzzleStates;\n  cellString: string;\n}\n\nexport interface IHintMap {\n  [index: number]: number;\n}\n\nexport interface IGameData extends IBaseGame {\n  state: PuzzleStates;\n  cells: ICell[];\n  hintCount: number;\n  missingCells: number;\n  hintMaps: IHintMap[];\n}\n\nexport interface IGuess {\n  index: number;\n  guess: number;\n}\n\nexport interface IToggleCombinationParams {\n  hintIndex: number;\n  direction: number;\n  combinationIndex: number;\n}\n\n/*\nexport interface IDesignCell {\n  type: CellType;\n  index: number;\n  // hintHorizontal?: number;\n  // hintVertical?: number;\n  hints: (IHint | null)[];\n  solution?: number;\n}\n*/\n\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport kakuroApi from 'api/kakuroApi';\nimport { setErrorAlert } from 'features/alerts/alertSlice';\nimport { IBaseGame } from 'models/cellModels';\nimport { AppThunk } from 'store/store';\nimport authHeader from 'utils/authHeader';\n\nexport interface IListGame extends IBaseGame {\n  cellString: string;\n  createdAt: Date;\n}\n\ntype ListSliceState = {\n  list: IListGame[];\n  choice?: IListGame;\n  solved: string[];\n};\n\nconst initialState: ListSliceState = {\n  list: [],\n  solved: [],\n};\n\nexport const listSlice = createSlice({\n  name: 'list',\n  initialState,\n  reducers: {\n    fetchListSuccess: (state, action: PayloadAction<IListGame[]>) => {\n      state.list = action.payload;\n    },\n    fetchSolvedSuccess: (state, action: PayloadAction<string[]>) => {\n      state.solved = action.payload;\n    },\n    addPuzzleToList: (state, action: PayloadAction<IListGame>) => {\n      state.list.push(action.payload);\n    },\n    setChoiceID: (state, action: PayloadAction<IListGame>) => {\n      state.choice = action.payload;\n    },\n  },\n});\n\nexport const { addPuzzleToList, fetchListSuccess, fetchSolvedSuccess, setChoiceID } =\n  listSlice.actions;\n\nexport default listSlice.reducer;\n\nexport const fetchList = (): AppThunk => async (dispatch: any) => {\n  let list;\n\n  try {\n    const response = await kakuroApi.get('/puzzles');\n    list = response.data;\n  } catch (error) {\n    console.error('error:', error);\n    dispatch(setErrorAlert('Puzzles konnten nicht geladen werden.'));\n  }\n\n  dispatch(fetchListSuccess(list));\n};\n\nexport const fetchSolved = (): AppThunk => async (dispatch: any) => {\n  let solved;\n\n  try {\n    const response = await kakuroApi.get('/users/solved', { headers: authHeader() });\n    solved = response.data;\n  } catch (error) {\n    console.error('error:', error);\n    dispatch(setErrorAlert('Liste gelöster Puzzles konnten nicht geladen werden.'));\n  }\n\n  dispatch(fetchSolvedSuccess(solved));\n};\n\nexport const importPuzzle = (size: string): AppThunk => async (dispatch: any) => {\n  let puzzle;\n\n  try {\n    const response = await kakuroApi.post('/puzzles/steal', { size }, { headers: authHeader() });\n    puzzle = response.data;\n  } catch (error) {\n    console.error('error:', error);\n    dispatch(setErrorAlert('Fehler beim Importieren eines Puzzles.'));\n  }\n\n  dispatch(addPuzzleToList(puzzle));\n};\n","import { CellType, IGameData, IHintCell, INumberCell } from 'models/cellModels';\n\nexport function checkPuzzle(puzzle: IGameData) {\n  const { cells } = puzzle;\n  // TODO: Which clever checks should we implement?\n  // * are the sums possible?\n  let sumHorizontal = 0;\n  let sumVertical = 0;\n\n  // * are the values of rows and columns correct?\n\n  // * do all hint cells have all necessary hints?\n  const allHints = cells\n    .filter(c => c.type === CellType.HintCell)\n    .every(c => {\n      const hc = c as IHintCell;\n\n      if (hc.hints[0]?.sumSolved) {\n        sumHorizontal += hc.hints[0]?.sumSolved;\n      }\n\n      if (hc.hints[1]?.sumSolved) {\n        sumVertical += hc.hints[1]?.sumSolved;\n      }\n\n      return (\n        (!hc.hints[0]?.sumSolved || hc.hints[0]?.sumSolved > -1) &&\n        (!hc.hints[1]?.sumSolved || hc.hints[1]?.sumSolved > -1)\n      );\n    });\n\n  if (!allHints) {\n    return { valid: false, error: 'Not all hints provided.' };\n  }\n\n  if (sumHorizontal !== sumVertical) {\n    return {\n      valid: false,\n      error: `Hints across: ${sumHorizontal}, down: ${sumVertical}. Must be equal.`,\n    };\n  }\n\n  return { valid: true };\n}\n\nexport function checkGuessesCorrect({ cells }: IGameData): boolean {\n  return cells\n    .filter(c => c.type === CellType.NumberCell)\n    .every(c => (c as INumberCell).guess === (c as INumberCell).solution);\n}\n\nexport function checkAllSolved({ cells }: IGameData): boolean {\n  return cells\n    .filter(c => c.type === CellType.NumberCell)\n    .every(c => (c as INumberCell).solution > 0);\n}\n","export interface ICombinationsForCount {\n  [sumSolved: string]: number[][];\n}\n\nexport interface ICombinations {\n  [count: string]: ICombinationsForCount;\n}\n\nconst makeCombinations = () => {\n  const combinations: ICombinations = {};\n  const digits = new Array(10).fill(false);\n\n  const digitsToCombination = () => {\n    const set = new Array<number>();\n    let count = 0;\n    let sumSolved = 0;\n\n    for (let index = 1; index < digits.length; index++) {\n      if (digits[index]) {\n        set.push(index);\n        count += 1;\n        sumSolved += index;\n      }\n    }\n\n    if (!combinations[count]) {\n      combinations[count] = {};\n    }\n\n    if (!combinations[count][sumSolved]) {\n      combinations[count][sumSolved] = new Array<number[]>();\n    }\n\n    combinations[count][sumSolved].push(set);\n  };\n\n  const _makeCombinations = (min: number, current: number) => {\n    if (current === 10) {\n      digitsToCombination();\n    } else {\n      digits[current] = true;\n      _makeCombinations(min, current + 1);\n      digits[current] = false;\n      _makeCombinations(min, current + 1);\n      current++;\n    }\n  };\n\n  for (let min = 1; min < 9; min++) {\n    digits[min] = true;\n    _makeCombinations(min, min + 1);\n    digits[min] = false;\n  }\n\n  delete combinations['1'];\n  return combinations;\n};\n\nconst combinations: ICombinations = makeCombinations();\nObject.freeze(combinations);\n\nexport default combinations;\n","import { ICombination } from 'models/cellModels';\nimport combinations from './combinations';\n\ninterface IGetCombinationsParams {\n  sumSolved: number;\n  count: number;\n}\n\n/**\n *\n * @param hints the computed hints for a particular cell\n * @param combinations all combinations\n */\nexport default function getCombinations({\n  sumSolved,\n  count,\n}: IGetCombinationsParams): ICombination[] {\n  let combs = combinations[count][sumSolved];\n\n  if (!combs) {\n    return [];\n  }\n\n  // only select those combinations which contain every used digit\n  // TODO do this when new number guessed\n  // combs = combs.filter(c => hints.usedDigits.every(h => c.includes(h)));\n\n  return combs.map(c => ({ digits: c, excluded: false, impossible: false }));\n}\n","import _ from 'lodash';\nimport { IGameData, IHint, IHintCell } from 'models/cellModels';\n\nexport interface ICellHInts {\n  hints: IHint[];\n  candidates: number[];\n  allUsed: number[];\n}\n\n/**\n * Finds across and down hints and possible digits for cell\n * @param game\n * @param index\n */\nexport default function getHintsForCell(\n  { cells, hintMaps }: IGameData,\n  index: number\n): ICellHInts {\n  const hints = new Array<IHint>(2);\n  const tempCandidates: number[][] = [];\n\n  // pluck all candidates across and down from\n  // possible combinations\n  [0, 1].forEach(dir => {\n    const hintCell = hintMaps[dir][index];\n    hints[dir] = (cells[hintCell] as IHintCell).hints[dir]!;\n    tempCandidates.push(\n      _.uniq(\n        hints[dir].combinations\n          .filter(c => !c.excluded && !c.impossible)\n          .map(c => c.digits)\n          .flat()\n          .sort()\n      )\n    );\n  });\n\n  // find possible digits: those that are present\n  // both across and down\n  let candidates = _.intersection(tempCandidates[0], tempCandidates[1]);\n\n  // remove used digits\n  const allUsed = _.union(hints[0].usedDigits, hints[1].usedDigits);\n  candidates = _.difference(candidates, allUsed);\n\n  return { hints, candidates, allUsed };\n}\n","import { IGameData, INumberCell } from 'models/cellModels';\nimport getHintsForCell from './getHintsForCell';\nimport _ from 'lodash';\n\n/**\n * Sets guessed digit in cell and\n * does house-keeping on remaining cells and candidates\n * @param game\n * @param index\n */\nexport default function doSetGuess(\n  game: IGameData,\n  index: number,\n  guess: number\n) {\n  const { cells } = game;\n  const cellHints = getHintsForCell(game, index);\n  const currentCell = cells[index] as INumberCell;\n\n  // if old guess present, remove it from used digits\n  if (currentCell.guess > 0) {\n    // console.log('Removing', guess, 'from used digits');\n\n    [0, 1].forEach(dir =>\n      _.pull(cellHints.hints[dir].usedDigits, currentCell.guess)\n    );\n\n    // TODO: add old guess to pencil marks?\n  }\n\n  currentCell.guess = guess;\n\n  // add digits to used digits\n  [0, 1].forEach(dir => {\n    // const hint = cellHints.hints[dir];\n    const { usedDigits, combinations } = cellHints.hints[dir];\n\n    if (guess > 0) {\n      usedDigits.push(guess);\n    }\n\n    // mark combinations as impossible if they do not contain\n    // all guessed numbers\n    combinations.forEach(c => {\n      c.impossible = _.difference(usedDigits, c.digits).length > 0;\n    });\n    // combinations\n    //   .filter(c => _.difference(usedDigits, c.digits).length > 0)\n    //   .forEach(c => {\n    //     c.impossible = true;\n    //   });\n  });\n\n  // remove guess from pencil marks\n  const affectedIndexes = [0, 1]\n    .map(dir => cellHints.hints[dir].cellIndexes)\n    .flat()\n    .filter(e => e !== index);\n\n  affectedIndexes.forEach(i => {\n    const nCell = cells[i] as INumberCell;\n    nCell.pencilMarks = nCell.pencilMarks.filter(d => d !== guess);\n  });\n\n  // too much help?!:\n  // makePencilmarks(newGame);\n}\n","import {\n  CellType,\n  IGameData,\n  IHint,\n  IHintCell,\n  INumberCell,\n} from 'models/cellModels';\nimport doSetGuess from './doSetGuess';\nimport getCombinations from './getCombinations';\nimport { delta } from './hintCells';\n\nexport function getGroupForCell(\n  puzzle: IGameData,\n  index: number,\n  direction: number\n): IHint {\n  const { cells } = puzzle;\n  const d = delta(puzzle, direction);\n  let x = index - d;\n  let cellIndexes = [];\n  let usedDigits = [];\n  let sumSolved = 0;\n  let sumGuessed = 0;\n\n  while (cells[x].type === CellType.NumberCell) {\n    x -= d;\n  }\n\n  let y = x;\n  while (y + d < cells.length && cells[y + d].type === CellType.NumberCell) {\n    y += d;\n    cellIndexes.push(y);\n    const nCell = cells[y] as INumberCell;\n\n    if (nCell.guess) {\n      usedDigits.push(nCell.guess);\n      sumGuessed += nCell.guess;\n    }\n\n    if (nCell.solution > 0) {\n      sumSolved += nCell.solution;\n    }\n  }\n\n  const count = (y - x) / d;\n  const combinations =\n    sumGuessed > 0 ? getCombinations({ sumSolved, count }) : [];\n\n  const hint: IHint = {\n    index: x,\n    count,\n    sumSolved,\n    sumGuessed,\n    cellIndexes,\n    usedDigits,\n    combinations,\n  };\n\n  return hint;\n}\n\nexport function guessRemovesPencilmarks(game: IGameData, index: number) {}\n\nexport function singlePencilmarksToGuess(game: IGameData): boolean {\n  let setGuess = false;\n\n  game!.cells.forEach(c => {\n    if (c.type === CellType.NumberCell) {\n      const cell = c as INumberCell;\n      if (cell.guess === 0 && cell.pencilMarks?.length === 1) {\n        if (cell.solution > 0) {\n          cell.guess = cell.pencilMarks[0];\n        } else {\n          cell.solution = cell.pencilMarks[0];\n        }\n        // guessNumber(game, cell.index, cell.pencilMarks[0]);\n        doSetGuess(game, cell.index, cell.pencilMarks[0]);\n        setGuess = true;\n      }\n    }\n  });\n\n  return setGuess;\n}\n\nexport function makePencilmarksForCell(\n  nCell: INumberCell,\n  index: number,\n  game: IGameData\n) {\n  if (nCell.guess > 0) {\n    return;\n  }\n\n  // Filter out impossible combinations\n  let newPM = nCell.pencilMarks || [];\n  const hHint = (game.cells[game.hintMaps[0][index]] as IHintCell).hints[0];\n  const vHint = (game.cells[game.hintMaps[1][index]] as IHintCell).hints[1];\n\n  const used = [...hHint!.usedDigits, ...vHint!.usedDigits];\n  const hComb = hHint!.combinations\n    .filter(c => !c.impossible)\n    .map(c => c.digits);\n  const vComb = vHint!.combinations\n    .filter(c => !c.impossible)\n    .map(c => c.digits);\n\n  // if no current pencil marks, find possible ones\n  // Get possible digits\n  const hDigits = Array.from(new Set(hComb.flat()));\n  const vDigits = Array.from(new Set(vComb.flat()));\n  newPM = hDigits.filter(e => vDigits.includes(e) && !used.includes(e)).sort();\n  // console.log('0 newPM:', newPM);\n\n  if ((nCell.pencilMarks || []).length > 0) {\n    newPM = newPM.filter(e => nCell.pencilMarks.includes(e));\n    // console.log('1 newPM:', newPM);\n\n    // only possible if pencil marks have been set once already\n    // i.e. if neighbours have correct marks\n\n    // if cell part of a twin across or down\n    // check which marks are possible\n    if (\n      hHint!.count === 2 &&\n      index + 1 < game.cells.length &&\n      game.cells[index + 1].type === CellType.NumberCell &&\n      (game.cells[index + 1] as INumberCell).guess === 0\n    ) {\n      const neighbour = game.cells[index + 1] as INumberCell;\n\n      newPM = newPM.filter(p => {\n        return neighbour.pencilMarks.includes(hHint!.sumSolved - p);\n      });\n    }\n\n    // check for twin down\n    if (\n      vHint!.count === 2 &&\n      index + game.columnCount < game.cells.length &&\n      game.cells[index + game.columnCount].type === CellType.NumberCell &&\n      (game.cells[index + game.columnCount] as INumberCell).guess === 0\n    ) {\n      const neighbour = game.cells[index + game.columnCount] as INumberCell;\n\n      newPM = newPM.filter(p => {\n        return neighbour.pencilMarks.includes(vHint!.sumSolved - p);\n      });\n    }\n  }\n\n  nCell.pencilMarks = newPM;\n}\n\nexport function makePencilmarks(game: IGameData) {\n  game.cells.forEach((cell, index) => {\n    if (cell.type === CellType.NumberCell) {\n      makePencilmarksForCell(cell as INumberCell, index, game);\n    }\n  });\n}\n","import {\n  CellType,\n  ICell,\n  IGameData,\n  IHint,\n  IHintCell,\n  INumberCell,\n} from 'models/cellModels';\nimport getCombinations from './getCombinations';\nimport { getGroupForCell } from './pencilmarks';\n\nexport function delta(puzzle: IGameData, direction: number): number {\n  return direction === 0 ? 1 : puzzle.columnCount;\n}\n\nexport function doCountMissingHints(puzzle: IGameData) {\n  const reducer = (prev: number, curr: ICell) => {\n    if (curr.type !== CellType.HintCell) {\n      return prev;\n    } else {\n      const hCell = curr as IHintCell;\n      return (\n        prev +\n        (hCell.hints[0]?.sumSolved === -1 ? 1 : 0) +\n        (hCell.hints[1]?.sumSolved === -1 ? 1 : 0)\n      );\n    }\n  };\n\n  return puzzle.cells.reduce(reducer, 0);\n}\n\nconst makeHints = (index: number, counts: number[]): Array<IHint | null> => {\n  const [across, down] = counts;\n  const hints = new Array<IHint | null>(2);\n\n  if (across > 0) {\n    hints[0] = {\n      index,\n      sumSolved: -1,\n      sumGuessed: 0,\n      count: across,\n      cellIndexes: [],\n      usedDigits: [],\n      combinations: [],\n    };\n  }\n\n  if (down > 0) {\n    hints[1] = {\n      index,\n      sumSolved: -1,\n      sumGuessed: 0,\n      count: down,\n      cellIndexes: [],\n      usedDigits: [],\n      combinations: [],\n    };\n  }\n\n  return hints;\n};\n\nexport function doMakeHintCells(puzzle: IGameData, solutionKnown = false) {\n  const { cells, hintMaps } = puzzle;\n  let hintCount = 0;\n\n  // no hint cells in last two cells\n  for (let index = 0; index < cells.length - 2; index++) {\n    const cell: ICell = cells[index];\n    let counts = [0, 0];\n\n    if (cell.type !== CellType.NumberCell) {\n      // cell must be a hint cell if there is a number to its right or down\n      [0, 1].forEach(direction => {\n        let next = index + delta(puzzle, direction);\n        while (\n          next < cells.length &&\n          cells[next].type === CellType.NumberCell\n        ) {\n          cell.type = CellType.HintCell;\n          counts[direction]++;\n          next += delta(puzzle, direction);\n        }\n      });\n\n      // it's a hint cell unless both counts are zero\n      const isHint = counts.join('') !== '00';\n\n      if (isHint) {\n        const hCell = cell as IHintCell;\n\n        // make hints unless already present & valid\n        let needsNew0 = false;\n        if (counts[0] > 0) {\n          needsNew0 =\n            !hCell.hints ||\n            !hCell.hints[0] ||\n            hCell.hints[0].count !== counts[0];\n        }\n\n        let needsNew1 = false;\n        if (counts[1] > 0) {\n          needsNew1 =\n            !hCell.hints ||\n            !hCell.hints[1] ||\n            hCell.hints[1].count !== counts[1];\n        }\n\n        // don't overwrite existing hint\n        if (needsNew0 || needsNew1) {\n          hCell.hints = makeHints(index, counts);\n        }\n        hintCount += (counts[0] > 0 ? 1 : 0) + (counts[1] > 0 ? 1 : 0);\n      } else {\n        cell.type = CellType.BlankCell;\n        delete (cell as any).hints; // = null;\n      }\n    }\n  }\n\n  // populate hintMaps\n  cells\n    .filter(c => c.type === CellType.HintCell)\n    .forEach(c => {\n      const hintCell = c as IHintCell;\n\n      [0, 1].forEach(direction => {\n        if (hintCell.hints[direction]) {\n          const group = getGroupForCell(\n            puzzle,\n            hintCell.index + delta(puzzle, direction),\n            direction\n          );\n\n          const sumSolved = solutionKnown\n            ? group.sumSolved\n            : hintCell.hints[direction]?.sumSolved || 0;\n\n          const combinations =\n            sumSolved > 0\n              ? getCombinations({ sumSolved, count: group.count })\n              : [];\n          const hint: IHint = {\n            ...group,\n            sumSolved,\n            sumGuessed: 0,\n            usedDigits: [],\n            combinations,\n          };\n\n          hintCell.hints[direction] = hint;\n\n          // populate hint map\n          group.cellIndexes.forEach(i => {\n            hintMaps[direction][i] = c.index;\n          });\n        }\n      });\n    });\n\n  cells\n    .filter(c => c.type === CellType.NumberCell)\n    .forEach(c => {\n      const numberCell = c as INumberCell;\n      numberCell.guess = 0;\n      numberCell.pencilMarks = [];\n      numberCell.solution = 0;\n    });\n\n  puzzle.hintCount = hintCount;\n}\n","import {\n  CellType,\n  IGameData,\n  INumberCell,\n  IServerGameData,\n} from 'models/cellModels';\n\nfunction preparePuzzle(game: IGameData): IServerGameData {\n  const cellString = game.cells\n    .map(cell =>\n      cell.type !== CellType.NumberCell ? 0 : (cell as INumberCell).solution\n    )\n    .join('');\n\n  const { cells, missingCells, hintMaps, ...newGame } = game;\n  const newServerGame = { ...newGame, cellString } as IServerGameData;\n\n  return newServerGame;\n}\n\nexport default preparePuzzle;\n","import { CellType, IGameData, INumberCell } from 'models/cellModels';\nimport {\n  makePencilmarks,\n  singlePencilmarksToGuess\n} from './pencilmarks';\n\nlet solutions: IGameData[];\n\n// function logBoard(game: IGameData) {\n//   console.log(\n//     'Board',\n//     JSON.stringify(\n//       game.cells\n//         .filter(c => c.type === CellType.NumberCell)\n//         .map(c => (c as INumberCell).guess)\n//     )\n//   );\n// }\n\n// function logSolution(game: IGameData) {\n//   console.log(\n//     'Solution',\n//     JSON.stringify(\n//       game.cells\n//         .filter(c => c.type === CellType.NumberCell)\n//         .map(c => (c as INumberCell).solution)\n//     )\n//   );\n// }\n\nfunction _solvePuzzle(game: IGameData, index: number) {\n  if (index >= game.cells.length) {\n    // found a solution\n    const solvedGame: IGameData = JSON.parse(JSON.stringify(game));\n    solvedGame.cells.forEach(c => {\n      if (c.type === CellType.NumberCell) {\n        const nc = c as INumberCell;\n        nc.solution = nc.guess;\n        nc.guess = 0;\n        nc.pencilMarks = [];\n      }\n    });\n    solutions.push(solvedGame);\n  } else {\n    const cell = game.cells[index];\n\n    if (cell.type !== CellType.NumberCell || (cell as INumberCell).guess > 0) {\n      // if cell is not a number cell or if there is a guess in it already\n      _solvePuzzle(game, index + 1);\n    } else {\n      /*\n      // Try all options for current cell's pencil marks\n      // and solve rest of puzzle recursively\n      const nCell: INumberCell = cell as INumberCell;\n      const rowData = (cell).hints[0];\n      const columnData = (cell).hints[1];\n\n      nCell.pencilMarks.forEach(p => {\n        // TODO: check if pencil mark is valid option\n        // this should not happen\n        if (\n          rowData.usedDigits.includes(p) ||\n          columnData.usedDigits.includes(p)\n        ) {\n          return;\n        }\n\n        // logBoard(game);\n        // console.log(p, rowData.usedDigits, columnData.usedDigits);\n\n        if (\n          (rowData.usedDigits.length === rowData.count - 1 &&\n            rowData.sumSolved + p !== rowData.hint) ||\n          (columnData.usedDigits.length === columnData.count - 1 &&\n            columnData.sumSolved + p !== columnData.hint)\n        ) {\n          // only one digit missing, check if p is the missing number\n          return;\n        }\n\n        nCell.guess = p;\n        console.log(`Cell no. ${index}: Guessing ${p}...`);\n\n        const tempGame: IGameData = JSON.parse(JSON.stringify(game));\n        makePencilmarks(tempGame);\n        while (singlePencilmarksToGuess(tempGame)) {\n          makePencilmarks(tempGame);\n        }\n\n        _solvePuzzle(tempGame, index + 1);\n        nCell.guess = 0;\n      });\n      */\n    }\n  }\n}\n\nexport interface ISolvePuzzleResult {\n  error?: string;\n  solution?: IGameData;\n}\n\n/**\n * Solves the entered puzzle. First version is a brute-force to see how long it takes :D\n * @param original the game to be solved\n * @param combinations all possible combinations\n * @returns the solved game\n */\nfunction solvePuzzle(original: IGameData): ISolvePuzzleResult {\n  // create copy of entered game\n  const game: IGameData = JSON.parse(JSON.stringify(original));\n  // create initial pencil marks\n  // logBoard(game);\n  makePencilmarks(game);\n  while (singlePencilmarksToGuess(game)) {\n    makePencilmarks(game);\n  }\n\n  solutions = new Array<IGameData>();\n  _solvePuzzle(game, 0);\n  // console.log(`Found ${solutions.length}:`);\n\n  if (solutions.length === 0) {\n    return { error: 'Puzzle invalid; no solution.' };\n  } else if (solutions.length > 1) {\n    return {\n      error: `Puzzle invalid; more than one solution (${solutions.length}).`,\n    };\n  } else {\n    // logSolution(solutions[0]);\n    return { solution: solutions[0] };\n  }\n}\n\nexport default solvePuzzle;\n","import { CellType, IGameData } from 'models/cellModels';\nimport { getGroupForCell } from './pencilmarks';\n\nexport interface IValidatePuzzleResult {\n  valid: boolean;\n  message: string;\n}\n\nfunction validatePuzzle(puzzle: IGameData): IValidatePuzzleResult {\n  const { cells } = puzzle;\n  let numberCount = 0;\n\n  // check that there is at least two groups with count > 1\n  // and that there are no groups with count 1\n  for (let index = 0; index < cells.length; index++) {\n    const cell = cells[index];\n\n    if (cell.type === CellType.NumberCell) {\n      numberCount += 1;\n\n      const row = getGroupForCell(puzzle, cell.index, 0);\n      if (row.count === 1) {\n        return {\n          valid: false,\n          message: 'There is at least one group across with only one cell',\n        };\n      }\n\n      const column = getGroupForCell(puzzle, cell.index, 1);\n      if (column.count === 1) {\n        return {\n          valid: false,\n          message: 'There is at least one group down with only one cell',\n        };\n      }\n    }\n  }\n\n  return numberCount < 3\n    ? { valid: false, message: 'Too few number cells' }\n    : { valid: true, message: 'Puzzle grid is fine' };\n}\n\nexport default validatePuzzle;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport kakuroApi from 'api/kakuroApi';\nimport { setErrorAlert, setSuccessAlert } from 'features/alerts/alertSlice';\nimport { addPuzzleToList, IListGame } from 'features/list/listSlice';\nimport authHeader from 'utils/authHeader';\nimport { checkPuzzle } from 'utils/checkPuzzle';\nimport { doCountMissingHints, doMakeHintCells } from 'utils/hintCells';\nimport preparePuzzle from 'utils/preparePuzzle';\nimport solvePuzzle from 'utils/solvePuzzle';\nimport validatePuzzle from 'utils/validateGrid';\nimport {\n  CellType,\n  IBaseGame,\n  IGameData,\n  INumberCell,\n  PuzzleStates,\n} from 'models/cellModels';\nimport { AppThunk } from './store';\nimport { DesignStepsEnum } from 'models/designModels';\n\ntype DesignSliceState = {\n  activeStep: number;\n  puzzle: IGameData;\n};\n\nconst createGrid = (columns: number, rows: number) =>\n  Array.from({ length: columns * rows }, (item, index) => ({\n    index,\n    type: CellType.BlankCell,\n  }));\n\nconst initialState: DesignSliceState = {\n  activeStep: 0,\n  puzzle: {\n    name: 'Unnamed',\n    level: 4,\n    columnCount: 10,\n    rowCount: 10,\n    cells: createGrid(10, 10),\n    state: PuzzleStates.Raw,\n    hintCount: -1,\n    missingCells: -1,\n    hintMaps: [{}, {}],\n  },\n};\n\nexport const designSlice = createSlice({\n  name: 'design',\n  initialState,\n  reducers: {\n    setActiveStep: (state, action) => {\n      state.activeStep = action.payload;\n    },\n    setBaseGame: (state, action: PayloadAction<IBaseGame>) => {\n      const oldCols = state.puzzle.columnCount;\n      const oldRows = state.puzzle.rowCount;\n\n      const newPuzzle: IGameData = { ...state.puzzle, ...action.payload };\n\n      if (oldCols !== newPuzzle.columnCount || oldRows !== newPuzzle.rowCount) {\n        newPuzzle.cells = createGrid(newPuzzle.columnCount, newPuzzle.rowCount);\n      }\n\n      state.puzzle = newPuzzle;\n    },\n    clearDesignGame: () => {\n      localStorage.removeItem('designPuzzle');\n      return initialState;\n    },\n    setPuzzle: (state, action: PayloadAction<IGameData>) => {\n      const puzzle = action.payload;\n      state.puzzle = puzzle;\n      localStorage.setItem('designPuzzle', JSON.stringify(puzzle));\n\n      const res = validatePuzzle(puzzle);\n      if (res.valid) {\n        state.activeStep = DesignStepsEnum.InsertHints;\n\n        const res = checkPuzzle(puzzle);\n        if (res.valid) {\n          state.activeStep = DesignStepsEnum.CheckPuzzle;\n        }\n      }\n    },\n    updateCell: (state, action) => {\n      const newCell = action.payload;\n\n      if (\n        newCell.type === CellType.NumberCell &&\n        !(newCell as INumberCell).guess\n      ) {\n        (newCell as INumberCell).guess = 0;\n      }\n\n      state.puzzle.cells[newCell.index] = newCell;\n      state.puzzle.state = PuzzleStates.Raw;\n      state.puzzle.hintCount = doCountMissingHints(state.puzzle);\n    },\n    makeHintCells: state => {\n      // const newPuzzle = JSON.parse(JSON.stringify(state.puzzle));\n      // doMakeHintCells(newPuzzle);\n      // state.puzzle = newPuzzle;\n      doMakeHintCells(state.puzzle);\n    },\n    solveGameSuccess: (state, action: PayloadAction<IGameData>) => {\n      state.puzzle = action.payload;\n      state.puzzle.state = PuzzleStates.Solved;\n    },\n    solveGameFailed: state => {\n      state.puzzle.cells\n        .filter(c => c.type === CellType.NumberCell)\n        .forEach(c => ((c as INumberCell).solution = 0));\n      state.puzzle.state = PuzzleStates.Raw;\n      state.activeStep = DesignStepsEnum.InsertHints;\n    },\n    checkGameSuccess: state => {\n      state.puzzle.state = PuzzleStates.Valid;\n    },\n    createGameSuccess: () => {\n      // myHistory.push('/');\n      localStorage.removeItem('designPuzzle');\n      return initialState;\n    },\n  },\n});\n\nexport const {\n  checkGameSuccess,\n  clearDesignGame,\n  createGameSuccess,\n  setActiveStep,\n  setBaseGame,\n  setPuzzle,\n  makeHintCells,\n  solveGameSuccess,\n  solveGameFailed,\n  updateCell,\n} = designSlice.actions;\n\nexport default designSlice.reducer;\n\nexport const checkGame = (): AppThunk => async (dispatch: any, getState) => {\n  const { puzzle } = getState().design;\n  const isValid = checkPuzzle(puzzle);\n\n  if (isValid) {\n    dispatch(setSuccessAlert('Puzzle is valid.'));\n    dispatch(checkGameSuccess());\n  } else {\n    dispatch(setErrorAlert(`Puzzle invalid`));\n  }\n};\n\nexport const solveGame = (): AppThunk => async (dispatch: any, getState) => {\n  const { puzzle } = getState().design;\n  const result = solvePuzzle(puzzle);\n\n  if (result.error) {\n    dispatch(setErrorAlert(`Puzzle invalid: ${result.error}`));\n    dispatch(solveGameFailed());\n  } else {\n    dispatch(setSuccessAlert('Puzzle solved.'));\n    dispatch(solveGameSuccess(result.solution!));\n  }\n};\n\nexport interface IApiError {\n  code: number;\n  message: string;\n}\n\nexport const createGame =\n  (values: IGameData): AppThunk =>\n  async (dispatch: any) => {\n    // dispatch(submitting());\n    let puzzle = preparePuzzle(values);\n    let newPuzzle: IListGame;\n\n    try {\n      const response = await kakuroApi.post('/puzzles', puzzle, {\n        headers: authHeader(),\n      });\n      newPuzzle = response.data;\n    } catch (error) {\n      console.log('error:', JSON.stringify(error, null, 4));\n      dispatch(\n        setErrorAlert(\n          // `Error trying to save puzzle: ${(error as IApiError).message}`\n          `Error: Puzzle is already in database`\n        )\n      );\n      return;\n    }\n\n    dispatch(addPuzzleToList(newPuzzle));\n    dispatch(createGameSuccess());\n    dispatch(setSuccessAlert('Puzzle erzeugt.'));\n  };\n","import { CellType, ICell, INumberCell } from 'models/cellModels';\n\nfunction doCountMissingCells(cells: ICell[]): number {\n  return cells.filter(c => c.type === CellType.NumberCell && (c as INumberCell).guess === 0).length;\n}\n\nexport default doCountMissingCells;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport kakuroApi from 'api/kakuroApi';\nimport { setSuccessAlert, setWarningAlert } from 'features/alerts/alertSlice';\nimport { CellType, IGameData, IGuess, IHintCell, INumberCell, IToggleCombinationParams } from 'models/cellModels';\nimport authHeader from 'utils/authHeader';\nimport { checkGuessesCorrect } from 'utils/checkPuzzle';\nimport { clearGuesses, doClearPencilMarks } from 'utils/clearGuesses';\nimport doCountMissingCells from 'utils/doCountMissingCells';\nimport doSetGuess from 'utils/doSetGuess';\n// import getHints from 'utils/getHints';\nimport { makePencilmarks, singlePencilmarksToGuess } from 'utils/pencilmarks';\nimport { AppThunk } from './store';\n\n/* Types */\n\n/* State */\nexport type GameSliceState = {\n  zoomLevel: number;\n  game: IGameData;\n  selectedIndex?: number;\n  markWrong: boolean;\n  undoStack: string[];\n  redoStack: string[];\n};\n\nconst ZOOM_MIN = 3;\nconst ZOOM_MAX = 10;\n\nconst initialState: GameSliceState = {\n  zoomLevel: 6,\n  game: {\n    state: -1,\n    cells: [],\n    columnCount: -1,\n    rowCount: -1,\n    name: 'Dummy',\n    level: -1,\n    hintCount: -1,\n    missingCells: -1,\n    hintMaps: [{}, {}],\n  },\n  markWrong: JSON.parse(localStorage.getItem('kakuro-markWrong') || 'false'),\n  undoStack: [],\n  redoStack: [],\n};\n\nexport const gameSlice = createSlice({\n  name: 'game',\n  initialState,\n  reducers: {\n    setGameState(state, action: PayloadAction<IGameData>) {\n      state.game = action.payload;\n      state.undoStack = [];\n      state.redoStack = [];\n    },\n    setCurrentGameSuccess(state, action: PayloadAction<IGameData>) {\n      state.undoStack = [];\n      state.redoStack = [];\n      state.game = action.payload;\n      state.game.missingCells = doCountMissingCells(state.game.cells);\n      delete state.selectedIndex;\n      const currentGame = JSON.stringify(state.game);\n      localStorage.setItem('currentGame', currentGame);\n    },\n    setSelectedIndex(state, action: PayloadAction<number>) {\n      let newIndex = action.payload;\n      state.selectedIndex = newIndex;\n    },\n    increaseZoom(state, action: PayloadAction<number>) {\n      const delta = action.payload;\n\n      if (delta === 0) {\n        state.zoomLevel = initialState.zoomLevel;\n      } else {\n        const newValue = state.zoomLevel + delta;\n        if (newValue >= ZOOM_MIN && newValue <= ZOOM_MAX) {\n          state.zoomLevel = newValue;\n        }\n      }\n    },\n    setGuessSuccess(\n      state,\n      action: PayloadAction<{ newGame: IGameData; newMissingCells: number }>\n    ) {\n      state.undoStack.push(JSON.stringify(state.game));\n      state.redoStack = [];\n      const { newGame, newMissingCells } = action.payload;\n      state.game = newGame;\n\n      state.game.missingCells = newMissingCells;\n      localStorage.setItem('currentGame', JSON.stringify(state.game));\n    },\n    togglePencilMark(state, action: PayloadAction<IGuess>) {\n      state.undoStack.push(JSON.stringify(state.game));\n      state.redoStack = [];\n      const { index, guess } = action.payload;\n      const newGame: IGameData = JSON.parse(JSON.stringify(state.game));\n      const currentCell: INumberCell = newGame.cells[index] as INumberCell;\n\n      if (currentCell.type === CellType.NumberCell) {\n        const index = currentCell.pencilMarks.indexOf(guess);\n\n        if (guess === 0) {\n          currentCell.pencilMarks = [];\n        } else if (index < 0) {\n          // add new pencil mark\n          currentCell.pencilMarks.push(guess);\n          currentCell.pencilMarks.sort();\n        } else {\n          // remove existing pencil mark\n          currentCell.pencilMarks.splice(index, 1);\n        }\n        state.game = newGame;\n        localStorage.setItem('currentGame', JSON.stringify(state.game));\n      }\n    },\n    resetGame(state) {\n      state.undoStack.push(JSON.stringify(state.game));\n      state.redoStack = [];\n      state.selectedIndex = undefined;\n      state.game = clearGuesses(state.game);\n      state.game.missingCells = doCountMissingCells(state.game.cells);\n    },\n    toggleMarkWrong(state) {\n      state.markWrong = !state.markWrong;\n      localStorage.setItem('kakuro-markWrong', JSON.stringify(state.markWrong));\n    },\n    clearPencilMarks(state) {\n      state.undoStack.push(JSON.stringify(state.game));\n      state.redoStack = [];\n      state.game = doClearPencilMarks(state.game);\n    },\n    autoPencil(state) {\n      state.undoStack.push(JSON.stringify(state.game));\n      // set guesses where there is only one pencil mark option\n      singlePencilmarksToGuess(state.game!);\n      // calculate pencil marks\n      makePencilmarks(state.game!);\n      state.game.missingCells = doCountMissingCells(state.game.cells);\n    },\n    toggleCombination(state, action: PayloadAction<IToggleCombinationParams>) {\n      const { hintIndex, direction, combinationIndex } = action.payload;\n      const hCell = state.game.cells[hintIndex] as IHintCell;\n      const comb = hCell.hints[direction]?.combinations[combinationIndex];\n      if (comb) {\n        comb.excluded = !comb?.excluded;\n      }\n    },\n    undo(state) {\n      const oldGameString = state.undoStack.pop();\n      const game = JSON.parse(oldGameString!);\n      state.redoStack.push(JSON.stringify(state.game));\n      state.game = game;\n    },\n    redo(state) {\n      const oldGameString = state.redoStack.pop();\n      const game = JSON.parse(oldGameString!);\n      state.undoStack.push(JSON.stringify(state.game));\n      state.game = game;\n    },\n  },\n});\n\nexport const {\n  clearPencilMarks,\n  increaseZoom,\n  setGameState,\n  setSelectedIndex,\n  setCurrentGameSuccess,\n  setGuessSuccess,\n  autoPencil,\n  resetGame,\n  toggleCombination,\n  togglePencilMark,\n  toggleMarkWrong,\n  redo,\n  undo,\n} = gameSlice.actions;\n\nexport default gameSlice.reducer;\n\nexport const setCurrentGame =\n  (game: IGameData): AppThunk =>\n  async (dispatch: any) => {\n    localStorage.removeItem('currentGame');\n\n    const newGame: IGameData = JSON.parse(JSON.stringify(game));\n\n    // create pencilmarks for all number cells\n    newGame.cells\n      .filter(c => c.type === CellType.NumberCell)\n      .forEach(cell => {\n        const nCell = cell as INumberCell;\n        if (!nCell.guess) {\n          nCell.guess = 0;\n        }\n        if (!nCell.pencilMarks) {\n          nCell.pencilMarks = [];\n        }\n      });\n\n    dispatch(setCurrentGameSuccess(newGame));\n  };\n\nexport const setGuess =\n  ({ index, guess }: IGuess): AppThunk =>\n  async (dispatch, getState) => {\n    const { game } = getState().game;\n    const newGame: IGameData = JSON.parse(JSON.stringify(game));\n    const currentCell = newGame.cells[index] as INumberCell;\n    let newMissingCells;\n\n    if (currentCell.guess === 0 && guess !== 0) {\n      newMissingCells = game.missingCells - 1;\n    } else if (currentCell.guess > 0 && guess === 0) {\n      newMissingCells = game.missingCells + 1;\n    } else {\n      newMissingCells = game.missingCells;\n    }\n\n    doSetGuess(newGame, index, guess);\n\n    if (newMissingCells === 0) {\n      if (checkGuessesCorrect(newGame)) {\n        dispatch(setSuccessAlert('Puzzle solved. Congratulations!'));\n\n        if (game._id && getState().users.user) {\n          try {\n            await kakuroApi.post(\n              '/users/solved',\n              { id: game._id },\n              {\n                headers: authHeader(),\n              }\n            );\n          } catch (error) {\n            console.error(error);\n          }\n        }\n      } else {\n        dispatch(setWarningAlert('There are still mistakes in the puzzle'));\n      }\n    }\n\n    dispatch(setGuessSuccess({ newGame, newMissingCells }));\n  };\n","import { CellType, IGameData, IHintCell, INumberCell } from 'models/cellModels';\n\nexport const clearGuesses = (game: IGameData): IGameData => {\n  const newGame: IGameData = JSON.parse(JSON.stringify(game));\n\n  newGame.cells\n    .filter(c => c.type === CellType.NumberCell)\n    .forEach(c => {\n      (c as INumberCell).guess = 0;\n      (c as INumberCell).pencilMarks = [];\n    });\n\n  newGame.cells\n    .filter(c => c.type === CellType.HintCell)\n    .forEach(c => {\n      const hints = (c as IHintCell).hints;\n      hints.forEach(hint => {\n        if (hint) {\n          hint.sumGuessed = 0;\n          hint.usedDigits = [];\n          hint.combinations.forEach(c => {\n            c.excluded = false;\n            c.impossible = false;\n          });\n        }\n      });\n    });\n\n  return newGame;\n};\n\nexport const doClearPencilMarks = (game: IGameData): IGameData => {\n  const newGame: IGameData = JSON.parse(JSON.stringify(game));\n\n  newGame.cells\n    .filter(c => c.type === CellType.NumberCell)\n    .forEach(c => {\n      (c as INumberCell).pencilMarks = [];\n    });\n\n  return newGame;\n};\n","import fileDownload from 'js-file-download';\nimport { Button } from 'primereact/button';\nimport { Dialog } from 'primereact/dialog';\nimport { InputTextarea } from 'primereact/inputtextarea';\nimport React, { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../../store/store';\nimport styles from './SaveGame.module.scss';\n\nconst ExportButton: React.FC = () => {\n  const [exportVisible, setExportVisible] = useState(false);\n  const [puzzleJSON, setPuzzleJSON] = useState('');\n  const { puzzle } = useSelector((state: RootState) => state.design);\n\n  useEffect(() => {\n    if (exportVisible) {\n      setPuzzleJSON(JSON.stringify(puzzle, null, 4));\n    }\n  }, [exportVisible, puzzle]);\n\n  const handleDownload = () => {\n    const blob = new Blob([puzzleJSON]);\n    const filename = `kakuro-${puzzle.columnCount}x${puzzle.rowCount}.json`;\n    fileDownload(blob, filename);\n  };\n\n  return (\n    <>\n      <Button\n        label='Export Puzzle'\n        icon='mdi mdi-export'\n        onClick={() => setExportVisible(true)}\n        className={styles.button}\n      />\n\n      <Dialog\n        header='Spiel exportieren'\n        visible={exportVisible}\n        style={{ width: '50vw', height: '70vh' }}\n        modal\n        onHide={() => setExportVisible(false)}>\n        <InputTextarea\n          rows={8}\n          style={{ width: '100%', height: 'calc(100% - 48px)', fontFamily: 'monospace' }}\n          value={puzzleJSON}\n        />\n        <Button\n          icon='mdi mdi-download'\n          label='Download'\n          className={styles.button}\n          onClick={handleDownload}\n        />\n        <Button\n          icon='mdi mdi-close'\n          label='Close'\n          className={styles.button}\n          onClick={() => setExportVisible(false)}\n        />\n      </Dialog>\n    </>\n  );\n};\n\nexport default ExportButton;\n","import { designSteps } from 'models/designModels';\nimport { Button } from 'primereact/button';\nimport { Panel } from 'primereact/panel';\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../../store/store';\nimport ExportButton from './ExportButton';\n\ninterface Props {\n  children?: JSX.Element | JSX.Element[];\n  handleBack?: () => void;\n  handleNext?: () => void;\n}\n\nconst DesignPanel: React.FC<Props> = props => {\n  const { handleBack, handleNext, children } = props;\n  const { activeStep } = useSelector((state: RootState) => state.design);\n\n  const headerTemplate = (options: any) => {\n    const className = `${options.className} p-jc-start`;\n    const titleClassName = `${options.titleClassName} p-pl-1`;\n\n    return (\n      <div className={className}>\n        <span className={titleClassName}>\n          Step {activeStep + 1}: {designSteps[activeStep].label}\n        </span>\n\n        <span className={titleClassName}>\n          <ExportButton />\n\n          <Button\n            label='Back'\n            icon='mdi mdi-arrow-left'\n            onClick={handleBack}\n            disabled={handleBack == null}\n            type='button'\n          />\n\n          <Button\n            label='Next'\n            icon='mdi mdi-arrow-right'\n            onClick={handleNext}\n            // disabled={activeStep === designSteps.length - 1}\n            disabled={handleNext == null}\n            type='button'\n          />\n        </span>\n      </div>\n    );\n  };\n\n  return <Panel headerTemplate={headerTemplate}>{children}</Panel>;\n};\n\nexport default DesignPanel;\n","import classNames from 'classnames';\nimport { CellType, IHintCell } from 'models/cellModels';\nimport { Button } from 'primereact/button';\nimport { Dialog } from 'primereact/dialog';\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState } from 'store/store';\nimport combinations from 'utils/combinations';\nimport { getGroupForCell } from 'utils/pencilmarks';\nimport { updateCell } from '../../store/designSlice';\nimport styles from './HintDialog.module.scss';\n\nexport interface Props {\n  cell: IHintCell;\n  across: boolean;\n  down: boolean;\n  visible: boolean;\n  onHide: () => void;\n}\n\nconst HintDialog: React.FC<Props> = ({\n  cell,\n  across,\n  down,\n  visible,\n  onHide,\n}) => {\n  const { puzzle } = useSelector((state: RootState) => state.design);\n  const [options, setOptions] = useState<number[]>([]);\n  const dispatch = useDispatch();\n\n  const handleClick = (n: number, acrossHint: boolean) => {\n    // const newCell: IHintCell = { ...cell, type: CellType.HintCell };\n    const newCell: IHintCell = JSON.parse(JSON.stringify(cell));\n\n    if (acrossHint) {\n      newCell.hints[0]!.sumSolved = n;\n    } else {\n      newCell.hints[1]!.sumSolved = n;\n    }\n\n    dispatch(updateCell(newCell));\n    if (!acrossHint || !down) {\n      onHide();\n    }\n  };\n\n  const renderButtons = (across: boolean) => {\n    const groupData = getGroupForCell(\n      puzzle,\n      cell.index + (across ? 1 : puzzle.columnCount),\n      across ? 0 : 1\n    );\n\n    const combs = Object.keys(combinations[groupData.count]).map(e => +e);\n    const minSum = Math.min(...combs);\n    const maxSum = Math.max(...combs);\n\n    return (\n      <div className=''>\n        <div className={styles.label}>{across ? 'Across' : 'Down'}</div>\n        <div className={styles.buttonGrid}>\n          {options.map(n => (\n            <Button\n              key={n}\n              label={n < minSum || n > maxSum ? '' : '' + n}\n              onClick={() => handleClick(n, across)}\n              disabled={n < minSum || n > maxSum}\n              className={classNames(\n                'p-button-rounded',\n                styles.button,\n                across ? 'p-button-success' : 'p-button-info'\n              )}\n            />\n          ))}\n        </div>\n      </div>\n    );\n  };\n\n  useEffect(() => {\n    const numbers = Array.from({ length: 46 }, (e, i) => i);\n    setOptions(numbers);\n  }, []);\n\n  return (\n    <Dialog\n      className={styles.dialog}\n      header='Set number(s) for hint cell'\n      visible={visible}\n      modal={true}\n      onHide={onHide}>\n      {across && renderButtons(true)}\n      {down && renderButtons(false)}\n    </Dialog>\n  );\n};\n\nexport default HintDialog;\n","import classnames from 'classnames';\nimport { CellType, ICell, IHintCell, INumberCell } from 'models/cellModels';\nimport { DesignStepsEnum } from 'models/designModels';\nimport React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { updateCell } from '../../store/designSlice';\nimport { RootState } from '../../store/store';\nimport '../playing/Cell.scss';\nimport '../playing/HintCell.scss';\nimport styles from './DesignCell.module.scss';\nimport HintDialog from './HintDialog';\n\nexport interface Props {\n  cell: ICell;\n  index: number;\n}\n\nconst DesignCell: React.FC<Props> = ({ cell, index }) => {\n  const { activeStep } = useSelector((state: RootState) => state.design);\n  const dispatch = useDispatch();\n  const [dialogVisible, setDialogVisible] = useState(false);\n  const { debugMode } = useSelector((state: RootState) => state.users);\n\n  const hide = () => {\n    setDialogVisible(false);\n  };\n\n  const handleClick = (e: React.MouseEvent) => {\n    if (activeStep === DesignStepsEnum.DrawGrid) {\n      // Toggle between blank and number cell\n      const newCell = {\n        ...cell,\n        type:\n          cell.type === CellType.NumberCell\n            ? CellType.BlankCell\n            : CellType.NumberCell,\n      };\n      dispatch(updateCell(newCell));\n    } else if (activeStep === 2 && cell.type === CellType.HintCell) {\n      // Show dialog to pick hint value\n      setDialogVisible(true);\n    }\n  };\n\n  const renderHint = (value: number | undefined) => {\n    if (value != null) {\n      const hintStr = value > 0 ? value : '?';\n      const hintClass = value > 0 ? '' : styles.hintMissing;\n      return <div className={hintClass}>{hintStr}</div>;\n    } else {\n      return null;\n    }\n  };\n\n  const numberCell =\n    cell.type === CellType.NumberCell ? (cell as INumberCell) : null;\n  const hasNumber = numberCell && numberCell.solution > 0;\n  const pm = numberCell && !hasNumber ? (cell as INumberCell).pencilMarks?.join('') : null;\n  const hintCell = cell.type === CellType.HintCell ? (cell as IHintCell) : null;\n\n  return (\n    <>\n      <div\n        className={classnames(styles.designCell, cell.type)}\n        onClick={handleClick}>\n        {hintCell && (\n          <>\n            <div className='horizontalHint'>\n              {renderHint(hintCell.hints[0]?.sumSolved)}\n            </div>\n            <div className='verticalHint'>\n              {renderHint(hintCell.hints[1]?.sumSolved)}\n            </div>\n          </>\n        )}\n        {hasNumber && <div className={styles.solution}>{numberCell.solution}</div>}\n        {pm && <div className={styles.pencilmarks}>{pm}</div>}\n        {debugMode && <div className={styles.debug}>{cell.index}</div>}\n      </div>\n\n      {activeStep === DesignStepsEnum.InsertHints && hintCell && (\n        <HintDialog\n          cell={hintCell}\n          visible={dialogVisible}\n          onHide={hide}\n          across={hintCell.hints[0] != null}\n          down={hintCell.hints[1] != null}\n        />\n      )}\n    </>\n  );\n};\n\nexport default DesignCell;\n","import { ICell } from 'models/cellModels';\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../../store/store';\nimport DesignCell from './DesignCell';\nimport styles from './DrawGrid.module.scss';\n\nconst DrawGrid: React.FC = () => {\n  const { puzzle } = useSelector((state: RootState) => state.design);\n  const { columnCount, cells } = puzzle;\n  const { debugMode } = useSelector((state: RootState) => state.users);\n\n  return (\n    <div>\n      <div className={styles.gameBackground}>\n        <div\n          className={styles.grid}\n          style={{\n            gridTemplateColumns: `repeat(${columnCount}, 1fr)`,\n          }}>\n          {cells.map((c, i) => (\n            <DesignCell key={i} index={i} cell={c as ICell} />\n          ))}\n        </div>\n      </div>\n\n      {debugMode && (\n        <div className='debugWindow'>\n          <pre>{JSON.stringify(puzzle, null, 4)}</pre>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default DrawGrid;\n","import classNames from 'classnames';\nimport { IGameData, PuzzleStates } from 'models/cellModels';\nimport myHistory from 'myHistory';\nimport { Button } from 'primereact/button';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  clearDesignGame,\n  createGame,\n  setActiveStep,\n  setPuzzle,\n  solveGame\n} from 'store/designSlice';\nimport { setCurrentGame } from 'store/gameSlice';\nimport { checkAllSolved } from 'utils/checkPuzzle';\nimport { makePencilmarks, singlePencilmarksToGuess } from 'utils/pencilmarks';\nimport { RootState } from '../../store/store';\nimport DesignPanel from './DesignPanel';\nimport DrawGrid from './DrawGrid';\nimport styles from './SaveGame.module.scss';\n\nconst SaveGame: React.FC = () => {\n  const dispatch = useDispatch();\n  const { activeStep, puzzle } = useSelector(\n    (state: RootState) => state.design\n  );\n\n  const handleBack = () => {\n    dispatch(setActiveStep(activeStep - 1));\n  };\n\n  const handlePlay = () => {\n    dispatch(setCurrentGame(puzzle));\n    myHistory.push('/play');\n  };\n\n  const handleSolve = () => {\n    dispatch(solveGame());\n  };\n\n  const handleSolveStep = () => {\n    console.log('handleSolveStep');\n\n    const newPuzzle: IGameData = JSON.parse(JSON.stringify(puzzle));\n    makePencilmarks(newPuzzle);\n    singlePencilmarksToGuess(newPuzzle);\n\n    if (checkAllSolved(newPuzzle)) {\n      newPuzzle.state = PuzzleStates.Solved;\n    }\n\n    dispatch(setPuzzle(newPuzzle));\n  };\n\n  const handleSolveMultiple = () => {\n    const newPuzzle: IGameData = JSON.parse(JSON.stringify(puzzle));\n    makePencilmarks(newPuzzle);\n    while (singlePencilmarksToGuess(newPuzzle)) {\n      makePencilmarks(newPuzzle);\n    }\n\n    if (checkAllSolved(newPuzzle)) {\n      newPuzzle.state = PuzzleStates.Solved;\n    }\n\n    dispatch(setPuzzle(newPuzzle));\n  };\n\n  const handleSend = () => {\n    dispatch(createGame(puzzle));\n  };\n\n  const handleClear = () => {\n    dispatch(clearDesignGame());\n  };\n\n  return (\n    <DesignPanel handleBack={handleBack}>\n      <>\n        <Button\n          label='Solve Step'\n          icon='mdi mdi-brain'\n          onClick={handleSolveStep}\n          className={styles.button}\n        />\n\n        <Button\n          label='Solve Multiple'\n          icon='mdi mdi-brain'\n          onClick={handleSolveMultiple}\n          className={styles.button}\n        />\n\n        <Button\n          label='Solve Puzzle'\n          icon='mdi mdi-brain'\n          onClick={handleSolve}\n          className={styles.button}\n        />\n\n        <Button\n          label='Send to Server & Play'\n          icon='mdi mdi-send'\n          onClick={handleSend}\n          className={styles.button}\n          disabled={puzzle.state !== PuzzleStates.Solved}\n        />\n\n        <Button\n          label='Play Locally'\n          icon='mdi mdi-play'\n          onClick={handlePlay}\n          className={styles.button}\n        />\n\n        <Button\n          label='Start Over'\n          icon='mdi mdi-restart'\n          onClick={handleClear}\n          className={classNames(\n            styles.button,\n            'p-button-warning',\n            'p-button-success'\n          )}\n        />\n      </>\n\n      <DrawGrid />\n    </DesignPanel>\n  );\n};\n\nexport default SaveGame;\n","import { setErrorAlert } from 'features/alerts/alertSlice';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { makeHintCells, setActiveStep } from 'store/designSlice';\nimport validatePuzzle from 'utils/validateGrid';\nimport { RootState } from '../../store/store';\nimport DesignPanel from './DesignPanel';\nimport DrawGrid from './DrawGrid';\n\nconst SetCells: React.FC = () => {\n  const { activeStep, puzzle } = useSelector(\n    (state: RootState) => state.design\n  );\n  const dispatch = useDispatch();\n\n  const handleBack = () => {\n    dispatch(setActiveStep(activeStep - 1));\n  };\n\n  const handleNext = () => {\n    const res = validatePuzzle(puzzle);\n    if (res.valid) {\n      dispatch(makeHintCells());\n      dispatch(setActiveStep(activeStep + 1));\n    } else {\n      dispatch(setErrorAlert(res.message));\n    }\n  };\n\n  return (\n    <DesignPanel handleBack={handleBack} handleNext={handleNext}>\n      <DrawGrid />\n    </DesignPanel>\n  );\n};\n\nexport default SetCells;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport { setErrorAlert } from 'features/alerts/alertSlice';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { makeHintCells, setActiveStep } from 'store/designSlice';\nimport { checkPuzzle } from 'utils/checkPuzzle';\nimport { RootState } from '../../store/store';\nimport DesignPanel from './DesignPanel';\nimport DrawGrid from './DrawGrid';\n\nconst SetHints: React.FC = () => {\n  const { activeStep, puzzle } = useSelector(\n    (state: RootState) => state.design\n  );\n  const dispatch = useDispatch();\n\n  const handleBack = () => {\n    dispatch(setActiveStep(activeStep - 1));\n  };\n\n  const handleNext = () => {\n    const res = checkPuzzle(puzzle);\n\n    if (res.valid) {\n      dispatch(makeHintCells());\n      dispatch(setActiveStep(activeStep + 1));\n    } else {\n      dispatch(setErrorAlert(res.error || 'Error in puzzle'));\n    }\n  };\n\n  return (\n    <DesignPanel handleNext={handleNext} handleBack={handleBack}>\n      <DrawGrid />\n      <div className='notes'>Missing hints: {puzzle.hintCount}</div>\n    </DesignPanel>\n  );\n};\n\nexport default SetHints;\n","import { ErrorMessage, Field } from 'formik';\nimport React from 'react';\n\ninterface Props {\n  name: string;\n  label: string;\n  as: any;\n  hint?: string;\n  [key: string]: any;\n}\n\nconst MyInput: React.FC<Props> = props => {\n  const { label, name, hint } = props;\n\n  return (\n    <div className='field grid'>\n      {/* <label htmlFor={name} className='block text-900 font-medium mb-2'> */}\n      <label htmlFor={name} className='col-12 mb-2 md:col-2 md:mb-0'>\n        {label}\n      </label>\n\n      <div className='col-12 md:col-10'>\n        {/* <Field {...props} className='w-full mb-3' /> */}\n        <Field {...props} className=\"inputfield w-full\" />\n        {hint && <div dangerouslySetInnerHTML={{ __html: hint }} />}\n        <ErrorMessage\n          name={name}\n          component='div'\n          className='fieldErrorMessage'\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default MyInput;\n","import {\n  SelectButton,\n  SelectButtonChangeParams,\n} from 'primereact/selectbutton';\nimport React from 'react';\n\ninterface Props {\n  field: string;\n  label: string;\n  values: { [key: string]: any };\n  options: any;\n  setFieldValue: (label: string, newValue: number) => void;\n}\n\nconst MySlider: React.FC<Props> = ({\n  values,\n  field,\n  label,\n  options,\n  setFieldValue,\n}) => {\n  const handleChange = (event: SelectButtonChangeParams) => {\n    setFieldValue(field, event.value as number);\n  };\n\n  return (\n    <div className='field grid'>\n      <label htmlFor={field} className='col-12 mb-2 md:col-2 md:mb-0'>\n        {label}\n      </label>\n\n      <div className='col-12 md:col-10'>\n        <SelectButton\n          id={field}\n          value={values[field]}\n          options={options}\n          onChange={event => handleChange(event)}\n          className='justify-content-start'\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default MySlider;\n","import { InputNumber } from 'primereact/inputnumber';\nimport { Slider, SliderChangeParams } from 'primereact/slider';\nimport React from 'react';\n\ninterface Props {\n  field: string;\n  label: string;\n  values: { [key: string]: any };\n  min?: number;\n  max?: number;\n  setFieldValue: (label: string, newValue: number) => void;\n}\n\nconst MySlider: React.FC<Props> = ({\n  values,\n  field,\n  label,\n  setFieldValue,\n  min,\n  max,\n}) => {\n  const handleChange = (event: SliderChangeParams) => {\n    setFieldValue(field, event.value as number);\n  };\n\n  return (\n    <div className='field grid'>\n      <label htmlFor={field} className='col-12 mb-2 md:col-2 md:mb-0'>\n        {label}\n      </label>\n\n      <div className='col-12 md:col-10'>\n        <InputNumber\n          value={values[field]}\n          onChange={event => handleChange(event)}\n          className='inputfield w-full'\n        />\n\n        <Slider\n          id={field}\n          value={values[field]}\n          onChange={event => handleChange(event)}\n          min={min}\n          max={max}\n          className='inputfield w-full'\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default MySlider;\n","export const difficultyLevels = {\n  0: 'Easy',\n  1: 'Medium',\n  2: 'Medium Plus',\n  3: 'Hard',\n  4: 'Very Hard',\n};\n\nexport const difficultyLabels = [\n  {\n    label: 'Easy',\n    value: 0,\n  },\n  {\n    label: 'Medium',\n    value: 1,\n  },\n  {\n    label: 'Medium Plus',\n    value: 2,\n  },\n  {\n    label: 'Hard',\n    value: 3,\n  },\n  {\n    label: 'Very Hard',\n    value: 4,\n  },\n];\n","import classNames from 'classnames';\nimport { Button } from 'primereact/button';\nimport { Dialog } from 'primereact/dialog';\nimport { InputTextarea } from 'primereact/inputtextarea';\nimport React, { useCallback, useState } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport { useDispatch } from 'react-redux';\nimport { setPuzzle } from 'store/designSlice';\nimport { IGameData } from 'models/cellModels';\nimport styles from './ImportDialog.module.scss';\n\nconst SetSize: React.FC = () => {\n  const [importVisible, setImportVisible] = useState(false);\n  const [puzzleJSON, setPuzzleJSON] = useState('');\n  const dispatch = useDispatch();\n\n  const onDrop = useCallback(acceptedFiles => {\n    acceptedFiles.forEach((file: File) => {\n      const reader = new FileReader();\n\n      reader.onabort = () => console.log('file reading was aborted');\n      reader.onerror = () => console.log('file reading has failed');\n      reader.onload = () => {\n        if (reader.result) {\n          setPuzzleJSON(reader.result as string);\n        }\n      };\n\n      reader.readAsText(file);\n    });\n  }, []);\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop });\n\n  const handleImport = (e: React.MouseEvent) => {\n    const newPuzzle: IGameData = JSON.parse(puzzleJSON);\n    setImportVisible(false);\n    dispatch(setPuzzle(newPuzzle));\n  };\n\n  return (\n    <>\n      <Button\n        label='Import Puzzle'\n        icon='mdi mdi-import'\n        onClick={() => setImportVisible(true)}\n        className={styles.button}\n      />\n\n      <Dialog\n        header='Spiel importieren'\n        visible={importVisible}\n        className={styles.dialog}\n        modal\n        onHide={() => setImportVisible(false)}>\n        <div\n          {...getRootProps()}\n          // className={classNames(isDragActive && styles.dragging)}\n        >\n          <input {...getInputProps()} />\n          {isDragActive ? (\n            <p>Drop the files here ...</p>\n          ) : (\n            <>\n              <p>Drag 'n' drop some files here, or click to select files</p>\n            </>\n          )}\n          <InputTextarea\n            className={classNames(\n              styles.textarea,\n              isDragActive && styles.dragging\n            )}\n            // style={{ width: '100%', height: '70vh' }}\n            value={puzzleJSON}\n            onChange={event => setPuzzleJSON(event.target.value)}\n          />\n        </div>\n\n        <Button\n          label='Import'\n          onClick={handleImport}\n          disabled={puzzleJSON === ''}\n          className={styles.button}\n        />\n      </Dialog>\n    </>\n  );\n};\n\nexport default SetSize;\n","import MyInput from 'components/MyInput';\nimport MySelectButton from 'components/MySelectButton';\nimport MySlider from 'components/MySlider';\nimport { Form, Formik, FormikProps } from 'formik';\nimport { IBaseGame } from 'models/cellModels';\nimport { InputText } from 'primereact/inputtext';\nimport React, { useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setActiveStep, setBaseGame } from 'store/designSlice';\nimport { difficultyLabels } from 'types/puzzle';\nimport * as Yup from 'yup';\nimport { RootState } from '../../store/store';\nimport DesignPanel from './DesignPanel';\nimport ImportDialog from './ImportDialog';\n\nconst minColumns = 4;\n\nconst PuzzleSchema = Yup.object().shape({\n  name: Yup.string()\n    .max(50, 'Must be 50 characters or less')\n    .required('Required'),\n  level: Yup.number().min(0).max(4).required(),\n  columnCount: Yup.number()\n    .min(minColumns, `Must be between ${minColumns} and 30`)\n    .max(30)\n    .required('Required'),\n  rowCount: Yup.number()\n    .min(minColumns, `Must be between ${minColumns} and 30`)\n    .max(30)\n    .required('Required'),\n});\n\nconst SetSize: React.FC = () => {\n  const dispatch = useDispatch();\n  const { activeStep, puzzle } = useSelector(\n    (state: RootState) => state.design\n  );\n  const initialValues: IBaseGame = puzzle;\n  // const formikRef = useRef<FormikProps<FormikValues>>(null);\n  const formikRef = useRef<FormikProps<IBaseGame>>(null);\n\n  const handleNext = () => {\n    if (formikRef.current) {\n      formikRef.current.handleSubmit();\n    }\n\n    dispatch(setActiveStep(activeStep + 1));\n  };\n\n  const handleSubmit = (values: IBaseGame) => {\n    dispatch(setBaseGame(values));\n  };\n\n  return (\n    <Formik\n      enableReinitialize\n      initialValues={initialValues}\n      onSubmit={handleSubmit}\n      validationSchema={PuzzleSchema}\n      innerRef={formikRef}>\n      {({ setFieldValue, values }) => (\n        <DesignPanel handleNext={handleNext}>\n          <h1>Import Puzzle</h1>\n\n          <ImportDialog />\n\n          <h1>…Or Create Puzzle</h1>\n          <Form>\n            <MyInput name='name' label='Puzzle Name' as={InputText} />\n\n            <MySelectButton\n              field='level'\n              label='Difficulty'\n              setFieldValue={setFieldValue}\n              options={difficultyLabels}\n              values={values}\n            />\n\n            <MySlider\n              field='columnCount'\n              label='Columns Across'\n              setFieldValue={setFieldValue}\n              min={minColumns}\n              max={40}\n              values={values}\n            />\n\n            <MySlider\n              field='rowCount'\n              label='Rows Down'\n              setFieldValue={setFieldValue}\n              min={minColumns}\n              max={40}\n              values={values}\n            />\n\n            {/* <Button type='submit' label='Set Size' className='' /> */}\n          </Form>\n        </DesignPanel>\n      )}\n    </Formik>\n  );\n};\n\nexport default SetSize;\n","import { designSteps } from 'models/designModels';\nimport { Panel } from 'primereact/panel';\nimport { Steps } from 'primereact/steps';\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setPuzzle } from 'store/designSlice';\nimport { RootState } from '../../store/store';\nimport styles from './CreateGame.module.scss';\nimport SaveGame from './SaveGame';\nimport SetCells from './SetCells';\nimport SetHints from './SetHints';\nimport SetSize from './SetSize';\n\nconst CreateGame: React.FC = () => {\n  const dispatch = useDispatch();\n  const { activeStep } = useSelector((state: RootState) => state.design);\n\n  useEffect(() => {\n    const puzzleJSON = localStorage.getItem('designPuzzle');\n    if (puzzleJSON) {\n      console.log('Found puzzle in local storage');\n      const puzzle = JSON.parse(puzzleJSON);\n      dispatch(setPuzzle(puzzle));\n    }\n  }, [dispatch]);\n\n  return (\n    <div className={styles.createGame}>\n      <Panel header='Create a new Kakuro puzzle'>\n        <div className={styles.createSteps}>\n          <Steps model={designSteps} activeIndex={activeStep} />\n        </div>\n      </Panel>\n\n      {activeStep === 0 && <SetSize />}\n      {activeStep === 1 && <SetCells />}\n      {activeStep === 2 && <SetHints />}\n      {activeStep === 3 && <SaveGame />}\n    </div>\n  );\n};\n\nexport default CreateGame;\n","import { format } from 'date-fns';\nimport { Column } from 'primereact/column';\nimport { DataTable } from 'primereact/datatable';\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState } from 'store/store';\nimport { difficultyLevels } from 'types/puzzle';\nimport { fetchList, fetchSolved, IListGame, setChoiceID } from './listSlice';\n\nconst PuzzleList: React.FC = () => {\n  const { user } = useSelector((state: RootState) => state.users);\n  const { list, choice, solved } = useSelector(\n    (state: RootState) => state.list\n  );\n  const dispatch = useDispatch();\n  const filtered = (list && user) ? list.filter(p => !solved.includes(p._id!)) : list;\n\n  useEffect(() => {\n    dispatch(fetchList());\n    if (user) {\n      dispatch(fetchSolved());\n    }\n  }, [dispatch, user]);\n\n  const formatDate = (date: Date) => format(date, 'dd-MM-yyyy');\n\n  const difficultyTemplate = (puzzle: IListGame) =>\n    difficultyLevels[puzzle.level];\n\n  const dateTemplate = (puzzle: IListGame) =>\n    formatDate(new Date(puzzle.createdAt));\n\n  const solvedTemplate = (puzzle: IListGame) => {\n    if (!puzzle._id) {\n      return 'Unknown';\n    }\n\n    return solved.includes(puzzle._id) ? <i className='mdi mdi-check'></i> : '';\n  };\n\n  return (\n    // <Panel header='List of Puzzles'>\n    <DataTable\n      value={filtered}\n      autoLayout\n      stripedRows\n      className='p-datatable-sm'\n      scrollable\n      scrollHeight='60vh'\n      selectionMode='single'\n      selection={choice}\n      onSelectionChange={e => dispatch(setChoiceID(e.value))}\n      dataKey='_id'\n      style={{ width: '80vw' }}\n      stateStorage='local'\n      stateKey='kakuro-puzzle-list'>\n      <Column field='name' header='Puzzle name' sortable />\n      <Column\n        field='level'\n        header='Difficulty'\n        body={difficultyTemplate}\n        filter\n        sortable\n      />\n      <Column field='columnCount' header='Columns' sortable />\n      <Column field='rowCount' header='Rows' sortable />\n      <Column field='creatorName' header='Creator' filter sortable />\n      <Column field='createdAt' header='Date' body={dateTemplate} sortable />\n      {user && solved && (\n        <Column field='solved' header='Solved' body={solvedTemplate} />\n      )}\n    </DataTable>\n    // </Panel>\n  );\n};\n\nexport default PuzzleList;\n","import { IListGame } from 'features/list/listSlice';\nimport { CellType, IGameData, PuzzleStates } from 'models/cellModels';\nimport doCountMissingCells from './doCountMissingCells';\nimport { doMakeHintCells } from './hintCells';\n\nfunction makePlayable(input: IListGame): IGameData {\n  // convert each digit of cell string to proper cell\n  const cells = input.cellString.split('').map((char, index) => {\n    if (+char >= 1 && +char <= 9) {\n      return {\n        index,\n        type: CellType.NumberCell,\n        guess: 0,\n        solution: +char,\n        pencilMarks: [],\n      };\n    } else {\n      return { index, type: CellType.BlankCell };\n    }\n  });\n\n  // make hint cells\n  const newPuzzle: IGameData = {\n    ...input,\n    cells,\n    state: PuzzleStates.Solved,\n    hintCount: -1,\n    missingCells: doCountMissingCells(cells),\n    hintMaps: [{}, {}],\n  };\n\n  doMakeHintCells(newPuzzle, true);\n  return newPuzzle;\n}\n\nexport default makePlayable;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport classNames from 'classnames';\nimport { importPuzzle } from 'features/list/listSlice';\nimport PuzzleList from 'features/list/PuzzleList';\nimport myHistory from 'myHistory';\nimport { Button } from 'primereact/button';\nimport { Dropdown } from 'primereact/dropdown';\nimport React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setCurrentGame } from 'store/gameSlice';\nimport { RootState } from 'store/store';\nimport makePlayable from 'utils/makePlayable';\nimport styles from './MainMenu.module.scss';\n\n// menneske is <rows> x <columns>\nconst puzzleSizes = [\n  {label: ' 8x8', value: '8x8'},\n  {label: '10x10', value: '10x10'},\n  {label: '13x10', value: '10x13'},\n  {label: '13x13', value: '13x13'},\n  {label: '15x15', value: '15x15'},\n  {label: '20x20', value: '20x20'},\n  {label: '25x25', value: '25x25'},\n  {label: '30x15', value: '15x30'},\n  {label: '30x30', value: '30x30'},\n];\n\nconst MainMenu: React.FC = () => {\n  const { choice } = useSelector((state: RootState) => state.list);\n  const [puzzleSize, setPuzzleSize] = useState('20x20');\n  const dispatch = useDispatch();\n\n  const handleFetch = () => {\n    dispatch(importPuzzle(puzzleSize));\n  };\n\n  const handlePlay = () => {\n    const newPuzzle = makePlayable(choice!);\n    dispatch(setCurrentGame(newPuzzle));\n    myHistory.push('/play');\n  };\n\n  return (\n    <div className={styles.content}>\n      <div className='text-center'>\n        <div className='mb-3 font-bold text-2xl'>\n          <span className='text-900'>The best </span>\n          <span className='text-blue-600'>Kakuro Game </span>\n          <span className='text-900'>money can buy</span>\n        </div>\n        <div className='text-700 text-sm mb-6'>\n          All of this is work in progress, so be patient and stay tuned.\n        </div>\n\n        <div className={classNames('flex flex-row justify-content-center p-3', styles.bar)}>\n          <Dropdown\n            value={puzzleSize}\n            options={puzzleSizes}\n            onChange={e => setPuzzleSize(e.value)}\n            placeholder='Select a Grid Size'\n          />\n\n          <Button\n            label='Fetch game'\n            icon='mdi mdi-download-network'\n            className='p-button-lg'\n            onClick={handleFetch}\n          />\n          <Button\n            label='Create game'\n            icon='mdi mdi-pencil'\n            className='p-button-lg'\n            onClick={e => myHistory.push('/create')}\n          />\n          <Button\n            label='Start New Game!'\n            icon='mdi mdi-controller-classic'\n            className='p-button-lg'\n            onClick={handlePlay}\n            disabled={!choice}\n          />\n        </div>\n\n        <div className=''>\n          <PuzzleList />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default MainMenu;\n","// https://usehooks.com/useEventListener/\nimport { useEffect, useRef } from 'react';\n\nfunction useEventListener(eventName, handler, element = window) {\n  // Create a ref that stores handler\n  const savedHandler = useRef();\n  // Update ref.current value if handler changes.\n  // This allows our effect below to always get latest handler ...\n  // ... without us needing to pass it in effect deps array ...\n  // ... and potentially cause effect to re-run every render.\n  useEffect(() => {\n    savedHandler.current = handler;\n  }, [handler]);\n\n  useEffect(\n    () => {\n      // Make sure element supports addEventListener\n      // On\n      const isSupported = element && element.addEventListener;\n      if (!isSupported) return;\n      // Create event listener that calls handler function stored in ref\n      const eventListener = event => savedHandler.current(event);\n      // Add event listener\n      element.addEventListener(eventName, eventListener);\n      // Remove event listener on cleanup\n      return () => {\n        element.removeEventListener(eventName, eventListener);\n      };\n    },\n\n    [eventName, element] // Re-run if eventName or element changes\n  );\n}\n\nexport default useEventListener;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport {\n  setGuess,\n  setSelectedIndex,\n} from '../store/gameSlice';\nimport useEventListener from 'hooks/useEventListener';\nimport React, { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState } from 'store/store';\nimport { CellType, IGameData } from 'models/cellModels';\n\nconst KeyboardListener: React.FC = () => {\n  const dispatch = useDispatch();\n  const { game, selectedIndex } = useSelector((state: RootState) => state.game);\n  const { cells } = game as IGameData;\n\n  const selectCell = (newIndex: number) => {\n    if (\n      newIndex > game.columnCount &&\n      newIndex < cells.length &&\n      cells[newIndex].type === CellType.NumberCell\n    ) {\n      dispatch(setSelectedIndex(newIndex));\n    }\n  };\n\n  const handleKeyDown = useCallback(\n    ({ key }) => {\n      // console.log(`handleKeyDown(${key})`);\n\n      if (!selectedIndex) {\n        // do nothing if no cell selected\n        return;\n      }\n      if (key === 'ArrowUp' && game) {\n        selectCell(selectedIndex - game.columnCount);\n      } else if (key === 'ArrowDown' && game) {\n        selectCell(selectedIndex + game.columnCount);\n      } else if (key === 'ArrowLeft' && game) {\n        selectCell(selectedIndex - 1);\n      } else if (key === 'ArrowRight' && game) {\n        selectCell(selectedIndex + 1);\n      } else if (key >= '0' && key <= '9') {\n        dispatch(setGuess({ index: selectedIndex, guess: +key }));\n      } else if (key === 'Delete') {\n        dispatch(setGuess({ index: selectedIndex, guess: 0 }));\n      } else {\n        // console.log('Key pressed:', key);\n      }\n    },\n    [selectedIndex]\n  );\n\n  useEventListener('keydown', handleKeyDown);\n  return <></>;\n};\n\nexport default KeyboardListener;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport classNames from 'classnames';\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { CellType, ICombination, IHint } from 'models/cellModels';\nimport { toggleCombination } from 'store/gameSlice';\nimport getHintsForCell, { ICellHInts } from 'utils/getHintsForCell';\nimport { RootState } from '../../store/store';\nimport styles from './CombinationLine.module.scss';\n\nconst CombinationLine: React.FC = () => {\n  const dispatch = useDispatch();\n  const { selectedIndex, game } = useSelector((state: RootState) => state.game);\n  const { debugMode } = useSelector((state: RootState) => state.users);\n  const [cellHints, setCellHints] = useState<ICellHInts>();\n  const icons = [\n    <i className='mdi mdi-arrow-right' />,\n    <i className='mdi mdi-arrow-down' />,\n  ];\n\n  const handleToggleCombination = (\n    hintIndex: number,\n    direction: number,\n    combinationIndex: number\n  ) => {\n    dispatch(toggleCombination({ hintIndex, direction, combinationIndex }));\n  };\n\n  const renderDigit = (hint: IHint, combination: ICombination, d: number) => {\n    if (combination.excluded || combination.impossible) {\n      return <span>{d}</span>;\n    } else if (cellHints?.allUsed.includes(d)) {\n      return (\n        <span className={styles.usedDigit} key={d}>\n          {d}\n        </span>\n      );\n      // } else if (cellHints!.candidates.length < 5 && cellHints!.candidates.includes(d)) {\n    } else if (cellHints!.candidates.includes(d)) {\n      return (\n        <span className={styles.candidateDigit} key={d}>\n          {d}\n        </span>\n      );\n    } else {\n      return <span key={d}>{d}</span>;\n    }\n  };\n\n  const renderCombination = (hint: IHint, index: number, direction: number) => {\n    const combination = hint.combinations[index];\n    const excluded = combination.excluded && styles.excluded;\n    const impossible = combination.impossible && styles.impossible;\n\n    return (\n      <div\n        className={classNames(styles.possibility, excluded, impossible)}\n        key={index}\n        onClick={() => handleToggleCombination(hint.index, direction, index)}>\n        {combination.digits?.map(d => renderDigit(hint, combination, d))}\n      </div>\n    );\n  };\n\n  const renderCombinations = (hint: IHint, direction: number) => {\n    return hint.combinations.map((_, i) =>\n      renderCombination(hint, i, direction)\n    );\n  };\n\n  const renderLine = (direction: number) => {\n    const dirHints = cellHints!.hints[direction];\n\n    if (dirHints.sumSolved <= 0) {\n      return '\\u00a0';\n    } else {\n      return (\n        <>\n          <div className={styles.sumSolved}>\n            {dirHints.sumSolved}\n            {icons[direction]}\n          </div>\n          <div>{renderCombinations(dirHints, direction)}</div>\n        </>\n      );\n    }\n  };\n\n  useEffect(() => {\n    if (\n      selectedIndex &&\n      game.cells[selectedIndex].type === CellType.NumberCell\n    ) {\n      const ch = getHintsForCell(game, selectedIndex);\n      // console.log('ch', ch);\n\n      setCellHints(ch);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [game, selectedIndex]);\n\n  return (\n    <>\n      <div className={styles.combinations}>\n        {cellHints &&\n          [0, 1].map(dir => (\n            <div className={styles.column} key={dir}>\n              <div className={styles.text}>{renderLine(dir)}</div>\n            </div>\n          ))}\n      </div>\n      {debugMode && (\n        <div className='debugWindow'>\n          <pre>{JSON.stringify(cellHints, null, 4)}</pre>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default CombinationLine;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport classNames from 'classnames';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setGuess, togglePencilMark } from '../../store/gameSlice';\nimport { RootState } from '../../store/store';\nimport styles from './GuessButton.module.scss';\n\nexport interface Props {\n  digit: number;\n  pencilMark: boolean;\n}\n\nconst GuessButton: React.FC<Props> = ({ digit, pencilMark }) => {\n  const { selectedIndex } = useSelector((state: RootState) => state.game);\n  const dispatch = useDispatch();\n\n  const handleGuessClick = (event: React.MouseEvent) => {\n    if (digit >= 0 && digit <= 9 && selectedIndex) {\n      if (pencilMark) {\n        dispatch(togglePencilMark({ index: selectedIndex, guess: digit }));\n      } else {\n        dispatch(setGuess({ index: selectedIndex, guess: digit }));\n      }\n    }\n  };\n\n  return (\n    <div\n      className={classNames(\n        styles.guessButton,\n        pencilMark && styles.pencilMark,\n        styles.pencilMark1\n      )}\n      onClick={handleGuessClick}>\n      <div className={classNames(styles.digit, pencilMark && styles[`digit${digit}`])}>\n        {digit}\n      </div>\n    </div>\n  );\n};\n\nexport default GuessButton;\n","import { confirmDialog } from 'primereact/confirmdialog'; // To use <ConfirmDialog> tag\nimport { ToggleButton } from 'primereact/togglebutton';\nimport classnames from 'classnames';\nimport { Button } from 'primereact/button';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  autoPencil,\n  clearPencilMarks,\n  increaseZoom,\n  redo,\n  resetGame,\n  setGuess,\n  toggleMarkWrong,\n  togglePencilMark,\n  undo,\n} from '../../store/gameSlice';\nimport { RootState } from '../../store/store';\nimport styles from './Controls.module.scss';\nimport GuessButton from './GuessButton';\nimport { PuzzleStates } from 'models/cellModels';\n\n/*\n * Here be number buttons for guesses and pencil marks\n */\nconst Controls: React.FC = () => {\n  const { selectedIndex, zoomLevel, markWrong, game, undoStack, redoStack } =\n    useSelector((state: RootState) => state.game);\n  const dispatch = useDispatch();\n  const digits = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n\n  const handleZoom = (delta: number) => dispatch(increaseZoom(delta));\n\n  const handleDelete = (event: React.MouseEvent) => {\n    if (selectedIndex) {\n      dispatch(setGuess({ index: selectedIndex, guess: 0 }));\n    }\n  };\n\n  const handleRestart = (event: React.MouseEvent) => {\n    confirmDialog({\n      message: 'Are you sure you want to start over?',\n      header: 'Warning',\n      icon: 'pi pi-exclamation-triangle',\n      accept: () => dispatch(resetGame()),\n      // reject: () => rejectFunc()\n  });\n\n\n  };\n\n  const handleClearPencilMarks = (event: React.MouseEvent) => {\n    dispatch(clearPencilMarks());\n  };\n\n  const handleDeletePencilMarks = (event: React.MouseEvent) => {\n    if (selectedIndex) {\n      dispatch(togglePencilMark({ index: selectedIndex, guess: 0 }));\n    }\n  };\n\n  const handleAutoPencil = (event: React.MouseEvent) => {\n    dispatch(autoPencil());\n  };\n\n  const renderButton = (digit: number, pencilMark: boolean) => {\n    return <GuessButton key={digit} digit={digit} pencilMark={pencilMark} />;\n  };\n\n  return (\n    <aside className={classnames('controls', styles.controls)}>\n      <div className={styles.zoomButtons}>\n        <Button\n          className={''}\n          icon='mdi mdi-magnify-minus'\n          onClick={() => handleZoom(-1)}\n          disabled={zoomLevel < 1}\n        />\n        <Button\n          className={''}\n          label='100 %'\n          onClick={() => handleZoom(0)}\n        />\n        <Button\n          className={''}\n          icon='mdi mdi-magnify-plus'\n          onClick={() => handleZoom(1)}\n          disabled={zoomLevel > 10}\n        />\n      </div>\n\n      <div className={styles.guessButtons}>\n        <div className={styles.columns}>\n          {digits.map(d => renderButton(d, true))}\n        </div>\n\n        <Button\n          className={classnames(\n            'button',\n            'is-warning',\n            styles.button\n          )}\n          icon='mdi mdi-pencil-off'\n          label='Delete'\n          onClick={handleDeletePencilMarks}\n        />\n\n        <Button\n          className={classnames('button is-large', styles.button)}\n          onClick={handleAutoPencil}\n          label='Auto'\n          icon='mdi mdi-pencil'\n        />\n\n        <Button\n          className={classnames('button is-large', styles.button)}\n          onClick={handleClearPencilMarks}\n          label='Clear'\n          icon='mdi mdi-pencil-off'\n        />\n\n        <div className={styles.columns}>\n          {digits.map(d => renderButton(d, false))}\n        </div>\n\n        <Button\n          className={classnames(\n            'button',\n            'is-warning',\n            'is-large',\n            styles.button\n          )}\n          icon='mdi mdi-delete'\n          label='Delete'\n          onClick={handleDelete}\n        />\n\n        <Button\n          className={classnames(\n            'button',\n            'p-warning-button',\n            'is-large',\n            styles.button\n          )}\n          icon='mdi mdi-restart'\n          label='Start Over'\n          onClick={handleRestart}\n        />\n      </div>\n\n      <div className=''>\n        {game.state === PuzzleStates.Solved && (\n          <ToggleButton\n            checked={markWrong}\n            onLabel='Show mistakes'\n            offLabel='Hide mistakes'\n            onIcon='mdi mdi-eye'\n            offIcon='mdi mdi-eye-off'\n            onChange={() => dispatch(toggleMarkWrong())}\n          />\n        )}\n      </div>\n      <div className='undoredo'>\n        <Button\n          className={classnames('button', 'p-button-large', styles.button)}\n          icon='mdi mdi-undo'\n          label='Undo'\n          onClick={() => dispatch(undo())}\n          disabled={undoStack.length === 0}\n        />\n\n        <Button\n          className={classnames('button', 'p-warning-button', styles.button)}\n          icon='mdi mdi-redo'\n          label='Redo'\n          onClick={() => dispatch(redo())}\n          disabled={redoStack.length === 0}\n        />\n      </div>\n\n      <div className='debug'>\n        <div>Missing: {game.missingCells}</div>\n        <div>Selected: {selectedIndex}</div>\n      </div>\n    </aside>\n  );\n};\n\nexport default Controls;\n","export function calcBoardSize(columnCount: number, rowCount: number, zoomLevel: number) {\n  return { width: `${(columnCount) * zoomLevel * 10}px`, height: `${(rowCount) * zoomLevel * 10}px` };\n}\n\nexport function calcCellSize(zoomLevel: number) {\n  return { width: `${zoomLevel * 10}px`, height: `${zoomLevel * 10}px` };\n}\n\nexport function calcGuessFontSize(zoomLevel: number) {\n  return { fontSize: `${zoomLevel / 1.4}rem` };\n}\n\nexport function calcHintFontSize(zoomLevel: number) {\n  return { fontSize: `${zoomLevel / 3.5}rem` };\n}\n\nexport function calcPencilMarkFontSize(zoomLevel: number) {\n  return { fontSize: `${zoomLevel / 4.0}rem`, lineHeight: `${zoomLevel / 4.0}rem` };\n}\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport classnames from 'classnames';\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport { RootState } from 'store/store';\nimport { calcCellSize } from 'utils/calcCellSize';\nimport { IBlankCell } from 'models/cellModels';\nimport styles from './BlankCell.module.scss';\n\nexport interface Props {\n  cell: IBlankCell;\n  index: number;\n}\n\nconst BlankCell: React.FC<Props> = ({ cell, index }) => {\n  const { zoomLevel } = useSelector((state: RootState) => state.game);\n  const style = calcCellSize(zoomLevel);\n\n  return (\n    <div className={classnames('gamecell', styles.blank)} style={style}></div>\n  );\n};\n\nexport default BlankCell;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport classnames from 'classnames';\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport { RootState } from 'store/store';\nimport { calcCellSize, calcHintFontSize } from 'utils/calcCellSize';\nimport { IHintCell } from 'models/cellModels';\nimport './HintCell.scss';\n\nexport interface Props {\n  cell: IHintCell;\n  index: number;\n}\n\nconst HintCell: React.FC<Props> = ({ cell, index }) => {\n  const { zoomLevel } = useSelector((state: RootState) => state.game);\n  const style = calcCellSize(zoomLevel);\n  const fontSize = calcHintFontSize(zoomLevel);\n\n  return (\n    <div className={classnames('gamecell', 'hintCell')} style={style}>\n      <div className='horizontalHint' style={fontSize}>\n        {cell.hints[0]?.sumSolved}\n      </div>\n      <div className='verticalHint' style={fontSize}>\n        {cell.hints[1]?.sumSolved}\n      </div>\n    </div>\n  );\n};\n\nexport default HintCell;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport classnames from 'classnames';\nimport { INumberCell } from 'models/cellModels';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  calcCellSize,\n  calcGuessFontSize,\n  calcPencilMarkFontSize,\n} from 'utils/calcCellSize';\nimport { setSelectedIndex } from '../../store/gameSlice';\nimport { RootState } from '../../store/store';\nimport styles from './NumberCell.module.scss';\n\nexport interface Props {\n  cell: INumberCell;\n  index: number;\n}\n\nconst NumberCell: React.FC<Props> = ({ cell, index }) => {\n  const { selectedIndex, zoomLevel, markWrong } = useSelector(\n    (state: RootState) => state.game\n  );\n  const dispatch = useDispatch();\n  const guessFontSize = calcGuessFontSize(zoomLevel);\n  const pencilMarkFontSize = calcPencilMarkFontSize(zoomLevel);\n\n  const handleClick = (event: React.MouseEvent) => {\n    dispatch(setSelectedIndex(index));\n  };\n\n  const renderPencilMarks = (pencilMarks: number[]) => {\n    return pencilMarks.map(pm => (\n      <div key={pm} className={styles[`digit${pm}`]} style={pencilMarkFontSize}>\n        {pm}\n      </div>\n    ));\n  };\n\n  const cellStyle = calcCellSize(zoomLevel);\n\n  const wrongGuess =\n    markWrong && cell.solution > 0 && cell.guess !== cell.solution;\n\n  return (\n    <div\n      className={classnames('gamecell', styles.number, {\n        selected: index === selectedIndex,\n      })}\n      style={cellStyle}\n      onClick={handleClick}>\n      {cell.guess > 0 && (\n        <div\n          className={classnames(styles.guess, { wrongGuess })}\n          style={guessFontSize}>\n          {cell.guess}\n        </div>\n      )}\n      {!cell.guess && cell.pencilMarks?.length > 0 && (\n        <div className={classnames(styles.pencilMarks)} style={{}}>\n          {renderPencilMarks(cell.pencilMarks)}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default NumberCell;\n","import classnames from 'classnames';\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport { calcBoardSize } from 'utils/calcCellSize';\nimport {\n  CellType,\n  IBlankCell,\n  ICell,\n  IHintCell,\n  INumberCell,\n} from '../../models/cellModels';\nimport { RootState } from '../../store/store';\nimport BlankCell from './BlankCell';\nimport './Cell.scss';\nimport styles from './GameGrid.module.scss';\nimport HintCell from './HintCell';\nimport NumberCell from './NumberCell';\n\nconst GameGrid: React.FC = () => {\n  const { game, zoomLevel } = useSelector((state: RootState) => state.game);\n  const { columnCount, rowCount } = game;\n\n  const renderCell = (cell: ICell, index: number) => {\n    if (cell.type === CellType.BlankCell) {\n      return <BlankCell cell={cell as IBlankCell} index={index} key={index} />;\n    } else if (cell.type === CellType.HintCell) {\n      return <HintCell cell={cell as IHintCell} index={index} key={index} />;\n    } else {\n      // type == Number\n      return (\n        <NumberCell cell={cell as INumberCell} index={index} key={index} />\n      );\n    }\n  };\n\n  const renderGrid = () => {\n    return (\n      <div\n        className={classnames(styles.grid)}\n        style={{\n          gridTemplateColumns: `repeat(${game!.columnCount}, 1fr)`,\n          gridTemplateRows: `repeat(${game!.rowCount}, 1fr)`,\n        }}>\n        {game.cells.map((cell, i) => renderCell(cell, i))}\n      </div>\n    );\n  };\n\n  return (\n    <div className={classnames(styles.gameBackground)}>\n      <div\n        className={classnames(styles.gridContainer)}\n        style={calcBoardSize(columnCount, rowCount, zoomLevel)}>\n        {renderGrid()}\n      </div>\n    </div>\n  );\n};\n\nexport default GameGrid;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport KeyboardListener from 'components/KeyboardListener';\nimport { IGameData } from 'models/cellModels';\nimport myHistory from 'myHistory';\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setGameState } from 'store/gameSlice';\nimport { RootState } from '../../store/store';\nimport './Cell.scss';\nimport CombinationLine from './CombinationLine';\nimport Controls from './Controls';\nimport GameGrid from './GameGrid';\nimport styles from './PlayGame.module.scss';\n\nconst PlayGame: React.FC = () => {\n  const { game } = useSelector((state: RootState) => state.game);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (game.state >= 0) {\n      return;\n    }\n\n    console.log('Loading game state...');\n    const res = localStorage.getItem('currentGame');\n    if (res) {\n      const newGame: IGameData = JSON.parse(res);\n      dispatch(setGameState(newGame));\n    } else {\n      myHistory.push('/');\n    }\n  }, []);\n\n  return (\n    <>\n      <KeyboardListener />\n\n      <div className={styles.content}>\n        <CombinationLine />\n        <GameGrid />\n        <Controls />\n      </div>\n    </>\n  );\n};\n\nexport default PlayGame;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport MyInput from 'components/MyInput';\nimport { Form, Formik } from 'formik';\nimport myHistory from 'myHistory';\nimport { Button } from 'primereact/button';\nimport { InputText } from 'primereact/inputtext';\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { RootState } from 'store/store';\nimport { ISigninValues, login } from 'store/userSlice';\n\nconst SignIn: React.FC = () => {\n  const dispatch = useDispatch();\n  const { user } = useSelector((state: RootState) => state.users);\n  // const [checked, setChecked] = useState(false);\n\n  const initialValues: ISigninValues = {\n    email: '',\n    password: '',\n  };\n\n  const handleSubmit = (values: ISigninValues) => {\n    dispatch(login(values));\n  };\n\n  useEffect(() => {\n    if (user) {\n      myHistory.push('/');\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [user]);\n\n  return (\n    <div\n      className='flex align-items-center justify-content-center'\n      style={{ height: '60%' }}>\n      <div className='surface-card p-4 shadow-2 border-round w-full lg:w-6'>\n        <div className='text-center mb-5'>\n          {/* <img\n            src='assets/images/blocks/logos/hyper.svg'\n            alt='hyper'\n            height={50}\n            className='mb-3'\n          /> */}\n          <div className='text-900 text-3xl font-medium mb-3'>\n            Welcome Back to Mr K.'s Kakuro\n          </div>\n          <span className='text-600 font-medium line-height-3'>\n            Don't have an account?\n          </span>\n          <Link\n            className='font-medium no-underline ml-2 text-blue-500 cursor-pointer'\n            to='/signup'>\n            Create one today!\n          </Link>\n        </div>\n\n        <Formik\n          // enableReinitialize\n          initialValues={initialValues}\n          onSubmit={handleSubmit}\n          // validationSchema={UserSchema}\n        >\n          {({ setFieldValue, values }) => (\n            <Form className='p-fluid'>\n              <MyInput\n                name='email'\n                label='Email'\n                as={InputText}\n                className='block text-900 font-medium mb-2'\n              />\n              <MyInput\n                name='password'\n                label='Password'\n                type='password'\n                as={InputText}\n                className='block text-900 font-medium mb-2'\n              />\n\n              <Button\n                type='submit'\n                label='Sign In!'\n                icon='mdi mdi-login-variant'\n                className='w-full'\n              />\n            </Form>\n          )}\n        </Formik>\n      </div>\n    </div>\n  );\n};\n\nexport default SignIn;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport MyInput from 'components/MyInput';\nimport { Form, Formik } from 'formik';\nimport myHistory from 'myHistory';\nimport { Button } from 'primereact/button';\nimport { InputText } from 'primereact/inputtext';\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { ISignUpValues, signUp } from 'store/userSlice';\nimport * as Yup from 'yup';\n\nconst UserSchema = Yup.object().shape({\n  name: Yup.string()\n    .min(3)\n    .max(50, 'Must be 50 characters or less')\n    .required('Required'),\n  email: Yup.string()\n    .max(50, 'Must be 50 characters or less')\n    .required('Required'),\n  password: Yup.string()\n    .min(10, 'Must be at least 10 characters')\n    .max(25, 'Must be 25 characters or less')\n    .required('Required'),\n});\n\nconst SignUp: React.FC = () => {\n  const dispatch = useDispatch();\n  // const [checked, setChecked] = useState(false);\n\n  const handleSubmit = (values: ISignUpValues) => {\n    dispatch(signUp(values));\n    myHistory.push('/')\n  };\n\n  const initialValues: ISignUpValues = {\n    name: '',\n    email: '',\n    password: '',\n  };\n\n  return (\n    <div\n      className='flex align-items-center justify-content-center'\n      style={{ height: '60%' }}>\n      <div className='surface-card p-4 shadow-2 border-round w-full lg:w-6'>\n        <div className='text-center mb-5'>\n          {/* <img\n            src='assets/images/blocks/logos/hyper.svg'\n            alt='hyper'\n            height={50}\n            className='mb-3'\n          /> */}\n          <div className='text-900 text-3xl font-medium mb-3'>\n            Sign Up For Mr K.'s Kakuro\n          </div>\n          <span className='text-600 font-medium line-height-3'>\n            Already have an account?\n          </span>\n          <Link\n            className='font-medium no-underline ml-2 text-blue-500 cursor-pointer'\n            to='/signin'>\n            Sign In!\n          </Link>\n        </div>\n\n        <Formik\n          enableReinitialize\n          initialValues={initialValues}\n          onSubmit={handleSubmit}\n          validationSchema={UserSchema}>\n          {({ setFieldValue, values }) => (\n            <Form className='p-fluid'>\n              <MyInput\n                name='name'\n                label='Gamer Name'\n                as={InputText}\n                className='block text-900 font-medium mb-2'\n              />\n              <MyInput\n                name='email'\n                label='Email'\n                as={InputText}\n                className='block text-900 font-medium mb-2'\n              />\n              <MyInput\n                name='password'\n                label='Password'\n                type='password'\n                as={InputText}\n                className='block text-900 font-medium mb-2'\n              />\n\n              <Button\n                type='submit'\n                label='Sign Up!'\n                icon='mdi mdi-account-plus'\n                className='w-full'\n              />\n            </Form>\n          )}\n        </Formik>\n      </div>\n    </div>\n  );\n};\n\nexport default SignUp;\n","import ProtectedRoute, { ProtectedRouteProps } from 'components/ProtectedRoute';\nimport CreateGame from 'features/creating/CreateGame';\nimport MainMenu from 'features/menu/MainMenu';\nimport PlayGame from 'features/playing/PlayGame';\nimport SignIn from 'features/users/SignIn';\nimport SignUp from 'features/users/SignUp';\nimport myHistory from 'myHistory';\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport { Route, Router, Switch } from 'react-router-dom';\nimport { RootState } from 'store/store';\n\nconst Routes: React.FC = () => {\n  const { user } = useSelector((state: RootState) => state.users);\n\n  const prot: ProtectedRouteProps = {\n    isAuthenticated: user != null,\n    authenticationPath: '/signin',\n  };\n\n  return (\n    <Router history={myHistory}>\n      <Switch>\n        <ProtectedRoute {...prot} path='/create' component={CreateGame} />\n        <Route path='/play' component={PlayGame} />\n        <Route path='/signin' component={SignIn} />\n        <Route path='/signup' component={SignUp} />\n        <Route path='/' component={MainMenu} />\n      </Switch>\n    </Router>\n  );\n};\n\nexport default Routes;\n","import { Toast } from 'primereact/toast';\nimport React, { useEffect, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { clearAlert } from './alertSlice';\nimport { RootState } from 'store/store';\n\nconst Alerts: React.FC = () => {\n  const alerts = useSelector((state: RootState) => state.alerts.alerts);\n  const dispatch = useDispatch();\n  const toastEl = useRef<any>(null);\n\n  useEffect(() => {\n    Object.keys(alerts).forEach((key) => {\n      toastEl.current?.show({\n        severity: key,\n        summary: alerts[key].summary,\n        detail: alerts[key].detail,\n      });\n\n      dispatch(clearAlert(key));\n    });\n  }, [dispatch, alerts]);\n\n  return <Toast ref={toastEl} />;\n};\n\nexport default Alerts;\n","import {\n  Action,\n  combineReducers,\n  configureStore,\n  ThunkAction,\n} from '@reduxjs/toolkit';\nimport alertReducer from '../features/alerts/alertSlice';\nimport gameReducer from './gameSlice';\nimport designReducer from './designSlice';\nimport userReducer from './userSlice';\nimport listReducer from '../features/list/listSlice';\n\nexport const rootReducer = combineReducers({\n  alerts: alertReducer,\n  design: designReducer,\n  list: listReducer,\n  game: gameReducer,\n  users: userReducer,\n});\n\nconst store = configureStore({\n  devTools: process.env.NODE_ENV !== 'production',\n  reducer: rootReducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\nexport type AppThunk = ThunkAction<void, RootState, null, Action<string>>;\nexport type AppDispatch = typeof store.dispatch;\n\nexport default store;\n","import MyMenubar from 'components/MyMenubar';\nimport Routes from 'components/Routes';\nimport Alerts from 'features/alerts/Alerts';\nimport React from 'react';\nimport { Provider } from 'react-redux';\nimport './App.scss';\nimport store from 'store/store';\n\nconst App: React.FC = () => {\n  return (\n    <Provider store={store}>\n      <MyMenubar />\n      <Alerts />\n\n      <Routes />\n    </Provider>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"designCell\":\"DesignCell_designCell__1mdb1\",\"hintMissing\":\"DesignCell_hintMissing__GjhmS\",\"solution\":\"DesignCell_solution__1hCNm\",\"index\":\"DesignCell_index__1hyaN\",\"debug\":\"DesignCell_debug__3kPCc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"ImportDialog_dialog__5Rts6\",\"dragging\":\"ImportDialog_dragging__2ddO9\",\"button\":\"ImportDialog_button__mXT6g\",\"textarea\":\"ImportDialog_textarea__2QBOO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"guessButton\":\"GuessButton_guessButton__2HTay\",\"pencilMark\":\"GuessButton_pencilMark__30ALz\",\"digit1\":\"GuessButton_digit1__2OikV\",\"digit2\":\"GuessButton_digit2__1EUR8\",\"digit3\":\"GuessButton_digit3__tibxt\",\"digit4\":\"GuessButton_digit4__2bG_l\",\"digit5\":\"GuessButton_digit5__1DTxj\",\"digit6\":\"GuessButton_digit6__29Opa\",\"digit7\":\"GuessButton_digit7__3aZzj\",\"digit8\":\"GuessButton_digit8__2lnCS\",\"digit9\":\"GuessButton_digit9__35MKY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"HintDialog_dialog__3oXoT\",\"label\":\"HintDialog_label__1UY5p\",\"buttonGrid\":\"HintDialog_buttonGrid__3MkIY\",\"button\":\"HintDialog_button__2lNtm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"number\":\"NumberCell_number__1mt2Y\",\"guess\":\"NumberCell_guess__1Iq08\",\"pencilMarks\":\"NumberCell_pencilMarks__2eIXW\",\"digit1\":\"NumberCell_digit1__1IfxI\",\"digit2\":\"NumberCell_digit2__1g9yB\",\"digit3\":\"NumberCell_digit3__20FAY\",\"digit4\":\"NumberCell_digit4__1lxHB\",\"digit5\":\"NumberCell_digit5__324jS\",\"digit6\":\"NumberCell_digit6__1elhh\",\"digit7\":\"NumberCell_digit7__1G9wx\",\"digit8\":\"NumberCell_digit8__21LqC\",\"digit9\":\"NumberCell_digit9__3ltYs\"};"],"sourceRoot":""}