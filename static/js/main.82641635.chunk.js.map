{"version":3,"sources":["components/MyMenubar.module.scss","features/creating/CreateGame.module.scss","features/creating/DrawGrid.module.scss","features/playing/GameGrid.module.scss","features/menu/MainMenu.module.scss","features/playing/BlankCell.module.scss","features/playing/PlayGame.module.scss","features/creating/SaveGame.module.scss","features/playing/Controls.module.scss","myHistory.ts","api/kakuroApi.ts","utils/authHeader.ts","store/userSlice.ts","components/MyMenubar.tsx","features/alerts/alertSlice.ts","features/alerts/Alerts.tsx","features/list/listSlice.ts","utils/checkSolution.ts","utils/doCountMissingCells.ts","utils/getHints.ts","utils/combinations.ts","utils/solvePuzzle.ts","utils/getCombinations.ts","store/gameSlice.ts","utils/pencilmarks.ts","utils/checkPuzzle.ts","utils/hintCells.ts","utils/preparePuzzle.ts","store/designSlice.ts","features/creating/ExportButton.tsx","features/creating/DesignPanel.tsx","features/creating/HintDialog.tsx","features/creating/DesignCell.tsx","features/creating/DrawGrid.tsx","features/creating/SaveGame.tsx","utils/validateGrid.ts","features/creating/SetCells.tsx","features/creating/SetHints.tsx","components/MyInput.tsx","components/MySelectButton.tsx","components/MySlider.tsx","types/puzzle.ts","features/creating/SetSize.tsx","features/creating/CreateGame.tsx","features/list/PuzzleList.tsx","utils/makePlayable.ts","features/menu/MainMenu.tsx","hooks/useEventListener.js","components/KeyboardListener.tsx","features/playing/CombinationLine.tsx","features/playing/GuessButton.tsx","features/playing/Controls.tsx","utils/calcCellSize.ts","features/playing/BlankCell.tsx","features/playing/HintCell.tsx","features/playing/NumberCell.tsx","features/playing/GameGrid.tsx","features/playing/PlayGame.tsx","features/users/SignIn.tsx","features/users/SignUp.tsx","store/store.ts","App.tsx","reportWebVitals.ts","index.tsx","features/playing/CombinationLine.module.scss","features/playing/GuessButton.module.scss","features/creating/DesignCell.module.scss","features/creating/HintDialog.module.scss","features/playing/NumberCell.module.scss"],"names":["module","exports","createHashHistory","kakuroApi","axios","create","baseURL","process","authHeader","user","token","localStorage","getItem","Authorization","console","log","storeduser","JSON","parse","decoded","decode","Date","now","exp","removeItem","error","initialState","isLoggedIn","isRequesting","userSlice","createSlice","name","reducers","loginSuccess","state","action","payload","logoutFailed","logoutSuccess","signUpSuccess","signUpFailed","submitting","requestFailed","code","response","status","actions","MyMenubar","dispatch","useDispatch","useSelector","users","startItem","className","styles","menuItems","label","icon","command","myHistory","push","disabled","endItem","onClick","a","post","headers","stringify","model","start","end","header","alertSlice","alerts","pageTitle","isFetching","notFound","clearAlert","setAlert","alert","severity","setNotFound","setErrorAlert","summary","setSuccessAlert","setWarningAlert","setIsFetching","setPageTitle","document","title","Alerts","toastEl","useRef","useEffect","Object","keys","forEach","key","current","show","detail","ref","listSlice","list","fetchListSuccess","addPuzzleToList","setChoiceID","choice","checkCorrect","cells","filter","c","type","CellType","NumberCell","every","guess","solution","doCountMissingCells","length","getHints","game","index","hints","sum","count","used","Array","hIndex","cell","hintHorizontal","columnCount","vIndex","hintVertical","nextRow","combinations","digits","fill","_makeCombinations","min","set","digitsToCombination","makeCombinations","freeze","solutions","getCombinations","combs","h","includes","_solvePuzzle","solvedGame","nc","pencilMarks","nCell","rowData","getRowForCell","columnData","getColumnForCell","p","usedDigits","hint","tempGame","makePencilmarks","singlePencilmarksToGuess","solvePuzzle","Difficulty","PuzzleStates","original","across","delta","x","cellIndexes","sumSolved","y","setGuess","i","pm","guessNumber","hComb","vComb","hDigits","from","Set","flat","vDigits","poss","e","sort","makePencilmarksForCell","zoomLevel","rowCount","level","hintCount","markWrong","missingCells","gameSlice","setGameState","setCurrentGameSuccess","setItem","setSelectedIndex","newIndex","selectedIndex","increaseZoom","newValue","setGuessSuccess","newGame","newMissingCells","togglePencilMark","currentCell","indexOf","splice","toggleMarkWrong","autoPencil","setCurrentGame","getState","checkPuzzle","puzzle","sumHorizontal","sumVertical","HintCell","hc","valid","doMakeHintCells","nextColumn","BlankCell","hCell","isHint","preparePuzzle","Direction","DesignStepsEnum","cellString","map","join","designSteps","createGrid","columns","rows","item","activeStep","Raw","designSlice","setActiveStep","setBaseGame","clearDesignGame","setPuzzleState","updateCell","newCell","reduce","prev","curr","makeHintCells","solveGameSuccess","Solved","solveGameFailed","InsertHints","checkGameSuccess","Valid","createGameSuccess","ExportButton","useState","exportVisible","setExportVisible","puzzleJSON","setPuzzleJSON","design","button","visible","style","width","height","modal","onHide","value","blob","Blob","filename","fileDownload","DesignPanel","props","handleBack","handleNext","children","headerTemplate","options","titleClassName","HintDialog","down","setOptions","renderButtons","groupData","minSum","Math","maxSum","max","buttonGrid","n","acrossHint","handleClick","classNames","numbers","DesignCell","dialogVisible","setDialogVisible","renderHint","hintStr","hintClass","hintMissing","classnames","designCell","DrawGrid","gameBackground","grid","gridTemplateColumns","SaveGame","result","values","newPuzzle","data","validatePuzzle","numberCount","message","SetCells","res","SetHints","MyInput","htmlFor","dangerouslySetInnerHTML","__html","component","MySlider","field","setFieldValue","id","onChange","event","handleChange","difficultyLevels","difficultyLabels","PuzzleSchema","Yup","shape","required","SetSize","importVisible","setImportVisible","initialValues","formikRef","handleSubmit","handleImport","enableReinitialize","onSubmit","validationSchema","innerRef","as","InputText","MySelectButton","target","CreateGame","puzzleStateJSON","createGame","createSteps","activeIndex","PuzzleList","get","autoLayout","stripedRows","scrollable","scrollHeight","selectionMode","selection","onSelectionChange","dataKey","sortable","body","date","createdAt","format","makePlayable","input","split","char","hintCell","rowGroup","columnGroup","MainMenu","content","useEventListener","eventName","handler","element","window","savedHandler","addEventListener","eventListener","removeEventListener","KeyboardListener","selectCell","handleKeyDown","useCallback","CombinationLine","possibilities","setPossibilities","renderPossibility","direction","possibility","d","highlight","renderDigit","renderPossibilities","b","renderLine","text","GuessButton","digit","pencilMark","guessButton","pencilMark1","Controls","handleZoom","renderButton","controls","zoomButtons","guessButtons","checked","onLabel","offLabel","onIcon","offIcon","calcCellSize","blank","fontSize","calcHintFontSize","guessFontSize","calcGuessFontSize","wrongGuess","number","selected","GameGrid","gridTemplateRows","renderCell","PlayGame","newState","SignIn","to","email","password","resourceType","resources","login","UserSchema","SignUp","signUp","rootReducer","combineReducers","alertReducer","designReducer","listReducer","gameReducer","userReducer","store","configureStore","devTools","reducer","App","history","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.82641635.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"MyMenubar_header__1SUGp\",\"startItem\":\"MyMenubar_startItem__5gsTl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"createGame\":\"CreateGame_createGame__t-nS6\",\"createSteps\":\"CreateGame_createSteps__3TBZt\",\"p-steps\":\"CreateGame_p-steps__1OyM9\",\"p-steps-item\":\"CreateGame_p-steps-item__2Lv77\",\"p-menuitem-link\":\"CreateGame_p-menuitem-link__3yOB-\",\"p-steps-title\":\"CreateGame_p-steps-title__6eRPZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"gameBackground\":\"DrawGrid_gameBackground__2dTqA\",\"grid\":\"DrawGrid_grid__XoYjv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"gameBackground\":\"GameGrid_gameBackground__2gUQF\",\"grid\":\"GameGrid_grid__3SI7n\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"MainMenu_content__1zXTd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"blank\":\"BlankCell_blank__h84dH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"PlayGame_content__3keJX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"SaveGame_button__3Is-u\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"controls\":\"Controls_controls__fpjJI\",\"columns\":\"Controls_columns__1dogA\",\"button\":\"Controls_button__3i3Ud\",\"zoomButtons\":\"Controls_zoomButtons__1tiul\"};","import { createHashHistory } from 'history';\n\nexport default createHashHistory();\n","import axios from 'axios';\n\nconst kakuroApi = axios.create({\n  baseURL: process.env.REACT_APP_KAKURO_API_ENDPOINT || 'http://192.168.168.4:5000'\n});\n\nexport default kakuroApi;\n","function authHeader(): {\n  Authorization: string;\n} | {\n  Authorization: null;\n} {\n  const token = localStorage.getItem('token');\n\n  if (token) {\n    return { Authorization: `Bearer ${token}` };\n  } else {\n    return { Authorization: null };\n  }\n}\n\nexport default authHeader;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { decode } from 'jsonwebtoken';\nimport kakuroApi from '../api/kakuroApi';\nimport authHeader from '../utils/authHeader';\nimport { AppThunk } from './store';\n\nexport interface IUser {\n  id: string;\n  name: string;\n  email: string;\n}\n\nexport interface ISigninValues {\n  email: string;\n  password: string;\n}\n\nexport interface ISignUpValues extends ISigninValues {\n  name: string;\n}\n\nexport interface IUserState {\n  isLoggedIn: boolean;\n  isRequesting: boolean;\n  user: IUser | null;\n  error: string | null;\n}\n\nexport interface IUnauthorizedPayload {\n  resourceType: string;\n  resources: string[];\n  // status: number;\n  // message: string;\n  response: any;\n}\n\n// TODO: check token\nlet user;\nconsole.log('userSlice: loading user from storage...');\ntry {\n  const storeduser = localStorage.getItem('user');\n  user = storeduser != null ? JSON.parse(storeduser) : null;\n  const token = localStorage.getItem('token');\n\n  if (token) {\n    let decoded: any = decode(token);\n\n    if (Date.now() >= decoded.exp * 1000) {\n      console.log('token expired');\n      localStorage.removeItem('user');\n      localStorage.removeItem('token');\n      user = null;\n    }\n  }\n} catch (error) {\n  localStorage.removeItem('user');\n  localStorage.removeItem('token');\n  user = null;\n}\n\nconst initialState: IUserState = {\n  isLoggedIn: user == null ? false : true,\n  isRequesting: false,\n  user,\n  error: null,\n};\n\nconst userSlice = createSlice({\n  name: 'user',\n  initialState,\n  reducers: {\n    loginSuccess(state, action: PayloadAction<IUser>) {\n      state.user = action.payload;\n      state.isLoggedIn = action.payload != null;\n      state.error = null;\n      state.isRequesting = false;\n    },\n    logoutFailed(state, action: PayloadAction<string>) {\n      state.error = action.payload;\n      state.user = null;\n      state.isLoggedIn = false;\n      state.isRequesting = false;\n    },\n    logoutSuccess(state) {\n      state.user = null;\n      state.isLoggedIn = false;\n      state.error = null;\n      state.isRequesting = false;\n    },\n    signUpSuccess(state, action: PayloadAction<IUser>) {\n      state.user = action.payload;\n      state.isLoggedIn = action.payload != null;\n      state.error = null;\n      state.isRequesting = false;\n    },\n    signUpFailed(state, action: PayloadAction<string>) {\n      state.error = action.payload;\n      state.user = null;\n      state.isLoggedIn = false;\n      state.isRequesting = false;\n    },\n    submitting(state) {\n      state.isRequesting = true;\n    },\n    requestFailed(state, action: PayloadAction<IUnauthorizedPayload>) {\n      console.log('action.payload:', action.payload);\n\n      // console.log('state:', state);\n      // console.log('action:', action);\n      const code = action.payload.response.status;\n\n      if (code === 401 || code === 403) {\n        // Unauthorized\n        localStorage.removeItem('user');\n        localStorage.removeItem('token');\n        state.user = null;\n        state.isLoggedIn = false;\n        state.error = null;\n        state.isRequesting = false;\n      }\n    },\n  },\n});\n\nexport const {\n  loginSuccess,\n  logoutFailed,\n  logoutSuccess,\n  requestFailed,\n  signUpFailed,\n  signUpSuccess,\n  submitting,\n} = userSlice.actions;\n\nexport default userSlice.reducer;\n\nexport const login =\n  (values: ISigninValues): AppThunk =>\n  async dispatch => {\n    dispatch(submitting());\n    let user, token;\n    try {\n      const response = await kakuroApi.post('/users/login', values);\n      user = response.data.user;\n      token = response.data.token;\n\n      localStorage.setItem('user', JSON.stringify(user));\n      localStorage.setItem('token', token);\n    } catch ({ response }) {\n      dispatch(\n        requestFailed({ resourceType: 'users', resources: [], response })\n      );\n      // dispatch(\n      //   setAlert({\n      //     type: 'error',\n      //     message: 'Beim Anmelden gab es einen Fehler. Bitte probieren Sie es später noch einmal.',\n      //   }),\n      // );\n      return;\n    }\n\n    dispatch(loginSuccess(user));\n    // dispatch(setAlert({ type: 'success', message: 'Sie haben sich erfolgreich angemeldet.' }));\n  };\n\nexport const logout = (): AppThunk => async dispatch => {\n  try {\n    await kakuroApi.post('/users/logout', null, { headers: authHeader() });\n  } catch ({ response }) {\n    dispatch(logoutFailed(JSON.stringify(response)));\n    return;\n  } finally {\n    localStorage.removeItem('user');\n    localStorage.removeItem('token');\n  }\n\n  dispatch(logoutSuccess());\n  // dispatch(setAlert({ type: 'success', message: 'Sie haben sich erfolgreich abgemeldet.' }));\n};\n\nexport const signUp =\n  (values: ISignUpValues): AppThunk =>\n  async dispatch => {\n    dispatch(submitting());\n    let user, token;\n    try {\n      const response = await kakuroApi.post('/users', values);\n      user = response.data.user;\n      token = response.data.token;\n\n      localStorage.setItem('user', JSON.stringify(user));\n      localStorage.setItem('token', token);\n    } catch ({ response }: any) {\n      console.log('response:', response);\n      dispatch(signUpFailed(\"Unable to sign up\"));\n      // dispatch(\n      //   setAlert({\n      //     type: 'error',\n      //     message: 'Beim Anmelden gab es einen Fehler. Bitte probieren Sie es später noch einmal.',\n      //   }),\n      // );\n      return;\n    }\n\n    dispatch(loginSuccess(user));\n    // dispatch(setAlert({ type: 'success', message: 'Sie haben sich erfolgreich angemeldet.' }));\n  };\n","import myHistory from 'myHistory';\nimport { Button } from 'primereact/button';\nimport { Menubar } from 'primereact/menubar';\nimport React from 'react';\nimport { RootState } from 'store/store';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { logout } from 'store/userSlice';\nimport styles from './MyMenubar.module.scss';\n\nconst MyMenubar: React.FC = () => {\n  const dispatch = useDispatch();\n  const { user } = useSelector((state: RootState) => state.users);\n\n  const startItem = (\n    <div className={styles.startItem}>\n      <h3>Mr K.'s Kakuro</h3>\n    </div>\n  );\n\n  const menuItems = [\n    {\n      label: 'Menu',\n      icon: 'mdi mdi-hamburger',\n      command: () => myHistory.push('/'),\n    },\n    {\n      label: 'Design Puzzle',\n      icon: 'mdi mdi-pencil',\n      command: () => myHistory.push('/create'),\n      disabled: user == null,\n    },\n    {\n      label: 'Play Puzzle',\n      icon: 'mdi mdi-play',\n      command: () => myHistory.push('/play'),\n    },\n  ];\n\n  const endItem = user ? (\n    <Button\n      label={`Sign Out ${user.name}`}\n      icon='mdi mdi-logout'\n      onClick={() => dispatch(logout())}\n    />\n  ) : (\n    <Button\n      label='Sign Up/Sign In'\n      icon='mdi mdi-login'\n      onClick={() => myHistory.push('/signin')}\n    />\n  );\n\n  return <Menubar model={menuItems} start={startItem} end={endItem} className={styles.header}/>;\n};\n\nexport default MyMenubar;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nexport interface AlertType {\n  severity: string;\n  summary: string;\n  detail?: string;\n}\n\ntype GlobalSliceState = {\n  alerts: {\n    [key: string]: AlertType;\n  };\n  pageTitle: string | null;\n  isFetching: boolean;\n  notFound: string | null;\n};\n\nconst initialState = {\n  alerts: {},\n  pageTitle: null,\n  isFetching: false,\n  notFound: null,\n};\n\nexport const alertSlice = createSlice({\n  name: 'alerts',\n  initialState: initialState as GlobalSliceState,\n  reducers: {\n    clearAlert(state, action: PayloadAction<string>) {\n      delete state.alerts[action.payload];\n    },\n    setAlert(state, action: PayloadAction<AlertType>) {\n      const alert = action.payload;\n      state.alerts[alert.severity] = alert;\n      state.isFetching = false;\n    },\n    setNotFound(state, action: PayloadAction<string | null>) {\n      state.notFound = action.payload;\n    },\n    setErrorAlert(state, action: PayloadAction<string>) {\n      const alert = { severity: 'error', summary: action.payload };\n      state.alerts[alert.severity] = alert;\n      state.isFetching = false;\n    },\n    setSuccessAlert(state, action: PayloadAction<string>) {\n      const alert = { severity: 'success', summary: action.payload };\n      state.alerts[alert.severity] = alert;\n      state.isFetching = false;\n    },\n    setWarningAlert(state, action: PayloadAction<string>) {\n      const alert = { severity: 'warn', summary: action.payload };\n      state.alerts[alert.severity] = alert;\n      state.isFetching = false;\n    },\n    setIsFetching(state, action: PayloadAction<boolean>) {\n      state.isFetching = action.payload;\n    },\n    setPageTitle(state, action: PayloadAction<string>) {\n      state.pageTitle = action.payload;\n      document.title = action.payload;\n    },\n  },\n});\n\nexport const {\n  clearAlert,\n  setAlert,\n  setErrorAlert,\n  setIsFetching,\n  setNotFound,\n  setPageTitle,\n  setSuccessAlert,\n  setWarningAlert,\n} = alertSlice.actions;\n\nexport default alertSlice.reducer;\n","import { Toast } from 'primereact/toast';\nimport React, { useEffect, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { clearAlert } from './alertSlice';\nimport { RootState } from 'store/store';\n\nconst Alerts: React.FC = () => {\n  const alerts = useSelector((state: RootState) => state.alerts.alerts);\n  const dispatch = useDispatch();\n  const toastEl = useRef<any>(null);\n\n  useEffect(() => {\n    Object.keys(alerts).forEach((key) => {\n      toastEl.current?.show({\n        severity: key,\n        summary: alerts[key].summary,\n        detail: alerts[key].detail,\n      });\n\n      dispatch(clearAlert(key));\n    });\n  }, [dispatch, alerts]);\n\n  return <Toast ref={toastEl} />;\n};\n\nexport default Alerts;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport kakuroApi from 'api/kakuroApi';\nimport { setErrorAlert } from 'features/alerts/alertSlice';\nimport { AppThunk } from 'store/store';\nimport { IBaseGame } from '../../store/gameSlice';\n\nexport interface IListGame extends IBaseGame {\n  cellString: string;\n  createdAt: Date;\n  _id: string;\n}\n\ntype ListSliceState = {\n  list: IListGame[];\n  choice?: IListGame;\n};\n\nconst initialState: ListSliceState = {\n  list: [],\n};\n\nexport const listSlice = createSlice({\n  name: 'list',\n  initialState,\n  reducers: {\n    fetchListSuccess: (state, action: PayloadAction<IListGame[]>) => {\n      state.list = action.payload;\n    },\n    addPuzzleToList: (state, action: PayloadAction<IListGame>) => {\n      state.list.push(action.payload);\n      console.log('Me here');\n    },\n    setChoiceID: (state, action: PayloadAction<IListGame>) => {\n      state.choice = action.payload;\n    },\n  },\n});\n\nexport const { addPuzzleToList, fetchListSuccess, setChoiceID } =\n  listSlice.actions;\n\nexport default listSlice.reducer;\n\nexport const fetchList = (): AppThunk => async (dispatch: any) => {\n  let list;\n\n  try {\n    const response = await kakuroApi.get('/puzzles');\n    list = response.data;\n  } catch (error) {\n    console.error('error:', error);\n    dispatch(setErrorAlert('Puzzles konnten nicht geladen werden.'));\n  }\n\n  // dispatch(setSuccessAlert('Puzzles wurden geladen.'));\n  dispatch(fetchListSuccess(list));\n};\n","import { CellType, IGameData, INumberCell } from 'store/gameSlice';\n\nfunction checkCorrect({ cells }: IGameData): boolean {\n  return cells\n    .filter(c => c.type === CellType.NumberCell)\n    .every(c => (c as INumberCell).guess === (c as INumberCell).solution);\n}\n\nexport default checkCorrect;\n","import { CellType, IGameData, INumberCell } from 'store/gameSlice';\n\nfunction doCountMissingCells({ cells }: IGameData): number {\n  return cells.filter(c => c.type === CellType.NumberCell && (c as INumberCell).guess === 0).length;\n}\n\n\nexport default doCountMissingCells;\n","import { CellType, IGameData, IHintCell, INumberCell } from 'store/gameSlice';\n\nexport default function getHints(game: IGameData, index: number) {\n  const hints = [\n    { index: -1, sum: -1, count: -1, used: new Array<number>() },\n    { index: -1, sum: -1, count: -1, used: new Array<number>() },\n  ];\n  let hIndex = index;\n\n  // Find corresponding hint cell horizontally\n  while (game.cells[hIndex].type === CellType.NumberCell) {\n    const cell = game.cells[hIndex] as INumberCell;\n    if (cell.guess > 0) {\n      hints[0].used.push(cell.guess);\n    }\n    hIndex--;\n  }\n\n  hints[0].index = hIndex;\n  hints[0].sum = (game.cells[hIndex] as IHintCell).hintHorizontal! || -1;\n\n  // Find count of cells for this hint\n  hIndex = index;\n  while (\n    (hIndex + 1) % game.columnCount !== 0 &&\n    game.cells[hIndex + 1].type === CellType.NumberCell\n  ) {\n    hIndex++;\n    const cell = game.cells[hIndex] as INumberCell;\n    if (cell.guess > 0) {\n      hints[0].used.push(cell.guess);\n    }\n  }\n\n  hints[0].count = hIndex - hints[0].index;\n\n  // Find corresponding hint cell vertically\n  let vIndex = index;\n  while (game.cells[vIndex].type === CellType.NumberCell) {\n    const cell = game.cells[vIndex] as INumberCell;\n    if (cell.guess > 0) {\n      hints[1].used.push(cell.guess);\n    }\n    vIndex -= game.columnCount;\n  }\n\n  hints[1].index = vIndex;\n  hints[1].sum = (game.cells[vIndex] as IHintCell).hintVertical! || -1;\n\n  // Find count of cells for this hint\n  vIndex = index;\n  let nextRow = vIndex + game.columnCount;\n  while (\n    nextRow < game.cells.length &&\n    game.cells[nextRow].type === CellType.NumberCell\n  ) {\n    vIndex = nextRow;\n    const cell = game.cells[vIndex] as INumberCell;\n    if (cell.guess > 0) {\n      hints[1].used.push(cell.guess);\n    }\n    nextRow = vIndex + game.columnCount;\n  }\n\n  const count = (vIndex - hints[1].index) / game.columnCount;\n  hints[1].count = count;\n\n  return hints;\n}\n","export interface ICombinationsForCount {\n  [sum: string]: number[][];\n}\n\nexport interface ICombinations {\n  [count: string]: ICombinationsForCount;\n}\n\nconst makeCombinations = () => {\n  const combinations: ICombinations = {};\n  const digits = new Array(10).fill(false);\n\n  const digitsToCombination = () => {\n    const set = new Array<number>();\n    let count = 0;\n    let sum = 0;\n\n    for (let index = 1; index < digits.length; index++) {\n      if (digits[index]) {\n        set.push(index);\n        count += 1;\n        sum += index;\n      }\n    }\n\n    if (!combinations[count]) {\n      combinations[count] = {};\n    }\n\n    if (!combinations[count][sum]) {\n      combinations[count][sum] = new Array<number[]>();\n    }\n\n    combinations[count][sum].push(set);\n  };\n\n  const _makeCombinations = (min: number, current: number) => {\n    if (current === 10) {\n      digitsToCombination();\n    } else {\n      digits[current] = true;\n      _makeCombinations(min, current + 1);\n      digits[current] = false;\n      _makeCombinations(min, current + 1);\n      current++;\n    }\n  };\n\n  for (let min = 1; min < 9; min++) {\n    digits[min] = true;\n    _makeCombinations(min, min + 1);\n    digits[min] = false;\n  }\n\n  delete combinations['1'];\n  return combinations;\n};\n\nconst combinations: ICombinations = makeCombinations();\nObject.freeze(combinations);\n\nexport default combinations;\n","import { CellType, IGameData, INumberCell } from 'store/gameSlice';\nimport {\n  makePencilmarks,\n  getRowForCell,\n  singlePencilmarksToGuess,\n  getColumnForCell,\n} from './pencilmarks';\n\nlet solutions: IGameData[];\n\nexport function guessNumber(game: IGameData, index: number, guess: number) {\n  (game.cells[index] as INumberCell).guess = guess;\n  getRowForCell(game, index).cellIndexes.forEach(i => {\n    const nCell = game.cells[i] as INumberCell;\n    nCell.pencilMarks = nCell.pencilMarks.filter(pm => pm !== guess);\n  });\n\n  getColumnForCell(game, index).cellIndexes.forEach(i => {\n    const nCell = game.cells[i] as INumberCell;\n    nCell.pencilMarks = nCell.pencilMarks.filter(pm => pm !== guess);\n  });\n}\n\n// function logBoard(game: IGameData) {\n//   console.log(\n//     'Board',\n//     JSON.stringify(\n//       game.cells\n//         .filter(c => c.type === CellType.NumberCell)\n//         .map(c => (c as INumberCell).guess)\n//     )\n//   );\n// }\n\n// function logSolution(game: IGameData) {\n//   console.log(\n//     'Solution',\n//     JSON.stringify(\n//       game.cells\n//         .filter(c => c.type === CellType.NumberCell)\n//         .map(c => (c as INumberCell).solution)\n//     )\n//   );\n// }\n\nfunction _solvePuzzle(game: IGameData, index: number) {\n  if (index >= game.cells.length) {\n    // found a solution\n    const solvedGame: IGameData = JSON.parse(JSON.stringify(game));\n    solvedGame.cells.forEach(c => {\n      if (c.type === CellType.NumberCell) {\n        const nc = c as INumberCell;\n        nc.solution = nc.guess;\n        nc.guess = 0;\n        nc.pencilMarks = [];\n      }\n    });\n    solutions.push(solvedGame);\n  } else {\n    const cell = game.cells[index];\n\n    if (cell.type !== CellType.NumberCell || (cell as INumberCell).guess > 0) {\n      // if cell is not a number cell or if there is a guess in it already\n      _solvePuzzle(game, index + 1);\n    } else {\n      // Try all options for current cell's pencil marks\n      // and solve rest of puzzle recursively\n      const nCell: INumberCell = cell as INumberCell;\n      const rowData = getRowForCell(game, cell.index);\n      const columnData = getColumnForCell(game, cell.index);\n\n      nCell.pencilMarks.forEach(p => {\n        // TODO: check if pencil mark is valid option\n        // this should not happen\n        if (\n          rowData.usedDigits.includes(p) ||\n          columnData.usedDigits.includes(p)\n        ) {\n          return;\n        }\n\n        // logBoard(game);\n        // console.log(p, rowData.usedDigits, columnData.usedDigits);\n\n        if (\n          (rowData.usedDigits.length === rowData.count - 1 &&\n            rowData.sum + p !== rowData.hint) ||\n          (columnData.usedDigits.length === columnData.count - 1 &&\n            columnData.sum + p !== columnData.hint)\n        ) {\n          // only one digit missing, check if p is the missing number\n          return;\n        }\n\n        nCell.guess = p;\n        // console.log(`Cell no. ${index}: Guessing ${p}...`);\n\n        const tempGame: IGameData = JSON.parse(JSON.stringify(game));\n        makePencilmarks(tempGame);\n        singlePencilmarksToGuess(tempGame);\n        _solvePuzzle(tempGame, index + 1);\n        nCell.guess = 0;\n      });\n    }\n  }\n}\n\nexport interface ISolvePuzzleResult {\n  error?: string;\n  solution?: IGameData;\n}\n\n/**\n * Solves the entered puzzle. First version is a brute-force to see how long it takes :D\n * @param original the game to be solved\n * @param combinations all possible combinations\n * @returns the solved game\n */\nfunction solvePuzzle(original: IGameData): ISolvePuzzleResult {\n  // create copy of entered game\n  const game: IGameData = JSON.parse(JSON.stringify(original));\n  // create initial pencil marks\n  // logBoard(game);\n  makePencilmarks(game);\n  while (singlePencilmarksToGuess(game)) {}\n\n  solutions = new Array<IGameData>();\n  _solvePuzzle(game, 0);\n  // console.log(`Found ${solutions.length}:`);\n\n  if (solutions.length === 0) {\n    return { error: 'Puzzle invalid; no solution.' };\n  } else if (solutions.length > 1) {\n    return {\n      error: `Puzzle invalid; more than one solution (${solutions.length}).`,\n    };\n  } else {\n    // logSolution(solutions[0]);\n    return { solution: solutions[0] };\n  }\n}\n\nexport default solvePuzzle;\n","import { IHintValues } from 'store/gameSlice';\nimport combinations from './combinations';\n\n/**\n *\n * @param hints the computed hints for a particular cell\n * @param combinations all combinations\n */\nexport default function getCombinations(\n  hints: IHintValues,\n) {\n  let combs = combinations[hints.count][hints.sum];\n\n  // only select those combinations which contain every used digit\n  combs = combs.filter(c => hints.used.every(h => c.includes(h)));\n\n  return combs;\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { setSuccessAlert, setWarningAlert } from 'features/alerts/alertSlice';\nimport checkCorrect from 'utils/checkSolution';\nimport doCountMissingCells from 'utils/doCountMissingCells';\nimport getHints from 'utils/getHints';\nimport { makePencilmarks, singlePencilmarksToGuess } from 'utils/pencilmarks';\nimport { AppThunk } from './store';\n\n/* Types */\nexport enum Difficulty {\n  Easy = 0,\n  Medium = 1,\n  MediumPlus = 2,\n  Hard = 3,\n  VeryHard = 4,\n}\n\nexport enum CellType {\n  BlankCell = 'blankCell',\n  HintCell = 'hintCell',\n  NumberCell = 'numberCell',\n}\n\nexport enum PuzzleStates {\n  Raw = 0,\n  Valid = 1,\n  Solved = 2,\n}\n\nexport interface ICell {\n  index: number;\n  type: CellType;\n}\n\nexport interface IBlankCell extends ICell {\n  type: CellType.BlankCell;\n}\n\nexport interface IHintCell extends ICell {\n  type: CellType.HintCell;\n  hintHorizontal?: number;\n  hintVertical?: number;\n}\n\nexport interface INumberCell extends ICell {\n  type: CellType.NumberCell;\n  pencilMarks: number[];\n  guess: number;\n  solution: number;\n}\n\nexport type IBaseGame = {\n  name: string;\n  columnCount: number;\n  rowCount: number;\n  level: Difficulty;\n};\n\nexport interface IServerGameData extends IBaseGame {\n  state: PuzzleStates;\n  cellString: string;\n}\n\nexport interface IGameData extends IBaseGame {\n  state: PuzzleStates;\n  cells: ICell[];\n  hintCount: number;\n}\n\nexport interface IGuess {\n  index: number;\n  guess: number;\n}\n\nexport interface IHintValues {\n  index: number;\n  sum: number;\n  count: number;\n  used: number[];\n}\n\n/* State */\nexport type GameSliceState = {\n  zoomLevel: number;\n  game: IGameData;\n  selectedIndex?: number;\n  hints: IHintValues[];\n  markWrong: boolean;\n  missingCells: number;\n};\n\nconst initialState: GameSliceState = {\n  zoomLevel: 3,\n  game: {\n    state: -1,\n    cells: [],\n    columnCount: -1,\n    rowCount: -1,\n    name: 'Dummy',\n    level: -1,\n    hintCount: -1,\n  },\n  hints: [\n    { index: -1, sum: -1, count: -1, used: new Array<number>() },\n    { index: -1, sum: -1, count: -1, used: new Array<number>() },\n  ],\n  markWrong: false,\n  missingCells: -1,\n};\n\nexport const gameSlice = createSlice({\n  name: 'game',\n  initialState,\n  reducers: {\n    setGameState(state, action: PayloadAction<GameSliceState>) {\n      return action.payload;\n    },\n    setCurrentGameSuccess(state, action: PayloadAction<IGameData>) {\n      state.game = action.payload;\n      state.missingCells = doCountMissingCells(state.game);\n      localStorage.setItem('gameState', JSON.stringify(state));\n    },\n    // fetchGameSuccess(state, action: PayloadAction<IGameData>) {\n    //   state.game = { ...action.payload };\n    //   // create pencilmarks for all number cells\n    //   state.game.cells\n    //     .filter(c => c.type === CellType.NumberCell)\n    //     .forEach(cell => {\n    //       const nCell = cell as INumberCell;\n    //       if (!nCell.guess) {\n    //         nCell.guess = 0;\n    //       }\n    //       if (!nCell.pencilMarks) {\n    //         nCell.pencilMarks = [];\n    //       }\n    //     });\n    // },\n    setSelectedIndex(state, action: PayloadAction<number>) {\n      let newIndex = action.payload;\n      state.selectedIndex = newIndex;\n      state.hints = getHints(state.game!, newIndex);\n    },\n    increaseZoom(state, action: PayloadAction<number>) {\n      const delta = action.payload;\n\n      if (delta === 0) {\n        state.zoomLevel = initialState.zoomLevel;\n      } else {\n        const newValue = state.zoomLevel + delta;\n        if (newValue > 0 && newValue <= 10) {\n          state.zoomLevel = newValue;\n        }\n      }\n    },\n    setGuessSuccess(\n      state,\n      action: PayloadAction<{ newGame: IGameData; newMissingCells: number }>\n    ) {\n      const { newGame, newMissingCells } = action.payload;\n      state.game = newGame;\n      state.missingCells = newMissingCells;\n      state.hints = getHints(newGame, state.selectedIndex!);\n      localStorage.setItem('gameState', JSON.stringify(state));\n    },\n    togglePencilMark(state, action: PayloadAction<IGuess>) {\n      const { index, guess } = action.payload;\n      const newGame: IGameData = JSON.parse(JSON.stringify(state.game));\n      const currentCell: INumberCell = newGame.cells[index] as INumberCell;\n\n      if (currentCell.type === CellType.NumberCell) {\n        const index = currentCell.pencilMarks.indexOf(guess);\n\n        if (guess === 0) {\n          currentCell.pencilMarks = []\n        } else if (index < 0) {\n          // add new pencil mark\n          currentCell.pencilMarks.push(guess);\n          currentCell.pencilMarks.sort();\n        } else {\n          // remove existing pencil mark\n          currentCell.pencilMarks.splice(index, 1);\n        }\n        state.game = newGame;\n        localStorage.setItem('gameState', JSON.stringify(state));\n      }\n    },\n    toggleMarkWrong(state) {\n      state.markWrong = !state.markWrong;\n      localStorage.setItem('gameState', JSON.stringify(state));\n    },\n    autoPencil(state) {\n      // set guesses where there is only one pencil mark option\n      singlePencilmarksToGuess(state.game!);\n\n      // calculate pencil marks\n      makePencilmarks(state.game!);\n    },\n  },\n});\n\nexport const {\n  // fetchGameSuccess,\n  increaseZoom,\n  setGameState,\n  setSelectedIndex,\n  setCurrentGameSuccess,\n  setGuessSuccess,\n  autoPencil,\n  togglePencilMark,\n  toggleMarkWrong,\n} = gameSlice.actions;\n\nexport default gameSlice.reducer;\n\nexport const setCurrentGame =\n  (game: IGameData): AppThunk =>\n  async (dispatch: any) => {\n    const newGame: IGameData = JSON.parse(JSON.stringify(game));\n\n    // create pencilmarks for all number cells\n    newGame.cells\n      .filter(c => c.type === CellType.NumberCell)\n      .forEach(cell => {\n        const nCell = cell as INumberCell;\n        if (!nCell.guess) {\n          nCell.guess = 0;\n        }\n        if (!nCell.pencilMarks) {\n          nCell.pencilMarks = [];\n        }\n      });\n\n    dispatch(setCurrentGameSuccess(newGame));\n  };\n\nexport const setGuess =\n  ({ index, guess }: IGuess): AppThunk =>\n  async (dispatch, getState) => {\n    const { game, missingCells } = getState().game;\n    const newGame: IGameData = JSON.parse(JSON.stringify(game));\n    const currentCell = newGame.cells[index] as INumberCell;\n    let newMissingCells;\n\n    if (currentCell.type === CellType.NumberCell) {\n      if (currentCell.guess === 0 && guess !== 0) {\n        newMissingCells = missingCells - 1;\n      } else if (currentCell.guess > 0 && guess === 0) {\n        newMissingCells = missingCells + 1;\n      } else {\n        newMissingCells = missingCells;\n      }\n\n      currentCell.guess = guess;\n      // if (guess === 0) {\n      //   makePencilmarksForCell(currentCell, index, newGame);\n      // }\n      // state.game = newGame;\n\n      if (newMissingCells === 0) {\n        if (checkCorrect(newGame)) {\n          dispatch(setSuccessAlert('Puzzle solved. Congratulations!'));\n        } else {\n          dispatch(setWarningAlert('There are still mistakes in the puzzle'));\n        }\n      }\n\n      dispatch(setGuessSuccess({ newGame, newMissingCells }));\n    }\n  };\n","import { CellType, IGameData, IHintCell, INumberCell } from 'store/gameSlice';\nimport getCombinations from './getCombinations';\nimport getHints from './getHints';\nimport { guessNumber } from './solvePuzzle';\n\nexport function getRowForCell(\n  { cells, columnCount }: IGameData,\n  index: number,\n  across = true\n) {\n  const delta = across ? 1 : columnCount;\n  let x = index - delta;\n  let cellIndexes = [];\n  let usedDigits = [];\n  let sum = 0;\n  let sumSolved = 0;\n\n  while (cells[x].type === CellType.NumberCell) {\n    x -= delta;\n  }\n\n  let y = x;\n  while (\n    y + delta < cells.length &&\n    cells[y + delta].type === CellType.NumberCell\n  ) {\n    y += delta;\n    cellIndexes.push(y);\n    const nCell = cells[y] as INumberCell;\n    if (nCell.guess) {\n      usedDigits.push(nCell.guess);\n      sum += nCell.guess;\n    }\n\n    if (nCell.solution) {\n      sumSolved += nCell.solution;\n    }\n  }\n\n  const hint = across\n    ? (cells[x] as IHintCell).hintHorizontal\n    : (cells[x] as IHintCell).hintVertical;\n  const count = (y - x) / delta;\n\n  return { index, hint, count, sum, sumSolved, cellIndexes, usedDigits };\n}\n\nexport function getColumnForCell(game: IGameData, index: number) {\n  return getRowForCell(game, index, false);\n}\n\nexport function guessRemovesPencilmarks(game: IGameData, index: number) {}\n\nexport function singlePencilmarksToGuess(game: IGameData): boolean {\n  let setGuess = false;\n\n  game!.cells.forEach(c => {\n    if (c.type === CellType.NumberCell) {\n      const cell = c as INumberCell;\n      if (cell.guess == null && cell.pencilMarks?.length === 1) {\n        // cell.guess = cell.pencilMarks[0];\n        guessNumber(game, cell.index, cell.pencilMarks[0]);\n        setGuess = true;\n      }\n    }\n  });\n\n  return setGuess;\n}\n\nexport function makePencilmarksForCell(\n  nCell: INumberCell,\n  index: number,\n  game: IGameData\n) {\n  if (nCell.guess > 0) {\n    return;\n  }\n\n  // Filter out impossible combinations\n  const hints = getHints(game, index);\n  const hComb = getCombinations(hints[0]);\n  const vComb = getCombinations(hints[1]);\n  // Get possible digits\n  const hDigits = Array.from(new Set(hComb.flat()));\n  const vDigits = Array.from(new Set(vComb.flat()));\n\n  const used = [...hints[0].used, ...hints[1].used];\n  const poss = hDigits\n    .filter(e => vDigits.includes(e) && !used.includes(e))\n    .sort();\n\n  nCell.pencilMarks = poss;\n}\n\nexport function makePencilmarks(game: IGameData) {\n  game.cells.forEach((cell, index) => {\n    if (cell.type === CellType.NumberCell) {\n      makePencilmarksForCell(cell as INumberCell, index, game);\n    }\n  });\n}\n","import { CellType, IGameData, IHintCell } from 'store/gameSlice';\n\nfunction checkPuzzle(puzzle: IGameData) {\n  const { cells } = puzzle;\n  // TODO: Which clever checks should we implement?\n  // * are the sums possible?\n  let sumHorizontal = 0;\n  let sumVertical = 0;\n\n  // * are the values of rows and columns correct?\n\n  // * do all hint cells have all necessary hints?\n  const allHints = cells\n    .filter(c => c.type === CellType.HintCell)\n    .every(c => {\n      const hc = c as IHintCell;\n\n      if (hc.hintHorizontal) {\n        sumHorizontal += hc.hintHorizontal;\n      }\n\n      if (hc.hintVertical) {\n        sumVertical += hc.hintVertical;\n      }\n\n      return (\n        (!hc.hintHorizontal || hc.hintHorizontal > -1) &&\n        (!hc.hintVertical || hc.hintVertical > -1)\n      );\n    });\n\n  if (!allHints) {\n    return { valid: false, error: 'Not all hints provided.' };\n  }\n\n  if (sumHorizontal !== sumVertical) {\n    return {\n      valid: false,\n      error: `Hints across: ${sumHorizontal}, down: ${sumVertical}. Must be equal.`,\n    };\n  }\n\n  return { valid: true };\n}\n\nexport default checkPuzzle;\n","import { CellType, ICell, IGameData, IHintCell } from 'store/gameSlice';\nimport { getColumnForCell, getRowForCell } from './pencilmarks';\n\nexport function doCountMissingHints(puzzle: IGameData) {\n  const reducer = (prev: number, curr: ICell) => {\n    if (curr.type !== CellType.HintCell) {\n      return prev;\n    } else {\n      const hCell = curr as IHintCell;\n      return (\n        prev +\n        (hCell.hintHorizontal === -1 ? 1 : 0) +\n        (hCell.hintVertical === -1 ? 1 : 0)\n      );\n    }\n  };\n\n  return puzzle.cells.reduce(reducer, 0);\n}\n\nexport function doMakeHintCells(puzzle: IGameData) {\n  const { cells } = puzzle;\n  let hintCount = 0;\n\n  // no hint cells in last cell\n  for (let index = 0; index < cells.length - 1; index++) {\n    const cell: ICell = cells[index];\n    const nextColumn = index + 1;\n    const nextRow = index + puzzle.columnCount;\n\n    if (cell.type === CellType.BlankCell) {\n      if (cells[nextColumn].type === CellType.NumberCell) {\n        cell.type = CellType.HintCell;\n        (cell as IHintCell).hintHorizontal = -1;\n        hintCount += 1;\n      }\n\n      if (\n        nextRow < cells.length &&\n        cells[nextRow].type === CellType.NumberCell\n      ) {\n        cell.type = CellType.HintCell;\n        (cell as IHintCell).hintVertical = -1;\n        hintCount += 1;\n      }\n    } else if (cell.type === CellType.HintCell) {\n      const hCell = cell as IHintCell;\n      let isHint = false;\n\n      if (cells[nextColumn].type === CellType.NumberCell) {\n        if (hCell.hintHorizontal === -1) {\n          hintCount += 1;\n        }\n\n        isHint = true;\n      }\n\n      if (\n        nextRow < cells.length &&\n        cells[nextRow].type === CellType.NumberCell\n      ) {\n        if (hCell.hintVertical === -1) {\n          hintCount += 1;\n        }\n\n        isHint = true;\n      }\n\n      // check if hint cell is no longer a hint cell\n      if (!isHint) {\n        cell.type = CellType.BlankCell;\n      }\n    }\n  }\n\n  puzzle.hintCount = hintCount;\n  // console.log('puzzle:', JSON.stringify(puzzle));\n}\n\nexport function doFillHintsFromSolution(puzzle: IGameData) {\n  const { cells } = puzzle;\n\n  cells\n    .filter(c => c.type === CellType.HintCell)\n    .forEach(c => {\n      const hintCell = c as IHintCell;\n\n      if (hintCell.hintHorizontal === -1) {\n        const rowGroup = getRowForCell(puzzle, hintCell.index + 1);\n        hintCell.hintHorizontal = rowGroup.sumSolved;\n      }\n\n      if (hintCell.hintVertical === -1) {\n        const columnGroup = getColumnForCell(\n          puzzle,\n          hintCell.index + puzzle.columnCount\n        );\n        hintCell.hintVertical = columnGroup.sumSolved;\n      }\n    });\n}\n","import {\n  CellType,\n  IGameData,\n  INumberCell,\n  IServerGameData,\n} from 'store/gameSlice';\n\nfunction preparePuzzle(game: IGameData): IServerGameData {\n  const cellString = game.cells\n    .map(cell =>\n      cell.type !== CellType.NumberCell ? 0 : (cell as INumberCell).solution\n    )\n    .join('');\n\n  const { cells, ...newGame } = game;\n  const newServerGame = { ...newGame, cellString } as IServerGameData;\n\n  return newServerGame;\n}\n\nexport default preparePuzzle;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport kakuroApi from 'api/kakuroApi';\nimport { setErrorAlert, setSuccessAlert } from 'features/alerts/alertSlice';\nimport { addPuzzleToList, IListGame } from 'features/list/listSlice';\nimport authHeader from 'utils/authHeader';\nimport checkPuzzle from 'utils/checkPuzzle';\nimport { doCountMissingHints, doMakeHintCells } from 'utils/hintCells';\nimport preparePuzzle from 'utils/preparePuzzle';\nimport solvePuzzle from 'utils/solvePuzzle';\nimport {\n  CellType,\n  IBaseGame,\n  IGameData,\n  INumberCell,\n  PuzzleStates,\n} from './gameSlice';\nimport { AppThunk } from './store';\n\nexport enum Direction {\n  Horizontal = 0,\n  Vertical = 1,\n  Both = 2,\n}\n\nexport interface IDesignCell {\n  type: CellType;\n  index: number;\n  hintHorizontal?: number;\n  hintVertical?: number;\n  solution?: number;\n}\n\nexport enum DesignStepsEnum {\n  SetSize = 0,\n  DrawGrid = 1,\n  InsertHints = 2,\n  CheckPuzzle = 3,\n}\n\nexport const designSteps = [\n  { label: 'Set Size' },\n  { label: 'Draw Grid' },\n  { label: 'Insert Hints' },\n  { label: 'Check Puzzle' },\n];\n\ntype DesignSliceState = {\n  activeStep: number;\n  puzzle: IGameData;\n};\n\nconst createGrid = (columns: number, rows: number) =>\n  Array.from({ length: columns * rows }, (item, index) => ({\n    index,\n    type: CellType.BlankCell,\n  }));\n\nconst initialState: DesignSliceState = {\n  activeStep: 0,\n  puzzle: {\n    name: 'Unnamed',\n    level: 4,\n    columnCount: 10,\n    rowCount: 10,\n    cells: createGrid(10, 10),\n    state: PuzzleStates.Raw,\n    hintCount: -1,\n  },\n};\n\nexport const designSlice = createSlice({\n  name: 'design',\n  initialState,\n  reducers: {\n    setActiveStep: (state, action) => {\n      state.activeStep = action.payload;\n      localStorage.setItem('puzzleState', JSON.stringify(state));\n    },\n    setBaseGame: (state, action: PayloadAction<IBaseGame>) => {\n      state.puzzle = { ...state.puzzle, ...action.payload };\n      state.puzzle.cells = createGrid(\n        state.puzzle.columnCount,\n        state.puzzle.rowCount\n      );\n    },\n    clearDesignGame: () => {\n      localStorage.removeItem('puzzleState');\n      return initialState;\n    },\n    setPuzzleState: (state, action: PayloadAction<DesignSliceState>) => {\n      return action.payload;\n    },\n    updateCell: (state, action) => {\n      const newCell = action.payload;\n\n      if (\n        newCell.type === CellType.NumberCell &&\n        !(newCell as INumberCell).guess\n      ) {\n        (newCell as INumberCell).guess = 0;\n      }\n\n      state.puzzle.cells[newCell.index] = newCell;\n      state.puzzle.state = PuzzleStates.Raw;\n      state.puzzle.hintCount = doCountMissingHints(state.puzzle);\n    },\n    makeHintCells: state => {\n      doMakeHintCells(state.puzzle);\n    },\n    solveGameSuccess: (state, action: PayloadAction<IGameData>) => {\n      state.puzzle = action.payload;\n      state.puzzle.state = PuzzleStates.Solved;\n    },\n    solveGameFailed: state => {\n      state.puzzle.cells\n        .filter(c => c.type === CellType.NumberCell)\n        .forEach(c => ((c as INumberCell).solution = 0));\n      state.puzzle.state = PuzzleStates.Raw;\n      state.activeStep = DesignStepsEnum.InsertHints;\n    },\n    checkGameSuccess: state => {\n      state.puzzle.state = PuzzleStates.Valid;\n    },\n    createGameSuccess: () => {\n      // myHistory.push('/');\n      localStorage.removeItem('puzzleState');\n      return initialState;\n    },\n  },\n});\n\nexport const {\n  checkGameSuccess,\n  clearDesignGame,\n  createGameSuccess,\n  setActiveStep,\n  setBaseGame,\n  setPuzzleState,\n  makeHintCells,\n  solveGameSuccess,\n  solveGameFailed,\n  updateCell,\n} = designSlice.actions;\n\nexport default designSlice.reducer;\n\nexport const checkGame = (): AppThunk => async (dispatch: any, getState) => {\n  const { puzzle } = getState().design;\n  const isValid = checkPuzzle(puzzle);\n\n  if (isValid) {\n    dispatch(setSuccessAlert('Puzzle is valid.'));\n    dispatch(checkGameSuccess());\n  } else {\n    dispatch(setErrorAlert(`Puzzle invalid`));\n  }\n};\n\nexport const solveGame = (): AppThunk => async (dispatch: any, getState) => {\n  const { puzzle } = getState().design;\n  const result = solvePuzzle(puzzle);\n\n  if (result.error) {\n    dispatch(setErrorAlert(`Puzzle invalid: ${result.error}`));\n    dispatch(solveGameFailed());\n  } else {\n    dispatch(setSuccessAlert('Puzzle solved.'));\n    dispatch(solveGameSuccess(result.solution!));\n  }\n};\n\nexport interface IApiError {\n  code: number;\n  message: string;\n}\n\nexport const createGame =\n  (values: IGameData): AppThunk =>\n  async (dispatch: any) => {\n    // dispatch(submitting());\n    let puzzle = preparePuzzle(values);\n    let newPuzzle: IListGame;\n\n    try {\n      const response = await kakuroApi.post('/puzzles', puzzle, {\n        headers: authHeader(),\n      });\n      newPuzzle = response.data;\n    } catch (error) {\n      console.log('error:', JSON.stringify(error, null, 4));\n      dispatch(\n        setErrorAlert(\n          // `Error trying to save puzzle: ${(error as IApiError).message}`\n          `Error: Puzzle is already in database`\n        )\n      );\n      return;\n    }\n\n    dispatch(addPuzzleToList(newPuzzle));\n    dispatch(createGameSuccess());\n    dispatch(setSuccessAlert('Puzzle erzeugt.'));\n  };\n","import fileDownload from 'js-file-download';\nimport { Button } from 'primereact/button';\nimport { Dialog } from 'primereact/dialog';\nimport { InputTextarea } from 'primereact/inputtextarea';\nimport React, { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../../store/store';\nimport styles from './SaveGame.module.scss';\n\nconst ExportButton: React.FC = () => {\n  const [exportVisible, setExportVisible] = useState(false);\n  const [puzzleJSON, setPuzzleJSON] = useState('');\n  const { puzzle } = useSelector((state: RootState) => state.design);\n\n  useEffect(() => {\n    setPuzzleJSON(JSON.stringify(puzzle));\n  }, [puzzle]);\n\n  const handleDownload = () => {\n    const blob = new Blob([puzzleJSON]);\n    const filename = `kakuro-${puzzle.columnCount}x${puzzle.rowCount}.json`;\n    fileDownload(blob, filename);\n  };\n\n  return (\n    <>\n      <Button\n        label='Export Puzzle'\n        icon='mdi mdi-export'\n        onClick={() => setExportVisible(true)}\n        className={styles.button}\n      />\n\n      <Dialog\n        header='Spiel exportieren'\n        visible={exportVisible}\n        style={{ width: '50vw', height: '70vh' }}\n        modal\n        onHide={() => setExportVisible(false)}>\n        <InputTextarea\n          rows={8}\n          style={{ width: '100%', height: 'calc(100% - 48px)' }}\n          value={puzzleJSON}\n        />\n        <Button\n          icon='mdi mdi-download'\n          label='Download'\n          className={styles.button}\n          onClick={handleDownload}\n        />\n        <Button\n          icon='mdi mdi-close'\n          label='Cancel'\n          className={styles.button}\n          onClick={() => setExportVisible(false)}\n        />\n      </Dialog>\n    </>\n  );\n};\n\nexport default ExportButton;\n","import { Panel } from 'primereact/panel';\nimport { Button } from 'primereact/button';\nimport React, { FunctionComponent } from 'react';\nimport { useSelector } from 'react-redux';\nimport { designSteps } from 'store/designSlice';\nimport { RootState } from '../../store/store';\nimport ExportButton from './ExportButton';\n\ninterface Props {\n  children?: JSX.Element | JSX.Element[];\n  handleBack?: () => void;\n  handleNext?: () => void;\n}\n\nconst DesignPanel: FunctionComponent<Props> = props => {\n  const { handleBack, handleNext, children } = props;\n  const { activeStep } = useSelector((state: RootState) => state.design);\n\n  const headerTemplate = (options: any) => {\n    const className = `${options.className} p-jc-start`;\n    const titleClassName = `${options.titleClassName} p-pl-1`;\n\n    return (\n      <div className={className}>\n        <span className={titleClassName}>\n          Step {activeStep + 1}: {designSteps[activeStep].label}\n        </span>\n\n        <span className={titleClassName}>\n          <ExportButton />\n\n          <Button\n            label='Back'\n            icon='mdi mdi-arrow-left'\n            onClick={handleBack}\n            disabled={handleBack == null}\n            type='button'\n          />\n\n          <Button\n            label='Next'\n            icon='mdi mdi-arrow-right'\n            onClick={handleNext}\n            // disabled={activeStep === designSteps.length - 1}\n            disabled={handleNext == null}\n            type='button'\n          />\n        </span>\n      </div>\n    );\n  };\n\n  return <Panel headerTemplate={headerTemplate}>{children}</Panel>;\n};\n\nexport default DesignPanel;\n","import classNames from 'classnames';\nimport { Button } from 'primereact/button';\nimport { Dialog } from 'primereact/dialog';\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { CellType } from 'store/gameSlice';\nimport { RootState } from 'store/store';\nimport combinations from 'utils/combinations';\nimport { getRowForCell } from 'utils/pencilmarks';\nimport { IDesignCell, updateCell } from '../../store/designSlice';\nimport styles from './HintDialog.module.scss';\n\nexport interface Props {\n  cell: IDesignCell;\n  across: boolean;\n  down: boolean;\n  visible: boolean;\n  onHide: () => void;\n}\n\nconst HintDialog: React.FC<Props> = ({\n  cell,\n  across,\n  down,\n  visible,\n  onHide,\n}) => {\n  const { puzzle } = useSelector((state: RootState) => state.design);\n  const [options, setOptions] = useState<number[]>([]);\n  const dispatch = useDispatch();\n\n  const handleClick = (n: number, acrossHint: boolean) => {\n    const newCell = { ...cell, type: CellType.HintCell };\n    if (acrossHint) {\n      newCell.hintHorizontal = n;\n    } else {\n      newCell.hintVertical = n;\n    }\n\n    dispatch(updateCell(newCell));\n    if (!acrossHint || !down) {\n      onHide();\n    }\n  };\n\n  const renderButtons = (across: boolean) => {\n    const groupData = getRowForCell(\n      puzzle,\n      cell.index + (across ? 1 : puzzle.columnCount),\n      across\n    );\n\n    // console.log('groupData.index', groupData.index, 'groupData.count', groupData.count);\n    // const minSum = 3;\n    // const maxSum = 45;\n    const combs = Object.keys(combinations[groupData.count]).map(e => +e);\n    const minSum = Math.min(...combs);\n    const maxSum = Math.max(...combs);\n\n    return (\n      <div className=''>\n        <div className={styles.label}>{across ? 'Across' : 'Down'}</div>\n        <div className={styles.buttonGrid}>\n          {options.map(n => (\n            <Button\n              key={n}\n              label={n < minSum || n > maxSum ? '' : '' + n}\n              onClick={() => handleClick(n, across)}\n              disabled={n < minSum || n > maxSum}\n              className={classNames(\n                'p-button-rounded',\n                styles.button,\n                across ? 'p-button-success' : 'p-button-info'\n              )}\n            />\n          ))}\n        </div>\n      </div>\n    );\n  };\n\n  useEffect(() => {\n    // const numbers = Array.from({ length: 43 }, (e, i) => i + 3);\n    const numbers = Array.from({ length: 46 }, (e, i) => i);\n    setOptions(numbers);\n  }, []);\n\n  return (\n    <Dialog\n      header='Set number(s) for hint cell'\n      style={{ width: '30vw' }}\n      visible={visible}\n      modal={true}\n      onHide={onHide}>\n      {across && renderButtons(true)}\n      {down && renderButtons(false)}\n    </Dialog>\n  );\n};\n\nexport default HintDialog;\n","import classnames from 'classnames';\nimport React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { CellType } from 'store/gameSlice';\nimport {\n  DesignStepsEnum,\n  IDesignCell,\n  updateCell\n} from '../../store/designSlice';\nimport { RootState } from '../../store/store';\nimport '../playing/Cell.scss';\nimport '../playing/HintCell.scss';\nimport styles from './DesignCell.module.scss';\nimport HintDialog from './HintDialog';\n\nexport interface Props {\n  cell: IDesignCell;\n  index: number;\n}\n\nconst DesignCell: React.FC<Props> = ({ cell, index }) => {\n  const { activeStep } = useSelector((state: RootState) => state.design);\n  const dispatch = useDispatch();\n  const [dialogVisible, setDialogVisible] = useState(false);\n\n  const hide = () => {\n    setDialogVisible(false);\n  };\n\n  const handleClick = (e: React.MouseEvent) => {\n    if (activeStep === DesignStepsEnum.DrawGrid) {\n      // Toggle between blank and number cell\n      const newCell = {\n        ...cell,\n        type:\n          cell.type === CellType.NumberCell\n            ? CellType.BlankCell\n            : CellType.NumberCell,\n      };\n      dispatch(updateCell(newCell));\n    } else if (activeStep === 2 && cell.type === CellType.HintCell) {\n      // Show dialog to pick hint value\n      setDialogVisible(true);\n    }\n  };\n\n  const renderHint = (value: number | undefined) => {\n    if (value) {\n      const hintStr = value > 0 ? value : '?';\n      const hintClass = value > 0 ? '' : styles.hintMissing;\n      return <div className={hintClass}>{hintStr}</div>;\n    } else {\n      return null;\n    }\n  };\n\n  return (\n    <>\n      <div\n        className={classnames(styles.designCell, cell.type)}\n        onClick={handleClick}>\n        {/* <div className={styles.index}>{cell.index}</div> */}\n        <div className='horizontalHint'>{renderHint(cell.hintHorizontal)}</div>\n        <div className='verticalHint'>{renderHint(cell.hintVertical)}</div>\n        <div className={styles.solution}>{renderHint(cell.solution)}</div>\n      </div>\n\n      {activeStep === DesignStepsEnum.InsertHints && (\n        <HintDialog\n          cell={cell}\n          visible={dialogVisible}\n          onHide={hide}\n          across={cell.hintHorizontal != null}\n          down={cell.hintVertical != null}\n        />\n      )}\n    </>\n  );\n};\n\nexport default DesignCell;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { IDesignCell } from 'store/designSlice';\nimport { RootState } from '../../store/store';\nimport DesignCell from './DesignCell';\nimport styles from './DrawGrid.module.scss';\n\nconst DrawGrid: React.FC = () => {\n  const {\n    puzzle: { columnCount, cells },\n  } = useSelector((state: RootState) => state.design);\n\n  return (\n    <div>\n      <div className={styles.gameBackground}>\n        <div\n          className={styles.grid}\n          style={{\n            gridTemplateColumns: `repeat(${columnCount}, 1fr)`,\n          }}>\n          {cells.map((c, i) => (\n            <DesignCell key={i} index={i} cell={c as IDesignCell} />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default DrawGrid;\n","import classNames from 'classnames';\nimport myHistory from 'myHistory';\nimport { Button } from 'primereact/button';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  clearDesignGame,\n  createGame,\n  setActiveStep,\n  solveGame\n} from 'store/designSlice';\nimport { PuzzleStates, setCurrentGame } from 'store/gameSlice';\nimport { RootState } from '../../store/store';\nimport DesignPanel from './DesignPanel';\nimport DrawGrid from './DrawGrid';\nimport styles from './SaveGame.module.scss';\n\nconst SaveGame: React.FC = () => {\n  const dispatch = useDispatch();\n  const { activeStep, puzzle } = useSelector(\n    (state: RootState) => state.design\n  );\n\n  const handleBack = () => {\n    dispatch(setActiveStep(activeStep - 1));\n  };\n\n  const handlePlay = () => {\n    dispatch(setCurrentGame(puzzle));\n    myHistory.push('/play');\n  };\n\n  const handleSolve = () => {\n    dispatch(solveGame());\n  };\n\n  const handleSend = () => {\n    dispatch(createGame(puzzle));\n  };\n\n  const handleClear = () => {\n    dispatch(clearDesignGame());\n  };\n\n  return (\n    <DesignPanel handleBack={handleBack}>\n      <>\n        <Button\n          label='Solve'\n          icon='mdi mdi-brain'\n          onClick={handleSolve}\n          className={styles.button}\n        />\n\n        <Button\n          label='Send to Server & Play'\n          icon='mdi mdi-send'\n          onClick={handleSend}\n          className={styles.button}\n          disabled={puzzle.state !== PuzzleStates.Solved}\n        />\n\n        <Button\n          label='Play Locally'\n          icon='mdi mdi-play'\n          onClick={handlePlay}\n          className={styles.button}\n        />\n\n        <Button\n          label='Start Over'\n          icon='mdi mdi-restart'\n          onClick={handleClear}\n          className={classNames(\n            styles.button,\n            'p-button-warning',\n            'p-button-success'\n          )}\n        />\n      </>\n\n      <DrawGrid />\n    </DesignPanel>\n  );\n};\n\nexport default SaveGame;\n","import { CellType, IGameData } from 'store/gameSlice';\nimport { getColumnForCell, getRowForCell } from './pencilmarks';\n\nexport interface IValidatePuzzleResult {\n  valid: boolean;\n  message: string;\n}\n\nfunction validatePuzzle(puzzle: IGameData): IValidatePuzzleResult {\n  const { cells } = puzzle;\n  let numberCount = 0;\n\n  // check that there is at least two groups with count > 1\n  // and that there are no groups with count 1\n  for (let index = 0; index < cells.length; index++) {\n    const cell = cells[index];\n\n    if (cell.type === CellType.NumberCell) {\n      numberCount += 1;\n\n      const row = getRowForCell(puzzle, cell.index);\n      if (row.count === 1) {\n        return {\n          valid: false,\n          message: 'There is at least one group across with only one cell',\n        };\n      }\n\n      const column = getColumnForCell(puzzle, cell.index);\n      if (column.count === 1) {\n        return {\n          valid: false,\n          message: 'There is at least one group down with only one cell',\n        };\n      }\n    }\n  }\n\n  return numberCount < 3\n    ? { valid: false, message: 'Too few number cells' }\n    : { valid: true, message: 'Puzzle grid is fine' };\n}\n\nexport default validatePuzzle;\n","import { setErrorAlert } from 'features/alerts/alertSlice';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setActiveStep } from 'store/designSlice';\nimport validatePuzzle from 'utils/validateGrid';\nimport { RootState } from '../../store/store';\nimport DesignPanel from './DesignPanel';\nimport DrawGrid from './DrawGrid';\n\nconst SetCells: React.FC = () => {\n  const { activeStep, puzzle } = useSelector(\n    (state: RootState) => state.design\n  );\n  const dispatch = useDispatch();\n\n  const handleBack = () => {\n    dispatch(setActiveStep(activeStep - 1));\n  };\n\n  const handleNext = () => {\n    const res = validatePuzzle(puzzle);\n    if (res.valid) {\n      dispatch(setActiveStep(activeStep + 1));\n    } else {\n      dispatch(setErrorAlert(res.message));\n    }\n  };\n\n  return (\n    <DesignPanel handleBack={handleBack} handleNext={handleNext}>\n      <DrawGrid />\n    </DesignPanel>\n  );\n};\n\nexport default SetCells;\n","import { setErrorAlert } from 'features/alerts/alertSlice';\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { makeHintCells, setActiveStep } from 'store/designSlice';\nimport checkPuzzle from 'utils/checkPuzzle';\nimport { RootState } from '../../store/store';\nimport DesignPanel from './DesignPanel';\nimport DrawGrid from './DrawGrid';\n\nconst SetHints: React.FC = () => {\n  const { activeStep, puzzle } = useSelector(\n    (state: RootState) => state.design\n  );\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(makeHintCells());\n  });\n\n  const handleBack = () => {\n    dispatch(setActiveStep(activeStep - 1));\n  };\n\n  const handleNext = () => {\n    const res = checkPuzzle(puzzle);\n\n    if (res.valid) {\n      dispatch(setActiveStep(activeStep + 1));\n    } else {\n      dispatch(setErrorAlert(res.error || \"Error in puzzle\"));\n    }\n  };\n\n  return (\n    <DesignPanel handleNext={handleNext} handleBack={handleBack}>\n      <DrawGrid />\n      <div className='notes'>Missing hints: {puzzle.hintCount}</div>\n    </DesignPanel>\n  );\n};\n\nexport default SetHints;\n","import { ErrorMessage, Field } from 'formik';\nimport React from 'react';\n\ninterface Props {\n  name: string;\n  label: string;\n  as: any;\n  hint?: string;\n  [key: string]: any;\n}\n\nconst MyInput: React.FC<Props> = props => {\n  const { label, name, hint } = props;\n\n  return (\n    <div className='field grid'>\n      {/* <label htmlFor={name} className='block text-900 font-medium mb-2'> */}\n      <label htmlFor={name} className='col-12 mb-2 md:col-2 md:mb-0'>\n        {label}\n      </label>\n\n      <div className='col-12 md:col-10'>\n        {/* <Field {...props} className='w-full mb-3' /> */}\n        <Field {...props} className=\"inputfield w-full\" />\n        {hint && <div dangerouslySetInnerHTML={{ __html: hint }} />}\n        <ErrorMessage\n          name={name}\n          component='div'\n          className='fieldErrorMessage'\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default MyInput;\n","import {\n  SelectButton,\n  SelectButtonChangeParams,\n} from 'primereact/selectbutton';\nimport React from 'react';\n\ninterface Props {\n  field: string;\n  label: string;\n  values: { [key: string]: any };\n  options: any;\n  setFieldValue: (label: string, newValue: number) => void;\n}\n\nconst MySlider: React.FC<Props> = ({\n  values,\n  field,\n  label,\n  options,\n  setFieldValue,\n}) => {\n  const handleChange = (event: SelectButtonChangeParams) => {\n    setFieldValue(field, event.value as number);\n  };\n\n  return (\n    <div className='field grid'>\n      <label htmlFor={field} className='col-12 mb-2 md:col-2 md:mb-0'>\n        {label}\n      </label>\n\n      <div className='col-12 md:col-10'>\n        <SelectButton\n          id={field}\n          value={values[field]}\n          options={options}\n          onChange={event => handleChange(event)}\n          className='justify-content-start'\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default MySlider;\n","import { InputNumber } from 'primereact/inputnumber';\nimport { Slider, SliderChangeParams } from 'primereact/slider';\nimport React from 'react';\n\ninterface Props {\n  field: string;\n  label: string;\n  values: { [key: string]: any };\n  min?: number;\n  max?: number;\n  setFieldValue: (label: string, newValue: number) => void;\n}\n\nconst MySlider: React.FC<Props> = ({\n  values,\n  field,\n  label,\n  setFieldValue,\n  min,\n  max,\n}) => {\n  const handleChange = (event: SliderChangeParams) => {\n    setFieldValue(field, event.value as number);\n  };\n\n  return (\n    <div className='field grid'>\n      <label htmlFor={field} className='col-12 mb-2 md:col-2 md:mb-0'>\n        {label}\n      </label>\n\n      <div className='col-12 md:col-10'>\n        <InputNumber\n          value={values[field]}\n          onChange={event => handleChange(event)}\n          className='inputfield w-full'\n        />\n\n        <Slider\n          id={field}\n          value={values[field]}\n          onChange={event => handleChange(event)}\n          min={min}\n          max={max}\n          className='inputfield w-full'\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default MySlider;\n","export const difficultyLevels = {\n  0: 'Easy',\n  1: 'Medium',\n  2: 'Medium Plus',\n  3: 'Hard',\n  4: 'Very Hard',\n};\n\nexport const difficultyLabels = [\n  {\n    label: 'Easy',\n    value: 0,\n  },\n  {\n    label: 'Medium',\n    value: 1,\n  },\n  {\n    label: 'Medium Plus',\n    value: 2,\n  },\n  {\n    label: 'Hard',\n    value: 3,\n  },\n  {\n    label: 'Very Hard',\n    value: 4,\n  },\n];\n","import MyInput from 'components/MyInput';\nimport MySelectButton from 'components/MySelectButton';\nimport MySlider from 'components/MySlider';\nimport { Form, Formik, FormikProps } from 'formik';\nimport { Button } from 'primereact/button';\nimport { Dialog } from 'primereact/dialog';\nimport { InputText } from 'primereact/inputtext';\nimport { InputTextarea } from 'primereact/inputtextarea';\nimport React, { useRef, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setActiveStep, setBaseGame, setPuzzleState } from 'store/designSlice';\nimport { IBaseGame, IGameData } from 'store/gameSlice';\nimport { difficultyLabels } from 'types/puzzle';\nimport * as Yup from 'yup';\nimport { RootState } from '../../store/store';\nimport DesignPanel from './DesignPanel';\n\nconst minColumns = 4;\n\nconst PuzzleSchema = Yup.object().shape({\n  name: Yup.string()\n    .max(50, 'Must be 50 characters or less')\n    .required('Required'),\n  level: Yup.number().min(0).max(4).required(),\n  columnCount: Yup.number()\n    .min(minColumns, `Must be between ${minColumns} and 30`)\n    .max(30)\n    .required('Required'),\n  rowCount: Yup.number()\n    .min(minColumns, `Must be between ${minColumns} and 30`)\n    .max(30)\n    .required('Required'),\n});\n\nconst SetSize: React.FC = () => {\n  const [importVisible, setImportVisible] = useState(false);\n  const [puzzleJSON, setPuzzleJSON] = useState('');\n  const dispatch = useDispatch();\n  const { activeStep, puzzle } = useSelector(\n    (state: RootState) => state.design\n  );\n  const initialValues: IBaseGame = puzzle;\n  // const formikRef = useRef<FormikProps<FormikValues>>(null);\n  const formikRef = useRef<FormikProps<IBaseGame>>(null);\n\n  const handleNext = () => {\n    if (formikRef.current) {\n      formikRef.current.handleSubmit();\n    }\n\n    dispatch(setActiveStep(activeStep + 1));\n  };\n\n  const handleSubmit = (values: IBaseGame) => {\n    dispatch(setBaseGame(values));\n  };\n\n  const handleImport = (e: React.MouseEvent) => {\n    const newPuzzle: IGameData = JSON.parse(puzzleJSON);\n    console.log('newPuzzle', newPuzzle);\n    setImportVisible(false);\n    dispatch(setPuzzleState({ activeStep: 1, puzzle: newPuzzle }));\n  };\n\n  return (\n    <Formik\n      enableReinitialize\n      initialValues={initialValues}\n      onSubmit={handleSubmit}\n      validationSchema={PuzzleSchema}\n      innerRef={formikRef}>\n      {({ setFieldValue, values }) => (\n        <DesignPanel handleNext={handleNext}>\n          <h1>Import Puzzle</h1>\n\n          <Button\n            label='Import Puzzle'\n            icon='mdi mdi-import'\n            onClick={() => setImportVisible(true)}\n            // className={styles.button}\n          />\n\n          <h1>…Or Create Puzzle</h1>\n          <Form>\n            <MyInput name='name' label='Puzzle Name' as={InputText} />\n\n            <MySelectButton\n              field='level'\n              label='Difficulty'\n              setFieldValue={setFieldValue}\n              options={difficultyLabels}\n              values={values}\n            />\n\n            <MySlider\n              field='columnCount'\n              label='Columns Across'\n              setFieldValue={setFieldValue}\n              min={minColumns}\n              max={40}\n              values={values}\n            />\n\n            <MySlider\n              field='rowCount'\n              label='Rows Down'\n              setFieldValue={setFieldValue}\n              min={minColumns}\n              max={40}\n              values={values}\n            />\n\n            {/* <Button type='submit' label='Set Size' className='' /> */}\n          </Form>\n\n          <Dialog\n            header='Spiel importieren'\n            visible={importVisible}\n            style={{ width: '50vw' }}\n            modal\n            onHide={() => setImportVisible(false)}>\n            <InputTextarea\n              rows={8}\n              style={{ width: '100%' }}\n              value={puzzleJSON}\n              onChange={event => setPuzzleJSON(event.target.value)}\n            />\n            <Button label='Import' onClick={handleImport} />\n          </Dialog>\n        </DesignPanel>\n      )}\n    </Formik>\n  );\n};\n\nexport default SetSize;\n","import { Panel } from 'primereact/panel';\nimport { Steps } from 'primereact/steps';\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { designSteps, setPuzzleState } from 'store/designSlice';\nimport { RootState } from '../../store/store';\nimport styles from './CreateGame.module.scss';\nimport SaveGame from './SaveGame';\nimport SetCells from './SetCells';\nimport SetHints from './SetHints';\nimport SetSize from './SetSize';\n\nconst CreateGame: React.FC = () => {\n  const dispatch = useDispatch();\n  const { activeStep } = useSelector((state: RootState) => state.design);\n\n  useEffect(() => {\n    const puzzleStateJSON = localStorage.getItem('puzzleState');\n    if (puzzleStateJSON) {\n      console.log('Found puzzle in local storage');\n      const state = JSON.parse(puzzleStateJSON);\n      dispatch(setPuzzleState(state));\n    }\n  }, [dispatch]);\n\n  return (\n    <div className={styles.createGame}>\n      <Panel header='Create a new Kakuro puzzle'>\n        <div className={styles.createSteps}>\n          <Steps model={designSteps} activeIndex={activeStep} />\n        </div>\n      </Panel>\n\n      {activeStep === 0 && <SetSize />}\n      {activeStep === 1 && <SetCells />}\n      {activeStep === 2 && <SetHints />}\n      {activeStep === 3 && <SaveGame />}\n    </div>\n  );\n};\n\nexport default CreateGame;\n","import { format } from 'date-fns';\nimport { Column } from 'primereact/column';\nimport { DataTable } from 'primereact/datatable';\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState } from 'store/store';\nimport { difficultyLevels } from 'types/puzzle';\nimport { fetchList, IListGame, setChoiceID } from './listSlice';\n\nconst PuzzleList: React.FC = () => {\n  const { list, choice } = useSelector((state: RootState) => state.list);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchList());\n  }, [dispatch]);\n\n  const formatDate = (date: Date) => format(date, 'dd-MM-yyyy');\n\n  const difficultyTemplate = (puzzle: IListGame) =>\n    difficultyLevels[puzzle.level];\n\n  const dateTemplate = (puzzle: IListGame) =>\n    formatDate(new Date(puzzle.createdAt));\n\n  return (\n    // <Panel header='List of Puzzles'>\n    <DataTable\n      value={list}\n      autoLayout\n      stripedRows\n      className='p-datatable-sm'\n      scrollable\n      scrollHeight='60vh'\n      selectionMode='single'\n      selection={choice}\n      onSelectionChange={e => dispatch(setChoiceID(e.value))}\n      dataKey='_id'\n      style={{ width: '80vw' }}>\n      <Column field='name' header='Puzzle name' sortable />\n      <Column\n        field='level'\n        header='Difficulty'\n        body={difficultyTemplate}\n        filter\n        sortable\n      />\n      <Column field='columnCount' header='Columns' sortable />\n      <Column field='rowCount' header='Rows' sortable />\n      <Column field='creatorName' header='Creator' filter sortable />\n      <Column field='createdAt' header='Date' body={dateTemplate} sortable />\n    </DataTable>\n    // </Panel>\n  );\n};\n\nexport default PuzzleList;\n","import { IListGame } from 'features/list/listSlice';\nimport { CellType, IGameData, PuzzleStates } from 'store/gameSlice';\nimport { doMakeHintCells, doFillHintsFromSolution } from './hintCells';\n\nfunction makePlayable(input: IListGame): IGameData {\n  // convert each digit of cell string to proper cell\n  const cells = input.cellString.split('').map((char, index) => {\n    if (+char >= 1 && +char <= 9) {\n      return {\n        index,\n        type: CellType.NumberCell,\n        guess: 0,\n        solution: +char,\n        pencilMarks: [],\n      };\n    } else {\n      return { index, type: CellType.BlankCell };\n    }\n  });\n\n  // make hint cells\n  const newPuzzle: IGameData = {\n    ...input,\n    cells,\n    state: PuzzleStates.Solved,\n    hintCount: -1,\n  };\n\n  doMakeHintCells(newPuzzle);\n  doFillHintsFromSolution(newPuzzle);\n\n  // JSON.stringify(newPuzzle, null, 4);\n  return newPuzzle;\n}\n\nexport default makePlayable;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport classNames from 'classnames';\nimport PuzzleList from 'features/list/PuzzleList';\nimport myHistory from 'myHistory';\nimport { Button } from 'primereact/button';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setCurrentGame } from 'store/gameSlice';\nimport { RootState } from 'store/store';\nimport makePlayable from 'utils/makePlayable';\nimport styles from './MainMenu.module.scss';\n\nconst MainMenu: React.FC = () => {\n  const { choice } = useSelector((state: RootState) => state.list);\n  const dispatch = useDispatch();\n\n  const handlePlay = () => {\n    const newPuzzle = makePlayable(choice!);\n    dispatch(setCurrentGame(newPuzzle));\n    myHistory.push('/play');\n  };\n\n  return (\n    <div className={styles.content}>\n      <div className={classNames('text-center')}>\n        <div className='mb-3 font-bold text-2xl'>\n          <span className='text-900'>The best </span>\n          <span className='text-blue-600'>Kakuro Game </span>\n          <span className='text-900'>money can buy</span>\n        </div>\n        <div className='text-700 text-sm mb-6'>\n          All of this is work in progress, so be patient and stay tuned.\n        </div>\n\n        <div className='flex flex-row justify-content-center'>\n          <div className='w-15rem h-4rem'>\n            <Button\n              label='Create game'\n              icon='mdi mdi-pencil'\n              className='p-button-lg'\n              onClick={e => myHistory.push('/create')}\n            />\n          </div>\n\n          <div className='w-15rem h-4rem'>\n            <Button\n              label='Play Game!'\n              icon='mdi mdi-controller-classic'\n              className='p-button-lg'\n              onClick={handlePlay}\n              disabled={!choice}\n            />\n          </div>\n        </div>\n\n        <div className=''>\n          <PuzzleList />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default MainMenu;\n","// https://usehooks.com/useEventListener/\nimport { useEffect, useRef } from 'react';\n\nfunction useEventListener(eventName, handler, element = window) {\n  // Create a ref that stores handler\n  const savedHandler = useRef();\n  // Update ref.current value if handler changes.\n  // This allows our effect below to always get latest handler ...\n  // ... without us needing to pass it in effect deps array ...\n  // ... and potentially cause effect to re-run every render.\n  useEffect(() => {\n    savedHandler.current = handler;\n  }, [handler]);\n\n  useEffect(\n    () => {\n      // Make sure element supports addEventListener\n      // On\n      const isSupported = element && element.addEventListener;\n      if (!isSupported) return;\n      // Create event listener that calls handler function stored in ref\n      const eventListener = event => savedHandler.current(event);\n      // Add event listener\n      element.addEventListener(eventName, eventListener);\n      // Remove event listener on cleanup\n      return () => {\n        element.removeEventListener(eventName, eventListener);\n      };\n    },\n\n    [eventName, element] // Re-run if eventName or element changes\n  );\n}\n\nexport default useEventListener;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport {\n  CellType,\n  IGameData,\n  setGuess,\n  setSelectedIndex,\n} from '../store/gameSlice';\nimport useEventListener from 'hooks/useEventListener';\nimport React, { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState } from 'store/store';\n\nconst KeyboardListener: React.FC = () => {\n  const dispatch = useDispatch();\n  const { game, selectedIndex } = useSelector((state: RootState) => state.game);\n  const { cells } = game as IGameData;\n\n  const selectCell = (newIndex: number) => {\n    if (\n      newIndex > game.columnCount &&\n      newIndex < cells.length &&\n      cells[newIndex].type === CellType.NumberCell\n    ) {\n      dispatch(setSelectedIndex(newIndex));\n    }\n  };\n\n  const handleKeyDown = useCallback(\n    ({ key }) => {\n      // console.log(`handleKeyDown(${key})`);\n\n      if (!selectedIndex) {\n        // do nothing if no cell selected\n        return;\n      }\n      if (key === 'ArrowUp' && game) {\n        selectCell(selectedIndex - game.columnCount);\n      } else if (key === 'ArrowDown' && game) {\n        selectCell(selectedIndex + game.columnCount);\n      } else if (key === 'ArrowLeft' && game) {\n        selectCell(selectedIndex - 1);\n      } else if (key === 'ArrowRight' && game) {\n        selectCell(selectedIndex + 1);\n      } else if (key >= '0' && key <= '9') {\n        dispatch(setGuess({ index: selectedIndex, guess: +key }));\n      } else if (key === 'Delete') {\n        dispatch(setGuess({ index: selectedIndex, guess: 0 }));\n      } else {\n        console.log('Key pressed:', key);\n      }\n    },\n    [selectedIndex]\n  );\n\n  useEventListener('keydown', handleKeyDown);\n  return <></>;\n};\n\nexport default KeyboardListener;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport getCombinations from 'utils/getCombinations';\nimport React, { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../../store/store';\nimport styles from './CombinationLine.module.scss';\n\nconst CombinationLine: React.FC = () => {\n  const { hints } = useSelector((state: RootState) => state.game);\n  const [possibilities, setPossibilities] = useState<number[][][]>([[], []]);\n\n  const renderDigit = (d: number, direction: number) => {\n    const key = 'd' + d + '' + direction;\n\n    if (hints[direction].used.includes(d)) {\n      return (\n        <span className={styles.highlight} key={key}>\n          {d}\n        </span>\n      );\n    } else {\n      return <span key={key}>{d}</span>;\n    }\n  };\n\n  const renderPossibility = (a: number[], index: number, direction: number) => {\n    const key = 'p' + a[0] + '' + index + '' + direction;\n\n    return (\n      <span className={styles.possibility} key={key}>\n        {a.map(d => renderDigit(d, direction))}\n      </span>\n    );\n  };\n\n  const renderPossibilities = (a: number[][], direction: number) => {\n    const key = 'ps' + a[0] + '' + direction;\n\n    return (\n      <span key={key}>\n        {a.map((b, i) => renderPossibility(b, i, direction))}\n      </span>\n    );\n  };\n\n  const renderLine = (direction: number) => {\n    if (hints[direction].sum < 0) {\n      return '\\u00a0';\n    } else {\n      return (\n        <>\n          <span className={styles.sum}>{hints[direction].sum}:</span>\n          {renderPossibilities(possibilities[direction], direction)}\n        </>\n      );\n    }\n  };\n\n  useEffect(() => {\n    if (hints[0].index > -1) {\n      setPossibilities([getCombinations(hints[0]), getCombinations(hints[1])]);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [hints]);\n\n  return (\n    <div className={styles.combinations}>\n      <div className={styles.text}>\n        <div>{renderLine(0)}</div>\n        <div>{renderLine(1)}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default CombinationLine;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport classNames from 'classnames';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setGuess, togglePencilMark } from '../../store/gameSlice';\nimport { RootState } from '../../store/store';\nimport styles from './GuessButton.module.scss';\n\nexport interface Props {\n  digit: number;\n  pencilMark: boolean;\n}\n\nconst GuessButton: React.FC<Props> = ({ digit, pencilMark }) => {\n  const { selectedIndex } = useSelector((state: RootState) => state.game);\n  const dispatch = useDispatch();\n\n  const handleGuessClick = (event: React.MouseEvent) => {\n    if (digit >= 0 && digit <= 9 && selectedIndex) {\n      if (pencilMark) {\n        dispatch(togglePencilMark({ index: selectedIndex, guess: digit }));\n      } else {\n        dispatch(setGuess({ index: selectedIndex, guess: digit }));\n      }\n    }\n  };\n\n  return (\n    <div\n      className={classNames(\n        styles.guessButton,\n        pencilMark && styles.pencilMark,\n        styles.pencilMark1\n      )}\n      onClick={handleGuessClick}>\n      <div className={classNames(styles.digit, pencilMark && styles[`digit${digit}`])}>\n        {digit}\n      </div>\n    </div>\n  );\n};\n\nexport default GuessButton;\n","import { ToggleButton } from 'primereact/togglebutton';\nimport classnames from 'classnames';\nimport { Button } from 'primereact/button';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  autoPencil,\n  increaseZoom,\n  setGuess,\n  toggleMarkWrong,\n  togglePencilMark,\n} from '../../store/gameSlice';\nimport { RootState } from '../../store/store';\nimport styles from './Controls.module.scss';\nimport GuessButton from './GuessButton';\n\n/*\n * Here be number buttons for guesses and pencil marks\n */\nconst Controls: React.FC = () => {\n  const { selectedIndex, zoomLevel, markWrong, missingCells } = useSelector(\n    (state: RootState) => state.game\n  );\n  const dispatch = useDispatch();\n  const digits = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n\n  const handleZoom = (delta: number) => dispatch(increaseZoom(delta));\n\n  const handleDelete = (event: React.MouseEvent) => {\n    if (selectedIndex) {\n      dispatch(setGuess({ index: selectedIndex, guess: 0 }));\n    }\n  };\n\n  const handleDeletePencilMarks = (event: React.MouseEvent) => {\n    if (selectedIndex) {\n      dispatch(togglePencilMark({ index: selectedIndex, guess: 0 }));\n    }\n  };\n\n  const handleAutoPencil = (event: React.MouseEvent) => {\n    dispatch(autoPencil());\n  };\n\n  const renderButton = (digit: number, pencilMark: boolean) => {\n    return <GuessButton key={digit} digit={digit} pencilMark={pencilMark} />;\n  };\n\n  return (\n    <aside className={classnames('controls', styles.controls)}>\n      <div className={styles.zoomButtons}>\n        <Button\n          className={'p-button-lg'}\n          icon='mdi mdi-magnify-minus'\n          onClick={() => handleZoom(-1)}\n          disabled={zoomLevel < 1}\n        />\n        <Button\n          className={'p-button-lg'}\n          label='100 %'\n          onClick={() => handleZoom(0)}\n        />\n        <Button\n          className={'p-button-lg'}\n          icon='mdi mdi-magnify-plus'\n          onClick={() => handleZoom(1)}\n          disabled={zoomLevel > 10}\n        />\n      </div>\n\n      <div className={styles.guessButtons}>\n        <div className={styles.columns}>\n          {digits.map(d => renderButton(d, true))}\n        </div>\n\n        <Button\n          className={classnames(\n            'button',\n            'is-warning',\n            'is-large',\n            styles.button\n          )}\n          icon='mdi mdi-pencil-off'\n          label='Delete'\n          onClick={handleDeletePencilMarks}\n        />\n\n        <Button\n          className={classnames('button is-large', styles.button)}\n          onClick={handleAutoPencil}\n          label='Auto Pencil'\n          icon=\"mdi mdi-pencil\"\n        />\n\n        <div className={styles.columns}>\n          {digits.map(d => renderButton(d, false))}\n        </div>\n\n        <Button\n          className={classnames(\n            'button',\n            'is-warning',\n            'is-large',\n            styles.button\n          )}\n          icon='mdi mdi-delete'\n          label='Delete'\n          onClick={handleDelete}\n        />\n      </div>\n\n      <div className=''>\n        <ToggleButton\n          checked={markWrong}\n          onLabel='Show mistakes'\n          offLabel='Hide mistakes'\n          onIcon=\"mdi mdi-eye\"\n          offIcon=\"mdi mdi-eye-off\"\n          onChange={() => dispatch(toggleMarkWrong())}\n        />\n      </div>\n\n      <div className='debug'>\n        <div>Missing: {missingCells}</div>\n      </div>\n    </aside>\n  );\n};\n\nexport default Controls;\n","export function calcCellSize(zoomLevel: number) {\n  return { width: `${zoomLevel}rem` };\n}\n\nexport function calcGuessFontSize(zoomLevel: number) {\n  return { fontSize: `${zoomLevel / 1.5}rem` };\n}\n\nexport function calcHintFontSize(zoomLevel: number) {\n  return { fontSize: `${zoomLevel / 2.4 }rem` };\n}\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport classnames from 'classnames';\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport { RootState } from 'store/store';\nimport { calcCellSize } from 'utils/calcCellSize';\nimport { IBlankCell } from '../../store/gameSlice';\nimport styles from './BlankCell.module.scss';\n\nexport interface Props {\n  cell: IBlankCell;\n  index: number;\n}\n\nconst BlankCell: React.FC<Props> = ({ cell, index }) => {\n  const { zoomLevel } = useSelector((state: RootState) => state.game);\n  const style = calcCellSize(zoomLevel);\n\n  return (\n    <div className={classnames('gamecell', styles.blank)} style={style}></div>\n  );\n};\n\nexport default BlankCell;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport classnames from 'classnames';\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport { RootState } from 'store/store';\nimport { calcCellSize, calcHintFontSize } from 'utils/calcCellSize';\nimport { IHintCell } from '../../store/gameSlice';\nimport './HintCell.scss';\n\nexport interface Props {\n  cell: IHintCell;\n  index: number;\n}\n\nconst HintCell: React.FC<Props> = ({ cell, index }) => {\n  const { zoomLevel } = useSelector((state: RootState) => state.game);\n  const style = calcCellSize(zoomLevel);\n  const fontSize = calcHintFontSize(zoomLevel);\n\n  return (\n    <div className={classnames('gamecell', 'hintCell')} style={style}>\n      <div className='horizontalHint' style={fontSize}>\n        {cell.hintHorizontal}\n      </div>\n      <div className='verticalHint' style={fontSize}>\n        {cell.hintVertical}\n      </div>\n    </div>\n  );\n};\n\nexport default HintCell;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport classnames from 'classnames';\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { INumberCell, setSelectedIndex } from '../../store/gameSlice';\nimport styles from './NumberCell.module.scss';\nimport { RootState } from '../../store/store';\nimport { useSelector } from 'react-redux';\nimport { calcGuessFontSize } from 'utils/calcCellSize';\n\nexport interface Props {\n  cell: INumberCell;\n  index: number;\n}\n\nconst NumberCell: React.FC<Props> = ({ cell, index }) => {\n  const { selectedIndex, zoomLevel, markWrong } = useSelector(\n    (state: RootState) => state.game\n  );\n  const dispatch = useDispatch();\n  const guessFontSize = calcGuessFontSize(zoomLevel);\n\n  const handleClick = (event: React.MouseEvent) => {\n    dispatch(setSelectedIndex(index));\n  };\n\n  const wrongGuess =\n    markWrong && cell.solution > 0 && cell.guess !== cell.solution;\n\n  return (\n    <div\n      className={classnames('gamecell', styles.number, {\n        selected: index === selectedIndex,\n      })}\n      onClick={handleClick}>\n      {cell.guess > 0 && (\n        <div\n          className={classnames(styles.guess, { wrongGuess })}\n          style={guessFontSize}>\n          {cell.guess}\n        </div>\n      )}\n      {!cell.guess && cell.pencilMarks?.length > 0 && (\n        <div className={classnames(styles.pencilMarks)}>\n          {cell.pencilMarks.join('')}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default NumberCell;\n","import classnames from 'classnames';\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport {\n  CellType,\n  IBlankCell,\n  ICell,\n  IHintCell,\n  INumberCell,\n} from '../../store/gameSlice';\nimport { RootState } from '../../store/store';\nimport BlankCell from './BlankCell';\nimport './Cell.scss';\nimport styles from './GameGrid.module.scss';\nimport HintCell from './HintCell';\nimport NumberCell from './NumberCell';\n\nconst GameGrid: React.FC = () => {\n  const { game } = useSelector((state: RootState) => state.game);\n\n  const renderCell = (cell: ICell, index: number) => {\n    if (cell.type === CellType.BlankCell) {\n      return <BlankCell cell={cell as IBlankCell} index={index} key={index} />;\n    } else if (cell.type === CellType.HintCell) {\n      return <HintCell cell={cell as IHintCell} index={index} key={index} />;\n    } else {\n      // type == Number\n      return (\n        <NumberCell cell={cell as INumberCell} index={index} key={index} />\n      );\n    }\n  };\n\n  const renderGrid = () => {\n    return (\n      <div\n        className={styles.grid}\n        style={{\n          gridTemplateColumns: `repeat(${game!.columnCount}, 1fr)`,\n          gridTemplateRows: `repeat(${game!.rowCount}, 1fr)`,\n        }}>\n        {game.cells.map((cell, i) => renderCell(cell, i))}\n      </div>\n    );\n  };\n\n  return (\n    <div className={classnames(styles.gameBackground)}>{renderGrid()}</div>\n  );\n};\n\nexport default GameGrid;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport KeyboardListener from 'components/KeyboardListener';\nimport myHistory from 'myHistory';\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { GameSliceState, setGameState } from 'store/gameSlice';\nimport { RootState } from '../../store/store';\nimport './Cell.scss';\nimport CombinationLine from './CombinationLine';\nimport Controls from './Controls';\nimport GameGrid from './GameGrid';\nimport styles from './PlayGame.module.scss';\n\nconst PlayGame: React.FC = () => {\n  const { game } = useSelector((state: RootState) => state.game);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (game.state >= 0) {\n      return;\n    }\n\n    console.log('Loading game state...');\n    const res = localStorage.getItem('gameState');\n\n    if (res) {\n      const newState: GameSliceState = JSON.parse(res);\n      dispatch(setGameState(newState));\n    } else {\n      myHistory.push('/');\n    }\n  }, []);\n\n  return (\n    <>\n      <KeyboardListener />\n\n      <div className={styles.content}>\n        <GameGrid />\n        <Controls />\n      </div>\n\n      <CombinationLine />\n    </>\n  );\n};\n\nexport default PlayGame;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport MyInput from 'components/MyInput';\nimport { Form, Formik } from 'formik';\nimport myHistory from 'myHistory';\nimport { Button } from 'primereact/button';\nimport { InputText } from 'primereact/inputtext';\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { RootState } from 'store/store';\nimport { ISigninValues, login } from 'store/userSlice';\n\nconst SignIn: React.FC = () => {\n  const dispatch = useDispatch();\n  const { user } = useSelector((state: RootState) => state.users);\n  // const [checked, setChecked] = useState(false);\n\n  const initialValues: ISigninValues = {\n    email: '',\n    password: '',\n  };\n\n  const handleSubmit = (values: ISigninValues) => {\n    dispatch(login(values));\n  };\n\n  useEffect(() => {\n    if (user) {\n      myHistory.push('/');\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [user]);\n\n  return (\n    <div\n      className='flex align-items-center justify-content-center'\n      style={{ height: '60%' }}>\n      <div className='surface-card p-4 shadow-2 border-round w-full lg:w-6'>\n        <div className='text-center mb-5'>\n          {/* <img\n            src='assets/images/blocks/logos/hyper.svg'\n            alt='hyper'\n            height={50}\n            className='mb-3'\n          /> */}\n          <div className='text-900 text-3xl font-medium mb-3'>\n            Welcome Back to Mr K.'s Kakuro\n          </div>\n          <span className='text-600 font-medium line-height-3'>\n            Don't have an account?\n          </span>\n          <Link\n            className='font-medium no-underline ml-2 text-blue-500 cursor-pointer'\n            to='/signup'>\n            Create one today!\n          </Link>\n        </div>\n\n        <Formik\n          // enableReinitialize\n          initialValues={initialValues}\n          onSubmit={handleSubmit}\n          // validationSchema={UserSchema}\n        >\n          {({ setFieldValue, values }) => (\n            <Form className='p-fluid'>\n              <MyInput\n                name='email'\n                label='Email'\n                as={InputText}\n                className='block text-900 font-medium mb-2'\n              />\n              <MyInput\n                name='password'\n                label='Password'\n                type='password'\n                as={InputText}\n                className='block text-900 font-medium mb-2'\n              />\n\n              <Button\n                type='submit'\n                label='Sign In!'\n                icon='mdi mdi-login-variant'\n                className='w-full'\n              />\n            </Form>\n          )}\n        </Formik>\n      </div>\n    </div>\n  );\n};\n\nexport default SignIn;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport MyInput from 'components/MyInput';\nimport { Form, Formik } from 'formik';\nimport myHistory from 'myHistory';\nimport { Button } from 'primereact/button';\nimport { InputText } from 'primereact/inputtext';\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { ISignUpValues, signUp } from 'store/userSlice';\nimport * as Yup from 'yup';\n\nconst UserSchema = Yup.object().shape({\n  name: Yup.string()\n    .min(3)\n    .max(50, 'Must be 50 characters or less')\n    .required('Required'),\n  email: Yup.string()\n    .max(50, 'Must be 50 characters or less')\n    .required('Required'),\n  password: Yup.string()\n    .min(10, 'Must be at least 10 characters')\n    .max(25, 'Must be 25 characters or less')\n    .required('Required'),\n});\n\nconst SignUp: React.FC = () => {\n  const dispatch = useDispatch();\n  // const [checked, setChecked] = useState(false);\n\n  const handleSubmit = (values: ISignUpValues) => {\n    dispatch(signUp(values));\n    myHistory.push('/')\n  };\n\n  const initialValues: ISignUpValues = {\n    name: '',\n    email: '',\n    password: '',\n  };\n\n  return (\n    <div\n      className='flex align-items-center justify-content-center'\n      style={{ height: '60%' }}>\n      <div className='surface-card p-4 shadow-2 border-round w-full lg:w-6'>\n        <div className='text-center mb-5'>\n          {/* <img\n            src='assets/images/blocks/logos/hyper.svg'\n            alt='hyper'\n            height={50}\n            className='mb-3'\n          /> */}\n          <div className='text-900 text-3xl font-medium mb-3'>\n            Sign Up For Mr K.'s Kakuro\n          </div>\n          <span className='text-600 font-medium line-height-3'>\n            Already have an account?\n          </span>\n          <Link\n            className='font-medium no-underline ml-2 text-blue-500 cursor-pointer'\n            to='/signin'>\n            Sign In!\n          </Link>\n        </div>\n\n        <Formik\n          enableReinitialize\n          initialValues={initialValues}\n          onSubmit={handleSubmit}\n          validationSchema={UserSchema}>\n          {({ setFieldValue, values }) => (\n            <Form className='p-fluid'>\n              <MyInput\n                name='name'\n                label='Gamer Name'\n                as={InputText}\n                className='block text-900 font-medium mb-2'\n              />\n              <MyInput\n                name='email'\n                label='Email'\n                as={InputText}\n                className='block text-900 font-medium mb-2'\n              />\n              <MyInput\n                name='password'\n                label='Password'\n                type='password'\n                as={InputText}\n                className='block text-900 font-medium mb-2'\n              />\n\n              <Button\n                type='submit'\n                label='Sign Up!'\n                icon='mdi mdi-account-plus'\n                className='w-full'\n              />\n            </Form>\n          )}\n        </Formik>\n      </div>\n    </div>\n  );\n};\n\nexport default SignUp;\n","import {\n  Action,\n  combineReducers,\n  configureStore,\n  ThunkAction,\n} from '@reduxjs/toolkit';\nimport alertReducer from '../features/alerts/alertSlice';\nimport gameReducer from './gameSlice';\nimport designReducer from './designSlice';\nimport userReducer from './userSlice';\nimport listReducer from '../features/list/listSlice';\n\nexport const rootReducer = combineReducers({\n  alerts: alertReducer,\n  design: designReducer,\n  list: listReducer,\n  game: gameReducer,\n  users: userReducer,\n});\n\nconst store = configureStore({\n  devTools: process.env.NODE_ENV !== 'production',\n  reducer: rootReducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\nexport type AppThunk = ThunkAction<void, RootState, null, Action<string>>;\nexport type AppDispatch = typeof store.dispatch;\n\nexport default store;\n","import MyMenubar from 'components/MyMenubar';\nimport Alerts from 'features/alerts/Alerts';\nimport CreateGame from 'features/creating/CreateGame';\nimport MainMenu from 'features/menu/MainMenu';\nimport PlayGame from 'features/playing/PlayGame';\nimport SignIn from 'features/users/SignIn';\nimport SignUp from 'features/users/SignUp';\nimport myHistory from 'myHistory';\nimport React from 'react';\nimport { Provider } from 'react-redux';\nimport { Route, Router, Switch } from 'react-router-dom';\nimport './App.scss';\nimport store from './store/store';\n\nconst App: React.FC = () => {\n  return (\n    <Provider store={store}>\n      <MyMenubar />\n      <Alerts />\n\n      <Router history={myHistory}>\n        <Switch>\n          <Route path='/create'>\n            <CreateGame />\n          </Route>\n          <Route path='/play'>\n            <PlayGame />\n          </Route>\n          <Route path='/signin'>\n            <SignIn />\n          </Route>\n          <Route path='/signup'>\n            <SignUp />\n          </Route>\n          <Route path='/'>\n            <MainMenu />\n          </Route>\n        </Switch>\n      </Router>\n    </Provider>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"combinations\":\"CombinationLine_combinations__2uXXm\",\"text\":\"CombinationLine_text__3BaJ1\",\"sum\":\"CombinationLine_sum__ijz9v\",\"possibility\":\"CombinationLine_possibility__ru2Ma\",\"highlight\":\"CombinationLine_highlight__2hWQX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"guessButton\":\"GuessButton_guessButton__2HTay\",\"pencilMark\":\"GuessButton_pencilMark__30ALz\",\"digit\":\"GuessButton_digit__1y-ZY\",\"digit1\":\"GuessButton_digit1__2OikV\",\"digit2\":\"GuessButton_digit2__1EUR8\",\"digit3\":\"GuessButton_digit3__tibxt\",\"digit4\":\"GuessButton_digit4__2bG_l\",\"digit5\":\"GuessButton_digit5__1DTxj\",\"digit6\":\"GuessButton_digit6__29Opa\",\"digit7\":\"GuessButton_digit7__3aZzj\",\"digit8\":\"GuessButton_digit8__2lnCS\",\"digit9\":\"GuessButton_digit9__35MKY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"designCell\":\"DesignCell_designCell__1mdb1\",\"hintMissing\":\"DesignCell_hintMissing__GjhmS\",\"solution\":\"DesignCell_solution__1hCNm\",\"index\":\"DesignCell_index__1hyaN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"HintDialog_label__1UY5p\",\"buttonGrid\":\"HintDialog_buttonGrid__3MkIY\",\"button\":\"HintDialog_button__2lNtm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"number\":\"NumberCell_number__1mt2Y\",\"guess\":\"NumberCell_guess__1Iq08\"};"],"sourceRoot":""}