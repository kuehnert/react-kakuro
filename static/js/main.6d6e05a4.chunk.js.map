{"version":3,"sources":["components/MyMenubar.module.scss","features/creating/CreateGame.module.scss","features/creating/DrawGrid.module.scss","features/menu/MainMenu.module.scss","features/playing/BlankCell.module.scss","features/playing/PlayGame.module.scss","features/playing/Controls.module.scss","features/creating/SaveGame.module.scss","features/playing/CombinationLine.module.scss","myHistory.ts","api/kakuroApi.ts","utils/authHeader.ts","store/userSlice.ts","components/MyMenubar.tsx","features/alerts/alertSlice.ts","features/alerts/Alerts.tsx","features/list/listSlice.ts","utils/doCountMissingCells.ts","utils/getHints.ts","utils/combinations.ts","utils/solvePuzzle.ts","utils/getCombinations.ts","store/gameSlice.ts","utils/pencilmarks.ts","utils/clearGuesses.ts","utils/checkPuzzle.ts","utils/hintCells.ts","utils/preparePuzzle.ts","utils/validateGrid.ts","store/designSlice.ts","features/creating/ExportButton.tsx","features/creating/DesignPanel.tsx","features/creating/HintDialog.tsx","features/creating/DesignCell.tsx","features/creating/DrawGrid.tsx","features/creating/SaveGame.tsx","features/creating/SetCells.tsx","features/creating/SetHints.tsx","components/MyInput.tsx","components/MySelectButton.tsx","components/MySlider.tsx","types/puzzle.ts","features/creating/ImportDialog.tsx","features/creating/SetSize.tsx","features/creating/CreateGame.tsx","features/list/PuzzleList.tsx","utils/makePlayable.ts","features/menu/MainMenu.tsx","hooks/useEventListener.js","components/KeyboardListener.tsx","features/playing/CombinationLine.tsx","features/playing/GuessButton.tsx","features/playing/Controls.tsx","utils/calcCellSize.ts","features/playing/BlankCell.tsx","features/playing/HintCell.tsx","features/playing/NumberCell.tsx","features/playing/GameGrid.tsx","features/playing/PlayGame.tsx","features/users/SignIn.tsx","features/users/SignUp.tsx","store/store.ts","App.tsx","reportWebVitals.ts","index.tsx","features/creating/ImportDialog.module.scss","features/playing/GuessButton.module.scss","features/creating/DesignCell.module.scss","features/creating/HintDialog.module.scss","features/playing/NumberCell.module.scss","features/playing/GameGrid.module.scss"],"names":["module","exports","createHashHistory","kakuroApi","axios","create","baseURL","process","authHeader","user","token","localStorage","getItem","Authorization","console","log","storeduser","JSON","parse","decoded","decode","Date","now","exp","removeItem","error","initialState","isLoggedIn","isRequesting","userSlice","createSlice","name","reducers","loginSuccess","state","action","payload","logoutFailed","logoutSuccess","signUpSuccess","signUpFailed","submitting","requestFailed","code","response","status","actions","MyMenubar","dispatch","useDispatch","useSelector","users","startItem","className","styles","menuItems","label","icon","command","myHistory","push","disabled","endItem","onClick","a","post","headers","stringify","model","start","end","header","alertSlice","alerts","pageTitle","isFetching","notFound","clearAlert","setAlert","alert","severity","setNotFound","setErrorAlert","summary","setSuccessAlert","setWarningAlert","setIsFetching","setPageTitle","document","title","Alerts","toastEl","useRef","useEffect","Object","keys","forEach","key","current","show","detail","ref","listSlice","list","solved","fetchListSuccess","fetchSolvedSuccess","addPuzzleToList","setChoiceID","choice","doCountMissingCells","cells","filter","c","type","CellType","NumberCell","guess","length","getHints","game","index","hints","sum","count","used","Array","hIndex","cell","hintHorizontal","columnCount","vIndex","hintVertical","nextRow","combinations","digits","fill","_makeCombinations","min","set","digitsToCombination","makeCombinations","freeze","solutions","getCombinations","combs","every","h","includes","_solvePuzzle","solvedGame","nc","solution","pencilMarks","nCell","rowData","getRowForCell","columnData","getColumnForCell","p","usedDigits","hint","tempGame","makePencilmarks","singlePencilmarksToGuess","solvePuzzle","Difficulty","PuzzleStates","original","across","delta","x","cellIndexes","sumSolved","y","setGuess","i","pm","guessNumber","newPM","hComb","vComb","hDigits","from","Set","flat","vDigits","e","sort","neighbour","makePencilmarksForCell","DEFAULT_HINTS","zoomLevel","rowCount","level","hintCount","missingCells","markWrong","undoStack","redoStack","gameSlice","setGameState","selectedIndex","setCurrentGameSuccess","setItem","setSelectedIndex","newIndex","increaseZoom","newValue","setGuessSuccess","newGame","newMissingCells","togglePencilMark","currentCell","indexOf","splice","resetGame","clearGuesses","toggleMarkWrong","clearPencilMarks","doClearPencilMarks","autoPencil","undo","oldGameString","pop","redo","setCurrentGame","getState","checkGuessesCorrect","_id","id","checkPuzzle","puzzle","sumHorizontal","sumVertical","HintCell","hc","valid","checkAllSolved","doMakeHintCells","nextColumn","BlankCell","hCell","isHint","preparePuzzle","cellString","map","join","validatePuzzle","Direction","DesignStepsEnum","numberCount","message","designSteps","createGrid","columns","rows","item","activeStep","Raw","designSlice","setActiveStep","setBaseGame","clearDesignGame","setPuzzleState","newState","DrawGrid","newPuzzle","InsertHints","CheckPuzzle","updateCell","newCell","reduce","prev","curr","makeHintCells","solveGameSuccess","Solved","solveGameFailed","checkGameSuccess","Valid","createGameSuccess","ExportButton","useState","exportVisible","setExportVisible","puzzleJSON","setPuzzleJSON","design","button","visible","style","width","height","modal","onHide","value","blob","Blob","filename","fileDownload","DesignPanel","props","handleBack","handleNext","children","headerTemplate","options","titleClassName","HintDialog","down","setOptions","renderButtons","groupData","minSum","Math","maxSum","max","buttonGrid","n","acrossHint","handleClick","classNames","numbers","dialog","DesignCell","dialogVisible","setDialogVisible","renderHint","hintStr","hintClass","hintMissing","classnames","designCell","pencilmarks","gameBackground","grid","gridTemplateColumns","SaveGame","result","values","data","SetCells","res","SetHints","MyInput","htmlFor","dangerouslySetInnerHTML","__html","component","MySlider","field","setFieldValue","onChange","event","handleChange","difficultyLevels","difficultyLabels","SetSize","importVisible","setImportVisible","onDrop","useCallback","acceptedFiles","file","reader","FileReader","onabort","onerror","onload","readAsText","useDropzone","getRootProps","getInputProps","isDragActive","textarea","dragging","target","PuzzleSchema","Yup","shape","required","initialValues","formikRef","handleSubmit","enableReinitialize","onSubmit","validationSchema","innerRef","ImportDialog","as","InputText","MySelectButton","CreateGame","puzzleStateJSON","createGame","createSteps","activeIndex","PuzzleList","filtered","get","autoLayout","stripedRows","scrollable","scrollHeight","selectionMode","selection","onSelectionChange","dataKey","stateStorage","stateKey","sortable","body","date","createdAt","format","makePlayable","input","split","char","hintCell","rowGroup","columnGroup","puzzleSizes","MainMenu","puzzleSize","setPuzzleSize","content","bar","placeholder","size","useEventListener","eventName","handler","element","window","savedHandler","addEventListener","eventListener","removeEventListener","KeyboardListener","selectCell","handleKeyDown","CombinationLine","possibilities","setPossibilities","renderPossibility","direction","possibility","d","highlight","renderDigit","renderPossibilities","b","renderLine","column","text","GuessButton","digit","pencilMark","guessButton","pencilMark1","Controls","handleZoom","renderButton","controls","zoomButtons","guessButtons","confirmDialog","accept","checked","onLabel","offLabel","onIcon","offIcon","calcBoardSize","calcCellSize","blank","fontSize","calcHintFontSize","guessFontSize","calcGuessFontSize","pencilMarkFontSize","lineHeight","calcPencilMarkFontSize","cellStyle","wrongGuess","number","selected","GameGrid","gridContainer","gridTemplateRows","renderCell","PlayGame","SignIn","to","email","password","resourceType","resources","login","UserSchema","SignUp","signUp","rootReducer","combineReducers","alertReducer","designReducer","listReducer","gameReducer","userReducer","store","configureStore","devTools","reducer","App","history","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.6d6e05a4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"MyMenubar_header__1SUGp\",\"startItem\":\"MyMenubar_startItem__5gsTl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"createGame\":\"CreateGame_createGame__t-nS6\",\"createSteps\":\"CreateGame_createSteps__3TBZt\",\"p-steps\":\"CreateGame_p-steps__1OyM9\",\"p-steps-item\":\"CreateGame_p-steps-item__2Lv77\",\"p-menuitem-link\":\"CreateGame_p-menuitem-link__3yOB-\",\"p-steps-title\":\"CreateGame_p-steps-title__6eRPZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"gameBackground\":\"DrawGrid_gameBackground__2dTqA\",\"grid\":\"DrawGrid_grid__XoYjv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"MainMenu_content__1zXTd\",\"bar\":\"MainMenu_bar__12htD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"blank\":\"BlankCell_blank__h84dH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"PlayGame_content__3keJX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"controls\":\"Controls_controls__fpjJI\",\"columns\":\"Controls_columns__1dogA\",\"button\":\"Controls_button__3i3Ud\",\"zoomButtons\":\"Controls_zoomButtons__1tiul\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"SaveGame_button__3Is-u\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"combinations\":\"CombinationLine_combinations__2uXXm\",\"column\":\"CombinationLine_column__1JW6l\",\"text\":\"CombinationLine_text__3BaJ1\",\"sum\":\"CombinationLine_sum__ijz9v\",\"possibility\":\"CombinationLine_possibility__ru2Ma\",\"highlight\":\"CombinationLine_highlight__2hWQX\"};","import { createHashHistory } from 'history';\n\nexport default createHashHistory();\n","import axios from 'axios';\n\nconst kakuroApi = axios.create({\n  baseURL: process.env.REACT_APP_KAKURO_API_ENDPOINT || 'http://192.168.168.4:5000'\n});\n\nexport default kakuroApi;\n","function authHeader(): {\n  Authorization: string;\n} | {\n  Authorization: null;\n} {\n  const token = localStorage.getItem('token');\n\n  if (token) {\n    return { Authorization: `Bearer ${token}` };\n  } else {\n    return { Authorization: null };\n  }\n}\n\nexport default authHeader;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { decode } from 'jsonwebtoken';\nimport kakuroApi from '../api/kakuroApi';\nimport authHeader from '../utils/authHeader';\nimport { AppThunk } from './store';\n\nexport interface IUser {\n  id: string;\n  name: string;\n  email: string;\n}\n\nexport interface ISigninValues {\n  email: string;\n  password: string;\n}\n\nexport interface ISignUpValues extends ISigninValues {\n  name: string;\n}\n\nexport interface IUserState {\n  isLoggedIn: boolean;\n  isRequesting: boolean;\n  user: IUser | null;\n  error: string | null;\n}\n\nexport interface IUnauthorizedPayload {\n  resourceType: string;\n  resources: string[];\n  // status: number;\n  // message: string;\n  response: any;\n}\n\n// TODO: check token\nlet user;\nconsole.log('userSlice: loading user from storage...');\ntry {\n  const storeduser = localStorage.getItem('user');\n  user = storeduser != null ? JSON.parse(storeduser) : null;\n  const token = localStorage.getItem('token');\n\n  if (token) {\n    let decoded: any = decode(token);\n\n    if (Date.now() >= decoded.exp * 1000) {\n      console.log('token expired');\n      localStorage.removeItem('user');\n      localStorage.removeItem('token');\n      user = null;\n    }\n  }\n} catch (error) {\n  localStorage.removeItem('user');\n  localStorage.removeItem('token');\n  user = null;\n}\n\nconst initialState: IUserState = {\n  isLoggedIn: user == null ? false : true,\n  isRequesting: false,\n  user,\n  error: null,\n};\n\nconst userSlice = createSlice({\n  name: 'user',\n  initialState,\n  reducers: {\n    loginSuccess(state, action: PayloadAction<IUser>) {\n      state.user = action.payload;\n      state.isLoggedIn = action.payload != null;\n      state.error = null;\n      state.isRequesting = false;\n    },\n    logoutFailed(state, action: PayloadAction<string>) {\n      state.error = action.payload;\n      state.user = null;\n      state.isLoggedIn = false;\n      state.isRequesting = false;\n    },\n    logoutSuccess(state) {\n      state.user = null;\n      state.isLoggedIn = false;\n      state.error = null;\n      state.isRequesting = false;\n    },\n    signUpSuccess(state, action: PayloadAction<IUser>) {\n      state.user = action.payload;\n      state.isLoggedIn = action.payload != null;\n      state.error = null;\n      state.isRequesting = false;\n    },\n    signUpFailed(state, action: PayloadAction<string>) {\n      state.error = action.payload;\n      state.user = null;\n      state.isLoggedIn = false;\n      state.isRequesting = false;\n    },\n    submitting(state) {\n      state.isRequesting = true;\n    },\n    requestFailed(state, action: PayloadAction<IUnauthorizedPayload>) {\n      console.log('action.payload:', action.payload);\n\n      // console.log('state:', state);\n      // console.log('action:', action);\n      const code = action.payload.response.status;\n\n      if (code === 401 || code === 403) {\n        // Unauthorized\n        localStorage.removeItem('user');\n        localStorage.removeItem('token');\n        state.user = null;\n        state.isLoggedIn = false;\n        state.error = null;\n        state.isRequesting = false;\n      }\n    },\n  },\n});\n\nexport const {\n  loginSuccess,\n  logoutFailed,\n  logoutSuccess,\n  requestFailed,\n  signUpFailed,\n  signUpSuccess,\n  submitting,\n} = userSlice.actions;\n\nexport default userSlice.reducer;\n\nexport const login =\n  (values: ISigninValues): AppThunk =>\n  async dispatch => {\n    dispatch(submitting());\n    let user, token;\n    try {\n      const response = await kakuroApi.post('/users/login', values);\n      user = response.data.user;\n      token = response.data.token;\n\n      localStorage.setItem('user', JSON.stringify(user));\n      localStorage.setItem('token', token);\n    } catch ({ response }) {\n      dispatch(\n        requestFailed({ resourceType: 'users', resources: [], response })\n      );\n      // dispatch(\n      //   setAlert({\n      //     type: 'error',\n      //     message: 'Beim Anmelden gab es einen Fehler. Bitte probieren Sie es später noch einmal.',\n      //   }),\n      // );\n      return;\n    }\n\n    dispatch(loginSuccess(user));\n    // dispatch(setAlert({ type: 'success', message: 'Sie haben sich erfolgreich angemeldet.' }));\n  };\n\nexport const logout = (): AppThunk => async dispatch => {\n  try {\n    await kakuroApi.post('/users/logout', null, { headers: authHeader() });\n  } catch ({ response }) {\n    dispatch(logoutFailed(JSON.stringify(response)));\n    return;\n  } finally {\n    localStorage.removeItem('user');\n    localStorage.removeItem('token');\n  }\n\n  dispatch(logoutSuccess());\n  // dispatch(setAlert({ type: 'success', message: 'Sie haben sich erfolgreich abgemeldet.' }));\n};\n\nexport const signUp =\n  (values: ISignUpValues): AppThunk =>\n  async dispatch => {\n    dispatch(submitting());\n    let user, token;\n    try {\n      const response = await kakuroApi.post('/users', values);\n      user = response.data.user;\n      token = response.data.token;\n\n      localStorage.setItem('user', JSON.stringify(user));\n      localStorage.setItem('token', token);\n    } catch ({ response }: any) {\n      console.log('response:', response);\n      dispatch(signUpFailed(\"Unable to sign up\"));\n      // dispatch(\n      //   setAlert({\n      //     type: 'error',\n      //     message: 'Beim Anmelden gab es einen Fehler. Bitte probieren Sie es später noch einmal.',\n      //   }),\n      // );\n      return;\n    }\n\n    dispatch(loginSuccess(user));\n    // dispatch(setAlert({ type: 'success', message: 'Sie haben sich erfolgreich angemeldet.' }));\n  };\n","import myHistory from 'myHistory';\nimport { Button } from 'primereact/button';\nimport { Menubar } from 'primereact/menubar';\nimport React from 'react';\nimport { RootState } from 'store/store';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { logout } from 'store/userSlice';\nimport styles from './MyMenubar.module.scss';\n\nconst MyMenubar: React.FC = () => {\n  const dispatch = useDispatch();\n  const { user } = useSelector((state: RootState) => state.users);\n\n  const startItem = (\n    <div className={styles.startItem}>\n      <h3>Mr K.'s Kakuro</h3>\n    </div>\n  );\n\n  const menuItems = [\n    {\n      label: 'Menu',\n      icon: 'mdi mdi-hamburger',\n      command: () => myHistory.push('/'),\n    },\n    {\n      label: 'Design Puzzle',\n      icon: 'mdi mdi-pencil',\n      command: () => myHistory.push('/create'),\n      disabled: user == null,\n    },\n    {\n      label: 'Play Puzzle',\n      icon: 'mdi mdi-play',\n      command: () => myHistory.push('/play'),\n    },\n  ];\n\n  const endItem = user ? (\n    <Button\n      label={`Sign Out ${user.name}`}\n      icon='mdi mdi-logout'\n      onClick={() => dispatch(logout())}\n    />\n  ) : (\n    <Button\n      label='Sign Up/Sign In'\n      icon='mdi mdi-login'\n      onClick={() => myHistory.push('/signin')}\n    />\n  );\n\n  return <Menubar model={menuItems} start={startItem} end={endItem} className={styles.header}/>;\n};\n\nexport default MyMenubar;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nexport interface AlertType {\n  severity: string;\n  summary: string;\n  detail?: string;\n}\n\ntype GlobalSliceState = {\n  alerts: {\n    [key: string]: AlertType;\n  };\n  pageTitle: string | null;\n  isFetching: boolean;\n  notFound: string | null;\n};\n\nconst initialState = {\n  alerts: {},\n  pageTitle: null,\n  isFetching: false,\n  notFound: null,\n};\n\nexport const alertSlice = createSlice({\n  name: 'alerts',\n  initialState: initialState as GlobalSliceState,\n  reducers: {\n    clearAlert(state, action: PayloadAction<string>) {\n      delete state.alerts[action.payload];\n    },\n    setAlert(state, action: PayloadAction<AlertType>) {\n      const alert = action.payload;\n      state.alerts[alert.severity] = alert;\n      state.isFetching = false;\n    },\n    setNotFound(state, action: PayloadAction<string | null>) {\n      state.notFound = action.payload;\n    },\n    setErrorAlert(state, action: PayloadAction<string>) {\n      const alert = { severity: 'error', summary: action.payload };\n      state.alerts[alert.severity] = alert;\n      state.isFetching = false;\n    },\n    setSuccessAlert(state, action: PayloadAction<string>) {\n      const alert = { severity: 'success', summary: action.payload };\n      state.alerts[alert.severity] = alert;\n      state.isFetching = false;\n    },\n    setWarningAlert(state, action: PayloadAction<string>) {\n      const alert = { severity: 'warn', summary: action.payload };\n      state.alerts[alert.severity] = alert;\n      state.isFetching = false;\n    },\n    setIsFetching(state, action: PayloadAction<boolean>) {\n      state.isFetching = action.payload;\n    },\n    setPageTitle(state, action: PayloadAction<string>) {\n      state.pageTitle = action.payload;\n      document.title = action.payload;\n    },\n  },\n});\n\nexport const {\n  clearAlert,\n  setAlert,\n  setErrorAlert,\n  setIsFetching,\n  setNotFound,\n  setPageTitle,\n  setSuccessAlert,\n  setWarningAlert,\n} = alertSlice.actions;\n\nexport default alertSlice.reducer;\n","import { Toast } from 'primereact/toast';\nimport React, { useEffect, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { clearAlert } from './alertSlice';\nimport { RootState } from 'store/store';\n\nconst Alerts: React.FC = () => {\n  const alerts = useSelector((state: RootState) => state.alerts.alerts);\n  const dispatch = useDispatch();\n  const toastEl = useRef<any>(null);\n\n  useEffect(() => {\n    Object.keys(alerts).forEach((key) => {\n      toastEl.current?.show({\n        severity: key,\n        summary: alerts[key].summary,\n        detail: alerts[key].detail,\n      });\n\n      dispatch(clearAlert(key));\n    });\n  }, [dispatch, alerts]);\n\n  return <Toast ref={toastEl} />;\n};\n\nexport default Alerts;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport kakuroApi from 'api/kakuroApi';\nimport { setErrorAlert } from 'features/alerts/alertSlice';\nimport { AppThunk } from 'store/store';\nimport authHeader from 'utils/authHeader';\nimport { IBaseGame } from '../../store/gameSlice';\n\nexport interface IListGame extends IBaseGame {\n  cellString: string;\n  createdAt: Date;\n}\n\ntype ListSliceState = {\n  list: IListGame[];\n  choice?: IListGame;\n  solved: string[];\n};\n\nconst initialState: ListSliceState = {\n  list: [],\n  solved: [],\n};\n\nexport const listSlice = createSlice({\n  name: 'list',\n  initialState,\n  reducers: {\n    fetchListSuccess: (state, action: PayloadAction<IListGame[]>) => {\n      state.list = action.payload;\n    },\n    fetchSolvedSuccess: (state, action: PayloadAction<string[]>) => {\n      state.solved = action.payload;\n    },\n    addPuzzleToList: (state, action: PayloadAction<IListGame>) => {\n      state.list.push(action.payload);\n    },\n    setChoiceID: (state, action: PayloadAction<IListGame>) => {\n      state.choice = action.payload;\n    },\n  },\n});\n\nexport const { addPuzzleToList, fetchListSuccess, fetchSolvedSuccess, setChoiceID } =\n  listSlice.actions;\n\nexport default listSlice.reducer;\n\nexport const fetchList = (): AppThunk => async (dispatch: any) => {\n  let list;\n\n  try {\n    const response = await kakuroApi.get('/puzzles');\n    list = response.data;\n  } catch (error) {\n    console.error('error:', error);\n    dispatch(setErrorAlert('Puzzles konnten nicht geladen werden.'));\n  }\n\n  dispatch(fetchListSuccess(list));\n};\n\nexport const fetchSolved = (): AppThunk => async (dispatch: any) => {\n  let solved;\n\n  try {\n    const response = await kakuroApi.get('/users/solved', { headers: authHeader() });\n    solved = response.data;\n  } catch (error) {\n    console.error('error:', error);\n    dispatch(setErrorAlert('Liste gelöster Puzzles konnten nicht geladen werden.'));\n  }\n\n  dispatch(fetchSolvedSuccess(solved));\n};\n\nexport const importPuzzle = (size: string): AppThunk => async (dispatch: any) => {\n  let puzzle;\n\n  try {\n    const response = await kakuroApi.post('/puzzles/steal', { size }, { headers: authHeader() });\n    puzzle = response.data;\n  } catch (error) {\n    console.error('error:', error);\n    dispatch(setErrorAlert('Fehler beim Importieren eines Puzzles.'));\n  }\n\n  dispatch(addPuzzleToList(puzzle));\n};\n","import { CellType, ICell, INumberCell } from 'store/gameSlice';\n\nfunction doCountMissingCells(cells: ICell[]): number {\n  return cells.filter(c => c.type === CellType.NumberCell && (c as INumberCell).guess === 0).length;\n}\n\nexport default doCountMissingCells;\n","import { CellType, IGameData, IHintCell, INumberCell } from 'store/gameSlice';\n\nexport default function getHints(game: IGameData, index: number) {\n  const hints = [\n    { index: -1, sum: -1, count: -1, used: new Array<number>() },\n    { index: -1, sum: -1, count: -1, used: new Array<number>() },\n  ];\n\n  if (!index) {\n    return hints;\n  }\n\n  let hIndex = index;\n\n  // Find corresponding hint cell horizontally\n  while (game.cells[hIndex].type === CellType.NumberCell) {\n    const cell = game.cells[hIndex] as INumberCell;\n    if (cell.guess > 0) {\n      hints[0].used.push(cell.guess);\n    }\n    hIndex--;\n  }\n\n  hints[0].index = hIndex;\n  hints[0].sum = (game.cells[hIndex] as IHintCell).hintHorizontal! || -1;\n\n  // Find count of cells for this hint\n  hIndex = index;\n  while (\n    (hIndex + 1) % game.columnCount !== 0 &&\n    game.cells[hIndex + 1].type === CellType.NumberCell\n  ) {\n    hIndex++;\n    const cell = game.cells[hIndex] as INumberCell;\n    if (cell.guess > 0) {\n      hints[0].used.push(cell.guess);\n    }\n  }\n\n  hints[0].count = hIndex - hints[0].index;\n\n  // Find corresponding hint cell vertically\n  let vIndex = index;\n  while (game.cells[vIndex].type === CellType.NumberCell) {\n    const cell = game.cells[vIndex] as INumberCell;\n    if (cell.guess > 0) {\n      hints[1].used.push(cell.guess);\n    }\n    vIndex -= game.columnCount;\n  }\n\n  hints[1].index = vIndex;\n  hints[1].sum = (game.cells[vIndex] as IHintCell).hintVertical! || -1;\n\n  // Find count of cells for this hint\n  vIndex = index;\n  let nextRow = vIndex + game.columnCount;\n  while (\n    nextRow < game.cells.length &&\n    game.cells[nextRow].type === CellType.NumberCell\n  ) {\n    vIndex = nextRow;\n    const cell = game.cells[vIndex] as INumberCell;\n    if (cell.guess > 0) {\n      hints[1].used.push(cell.guess);\n    }\n    nextRow = vIndex + game.columnCount;\n  }\n\n  const count = (vIndex - hints[1].index) / game.columnCount;\n  hints[1].count = count;\n\n  return hints;\n}\n","export interface ICombinationsForCount {\n  [sum: string]: number[][];\n}\n\nexport interface ICombinations {\n  [count: string]: ICombinationsForCount;\n}\n\nconst makeCombinations = () => {\n  const combinations: ICombinations = {};\n  const digits = new Array(10).fill(false);\n\n  const digitsToCombination = () => {\n    const set = new Array<number>();\n    let count = 0;\n    let sum = 0;\n\n    for (let index = 1; index < digits.length; index++) {\n      if (digits[index]) {\n        set.push(index);\n        count += 1;\n        sum += index;\n      }\n    }\n\n    if (!combinations[count]) {\n      combinations[count] = {};\n    }\n\n    if (!combinations[count][sum]) {\n      combinations[count][sum] = new Array<number[]>();\n    }\n\n    combinations[count][sum].push(set);\n  };\n\n  const _makeCombinations = (min: number, current: number) => {\n    if (current === 10) {\n      digitsToCombination();\n    } else {\n      digits[current] = true;\n      _makeCombinations(min, current + 1);\n      digits[current] = false;\n      _makeCombinations(min, current + 1);\n      current++;\n    }\n  };\n\n  for (let min = 1; min < 9; min++) {\n    digits[min] = true;\n    _makeCombinations(min, min + 1);\n    digits[min] = false;\n  }\n\n  delete combinations['1'];\n  return combinations;\n};\n\nconst combinations: ICombinations = makeCombinations();\nObject.freeze(combinations);\n\nexport default combinations;\n","import { CellType, IGameData, INumberCell } from 'store/gameSlice';\nimport {\n  makePencilmarks,\n  getRowForCell,\n  singlePencilmarksToGuess,\n  getColumnForCell,\n} from './pencilmarks';\n\nlet solutions: IGameData[];\n\nexport function guessNumber(game: IGameData, index: number, guess: number) {\n  (game.cells[index] as INumberCell).guess = guess;\n  getRowForCell(game, index).cellIndexes.forEach(i => {\n    const nCell = game.cells[i] as INumberCell;\n    nCell.pencilMarks = nCell.pencilMarks.filter(pm => pm !== guess);\n  });\n\n  getColumnForCell(game, index).cellIndexes.forEach(i => {\n    const nCell = game.cells[i] as INumberCell;\n    nCell.pencilMarks = nCell.pencilMarks.filter(pm => pm !== guess);\n  });\n}\n\n// function logBoard(game: IGameData) {\n//   console.log(\n//     'Board',\n//     JSON.stringify(\n//       game.cells\n//         .filter(c => c.type === CellType.NumberCell)\n//         .map(c => (c as INumberCell).guess)\n//     )\n//   );\n// }\n\n// function logSolution(game: IGameData) {\n//   console.log(\n//     'Solution',\n//     JSON.stringify(\n//       game.cells\n//         .filter(c => c.type === CellType.NumberCell)\n//         .map(c => (c as INumberCell).solution)\n//     )\n//   );\n// }\n\nfunction _solvePuzzle(game: IGameData, index: number) {\n  if (index >= game.cells.length) {\n    // found a solution\n    const solvedGame: IGameData = JSON.parse(JSON.stringify(game));\n    solvedGame.cells.forEach(c => {\n      if (c.type === CellType.NumberCell) {\n        const nc = c as INumberCell;\n        nc.solution = nc.guess;\n        nc.guess = 0;\n        nc.pencilMarks = [];\n      }\n    });\n    solutions.push(solvedGame);\n  } else {\n    const cell = game.cells[index];\n\n    if (cell.type !== CellType.NumberCell || (cell as INumberCell).guess > 0) {\n      // if cell is not a number cell or if there is a guess in it already\n      _solvePuzzle(game, index + 1);\n    } else {\n      // Try all options for current cell's pencil marks\n      // and solve rest of puzzle recursively\n      const nCell: INumberCell = cell as INumberCell;\n      const rowData = getRowForCell(game, cell.index);\n      const columnData = getColumnForCell(game, cell.index);\n\n      nCell.pencilMarks.forEach(p => {\n        // TODO: check if pencil mark is valid option\n        // this should not happen\n        if (\n          rowData.usedDigits.includes(p) ||\n          columnData.usedDigits.includes(p)\n        ) {\n          return;\n        }\n\n        // logBoard(game);\n        // console.log(p, rowData.usedDigits, columnData.usedDigits);\n\n        if (\n          (rowData.usedDigits.length === rowData.count - 1 &&\n            rowData.sum + p !== rowData.hint) ||\n          (columnData.usedDigits.length === columnData.count - 1 &&\n            columnData.sum + p !== columnData.hint)\n        ) {\n          // only one digit missing, check if p is the missing number\n          return;\n        }\n\n        nCell.guess = p;\n        console.log(`Cell no. ${index}: Guessing ${p}...`);\n\n        const tempGame: IGameData = JSON.parse(JSON.stringify(game));\n        makePencilmarks(tempGame);\n        while (singlePencilmarksToGuess(tempGame)) {\n          makePencilmarks(tempGame);\n        }\n\n        _solvePuzzle(tempGame, index + 1);\n        nCell.guess = 0;\n      });\n    }\n  }\n}\n\nexport interface ISolvePuzzleResult {\n  error?: string;\n  solution?: IGameData;\n}\n\n/**\n * Solves the entered puzzle. First version is a brute-force to see how long it takes :D\n * @param original the game to be solved\n * @param combinations all possible combinations\n * @returns the solved game\n */\nfunction solvePuzzle(original: IGameData): ISolvePuzzleResult {\n  // create copy of entered game\n  const game: IGameData = JSON.parse(JSON.stringify(original));\n  // create initial pencil marks\n  // logBoard(game);\n  makePencilmarks(game);\n  while (singlePencilmarksToGuess(game)) {\n    makePencilmarks(game);\n  }\n\n  solutions = new Array<IGameData>();\n  _solvePuzzle(game, 0);\n  // console.log(`Found ${solutions.length}:`);\n\n  if (solutions.length === 0) {\n    return { error: 'Puzzle invalid; no solution.' };\n  } else if (solutions.length > 1) {\n    return {\n      error: `Puzzle invalid; more than one solution (${solutions.length}).`,\n    };\n  } else {\n    // logSolution(solutions[0]);\n    return { solution: solutions[0] };\n  }\n}\n\nexport default solvePuzzle;\n","import { IHintValues } from 'store/gameSlice';\nimport combinations from './combinations';\n\n/**\n *\n * @param hints the computed hints for a particular cell\n * @param combinations all combinations\n */\nexport default function getCombinations(\n  hints: IHintValues,\n) {\n  let combs = combinations[hints.count][hints.sum];\n\n  // only select those combinations which contain every used digit\n  combs = combs.filter(c => hints.used.every(h => c.includes(h)));\n\n  return combs;\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport kakuroApi from 'api/kakuroApi';\nimport { setSuccessAlert, setWarningAlert } from 'features/alerts/alertSlice';\nimport authHeader from 'utils/authHeader';\nimport { checkGuessesCorrect } from 'utils/checkPuzzle';\nimport { clearGuesses, doClearPencilMarks } from 'utils/clearGuesses';\nimport doCountMissingCells from 'utils/doCountMissingCells';\nimport getHints from 'utils/getHints';\nimport { makePencilmarks, singlePencilmarksToGuess } from 'utils/pencilmarks';\nimport { AppThunk } from './store';\n\n/* Types */\nexport enum Difficulty {\n  Easy = 0,\n  Medium = 1,\n  MediumPlus = 2,\n  Hard = 3,\n  VeryHard = 4,\n}\n\nexport enum CellType {\n  BlankCell = 'blankCell',\n  HintCell = 'hintCell',\n  NumberCell = 'numberCell',\n}\n\nexport enum PuzzleStates {\n  Raw = 0,\n  Valid = 1,\n  Solved = 2,\n}\n\nexport interface ICell {\n  index: number;\n  type: CellType;\n}\n\nexport interface IBlankCell extends ICell {\n  type: CellType.BlankCell;\n}\n\nexport interface IHintCell extends ICell {\n  type: CellType.HintCell;\n  hintHorizontal?: number;\n  hintVertical?: number;\n}\n\nexport interface INumberCell extends ICell {\n  type: CellType.NumberCell;\n  pencilMarks: number[];\n  guess: number;\n  solution: number;\n}\n\nexport type IBaseGame = {\n  _id?: string;\n  name: string;\n  columnCount: number;\n  rowCount: number;\n  level: Difficulty;\n};\n\nexport interface IServerGameData extends IBaseGame {\n  state: PuzzleStates;\n  cellString: string;\n}\n\nexport interface IGameData extends IBaseGame {\n  state: PuzzleStates;\n  cells: ICell[];\n  hintCount: number;\n  missingCells: number;\n}\n\nexport interface IGuess {\n  index: number;\n  guess: number;\n}\n\nexport interface IHintValues {\n  index: number;\n  sum: number;\n  count: number;\n  used: number[];\n}\n\n/* State */\nexport type GameSliceState = {\n  zoomLevel: number;\n  game: IGameData;\n  selectedIndex?: number;\n  hints: IHintValues[];\n  markWrong: boolean;\n  undoStack: string[];\n  redoStack: string[];\n};\n\nconst ZOOM_MIN = 3;\nconst ZOOM_MAX = 10;\nconst DEFAULT_HINTS = [\n  { index: -1, sum: -1, count: -1, used: new Array<number>() },\n  { index: -1, sum: -1, count: -1, used: new Array<number>() },\n];\n\nconst initialState: GameSliceState = {\n  zoomLevel: 6,\n  game: {\n    state: -1,\n    cells: [],\n    columnCount: -1,\n    rowCount: -1,\n    name: 'Dummy',\n    level: -1,\n    hintCount: -1,\n    missingCells: -1,\n  },\n  hints: DEFAULT_HINTS,\n  markWrong: JSON.parse(localStorage.getItem('kakuro-markWrong') || 'false'),\n  undoStack: [],\n  redoStack: [],\n};\n\nexport const gameSlice = createSlice({\n  name: 'game',\n  initialState,\n  reducers: {\n    setGameState(state, action: PayloadAction<IGameData>) {\n      state.game = action.payload;\n      state.hints = getHints(state.game, state.selectedIndex!);\n      state.undoStack = [];\n      state.redoStack = [];\n    },\n    setCurrentGameSuccess(state, action: PayloadAction<IGameData>) {\n      state.undoStack = [];\n      state.redoStack = [];\n      state.game = action.payload;\n      state.game.missingCells = doCountMissingCells(state.game.cells);\n      delete state.selectedIndex;\n      state.hints = DEFAULT_HINTS;\n      localStorage.setItem('currentGame', JSON.stringify(state.game));\n    },\n    setSelectedIndex(state, action: PayloadAction<number>) {\n      let newIndex = action.payload;\n      state.selectedIndex = newIndex;\n      state.hints = getHints(state.game!, newIndex);\n    },\n    increaseZoom(state, action: PayloadAction<number>) {\n      const delta = action.payload;\n\n      if (delta === 0) {\n        state.zoomLevel = initialState.zoomLevel;\n      } else {\n        const newValue = state.zoomLevel + delta;\n        if (newValue >= ZOOM_MIN && newValue <= ZOOM_MAX) {\n          state.zoomLevel = newValue;\n        }\n      }\n    },\n    setGuessSuccess(\n      state,\n      action: PayloadAction<{ newGame: IGameData; newMissingCells: number; }>\n    ) {\n      state.undoStack.push(JSON.stringify(state.game));\n      state.redoStack = [];\n      const { newGame, newMissingCells } = action.payload;\n      state.game = newGame;\n      state.game.missingCells = newMissingCells;\n      state.hints = getHints(newGame, state.selectedIndex!);\n      localStorage.setItem('currentGame', JSON.stringify(state.game));\n    },\n    togglePencilMark(state, action: PayloadAction<IGuess>) {\n      state.undoStack.push(JSON.stringify(state.game));\n      state.redoStack = [];\n      const { index, guess } = action.payload;\n      const newGame: IGameData = JSON.parse(JSON.stringify(state.game));\n      const currentCell: INumberCell = newGame.cells[index] as INumberCell;\n\n      if (currentCell.type === CellType.NumberCell) {\n        const index = currentCell.pencilMarks.indexOf(guess);\n\n        if (guess === 0) {\n          currentCell.pencilMarks = [];\n        } else if (index < 0) {\n          // add new pencil mark\n          currentCell.pencilMarks.push(guess);\n          currentCell.pencilMarks.sort();\n        } else {\n          // remove existing pencil mark\n          currentCell.pencilMarks.splice(index, 1);\n        }\n        state.game = newGame;\n        localStorage.setItem('currentGame', JSON.stringify(state.game));\n      }\n    },\n    resetGame(state) {\n      state.undoStack.push(JSON.stringify(state.game));\n      state.redoStack = [];\n      state.game = clearGuesses(state.game);\n      state.game.missingCells = doCountMissingCells(state.game.cells);\n      state.hints = getHints(state.game, state.selectedIndex!);\n    },\n    toggleMarkWrong(state) {\n      state.markWrong = !state.markWrong;\n      localStorage.setItem('kakuro-markWrong', JSON.stringify(state.markWrong));\n    },\n    clearPencilMarks(state) {\n      state.undoStack.push(JSON.stringify(state.game));\n      state.redoStack = [];\n      state.game = doClearPencilMarks(state.game);\n    },\n    autoPencil(state) {\n      state.undoStack.push(JSON.stringify(state.game));\n      // set guesses where there is only one pencil mark option\n      singlePencilmarksToGuess(state.game!);\n\n      // calculate pencil marks\n      makePencilmarks(state.game!);\n\n      state.game.missingCells = doCountMissingCells(state.game.cells);\n    },\n    undo(state) {\n      const oldGameString = state.undoStack.pop();\n      const game = JSON.parse(oldGameString!);\n      state.redoStack.push(JSON.stringify(state.game));\n      state.game = game;\n      state.hints = getHints(state.game, state.selectedIndex!);\n    },\n    redo(state) {\n      const oldGameString = state.redoStack.pop();\n      const game = JSON.parse(oldGameString!);\n      state.undoStack.push(JSON.stringify(state.game));\n      state.game = game;\n      state.hints = getHints(state.game, state.selectedIndex!);\n    },\n  },\n});\n\nexport const {\n  clearPencilMarks,\n  increaseZoom,\n  setGameState,\n  setSelectedIndex,\n  setCurrentGameSuccess,\n  setGuessSuccess,\n  autoPencil,\n  resetGame,\n  togglePencilMark,\n  toggleMarkWrong,\n  redo,\n  undo,\n} = gameSlice.actions;\n\nexport default gameSlice.reducer;\n\nexport const setCurrentGame =\n  (game: IGameData): AppThunk =>\n    async (dispatch: any) => {\n      localStorage.removeItem('currentGame');\n\n      const newGame: IGameData = JSON.parse(JSON.stringify(game));\n\n      // create pencilmarks for all number cells\n      newGame.cells\n        .filter(c => c.type === CellType.NumberCell)\n        .forEach(cell => {\n          const nCell = cell as INumberCell;\n          if (!nCell.guess) {\n            nCell.guess = 0;\n          }\n          if (!nCell.pencilMarks) {\n            nCell.pencilMarks = [];\n          }\n        });\n\n      dispatch(setCurrentGameSuccess(newGame));\n    };\n\nexport const setGuess =\n  ({ index, guess }: IGuess): AppThunk =>\n    async (dispatch, getState) => {\n      const { game } = getState().game;\n      const newGame: IGameData = JSON.parse(JSON.stringify(game));\n      const currentCell = newGame.cells[index] as INumberCell;\n      let newMissingCells;\n\n      if (currentCell.type === CellType.NumberCell) {\n        if (currentCell.guess === 0 && guess !== 0) {\n          newMissingCells = game.missingCells - 1;\n        } else if (currentCell.guess > 0 && guess === 0) {\n          newMissingCells = game.missingCells + 1;\n        } else {\n          newMissingCells = game.missingCells;\n        }\n\n        currentCell.guess = guess;\n        // remove guess from pencil marks\n        // too much help\n        // makePencilmarks(newGame);\n\n        if (newMissingCells === 0) {\n          if (checkGuessesCorrect(newGame)) {\n            if (game._id && getState().users.user) {\n              try {\n                await kakuroApi.post(\n                  '/users/solved',\n                  { id: game._id },\n                  {\n                    headers: authHeader(),\n                  }\n                );\n              } catch (error) {\n                console.error(error);\n              }\n            }\n\n            dispatch(setSuccessAlert('Puzzle solved. Congratulations!'));\n          } else {\n            dispatch(setWarningAlert('There are still mistakes in the puzzle'));\n          }\n        }\n\n        dispatch(setGuessSuccess({ newGame, newMissingCells }));\n      }\n    };\n","import { CellType, IGameData, IHintCell, INumberCell } from 'store/gameSlice';\nimport getCombinations from './getCombinations';\nimport getHints from './getHints';\nimport { guessNumber } from './solvePuzzle';\n\nexport function getRowForCell(\n  { cells, columnCount }: IGameData,\n  index: number,\n  across = true\n) {\n  const delta = across ? 1 : columnCount;\n  let x = index - delta;\n  let cellIndexes = [];\n  let usedDigits = [];\n  let sum = 0;\n  let sumSolved = 0;\n\n  while (cells[x].type === CellType.NumberCell) {\n    x -= delta;\n  }\n\n  let y = x;\n  while (\n    y + delta < cells.length &&\n    cells[y + delta].type === CellType.NumberCell\n  ) {\n    y += delta;\n    cellIndexes.push(y);\n    const nCell = cells[y] as INumberCell;\n    if (nCell.guess) {\n      usedDigits.push(nCell.guess);\n      sum += nCell.guess;\n    }\n\n    if (nCell.solution) {\n      sumSolved += nCell.solution;\n    }\n  }\n\n  const hint = across\n    ? (cells[x] as IHintCell).hintHorizontal\n    : (cells[x] as IHintCell).hintVertical;\n  const count = (y - x) / delta;\n\n  return { index, hint, count, sum, sumSolved, cellIndexes, usedDigits };\n}\n\nexport function getColumnForCell(game: IGameData, index: number) {\n  return getRowForCell(game, index, false);\n}\n\nexport function guessRemovesPencilmarks(game: IGameData, index: number) {}\n\nexport function singlePencilmarksToGuess(game: IGameData): boolean {\n  let setGuess = false;\n\n  game!.cells.forEach(c => {\n    if (c.type === CellType.NumberCell) {\n      const cell = c as INumberCell;\n      if (cell.guess === 0 && cell.pencilMarks?.length === 1) {\n        if (cell.solution > 0) {\n          cell.guess = cell.pencilMarks[0];\n        } else {\n          cell.solution = cell.pencilMarks[0];\n        }\n        guessNumber(game, cell.index, cell.pencilMarks[0]);\n        setGuess = true;\n      }\n    }\n  });\n\n  return setGuess;\n}\n\nexport function makePencilmarksForCell(\n  nCell: INumberCell,\n  index: number,\n  game: IGameData\n) {\n  if (nCell.guess > 0) {\n    return;\n  }\n\n  // Filter out impossible combinations\n  let newPM = nCell.pencilMarks || [];\n  const hints = getHints(game, index);\n  const hComb = getCombinations(hints[0]);\n  const vComb = getCombinations(hints[1]);\n  const used = [...hints[0].used, ...hints[1].used];\n\n  // if no current pencil marks, find possible ones\n  // Get possible digits\n  const hDigits = Array.from(new Set(hComb.flat()));\n  const vDigits = Array.from(new Set(vComb.flat()));\n  newPM = hDigits.filter(e => vDigits.includes(e) && !used.includes(e)).sort();\n  console.log('0 newPM:', newPM);\n\n\n  if ((nCell.pencilMarks || []).length > 0) {\n    newPM = newPM.filter(e => nCell.pencilMarks.includes(e));\n    console.log('1 newPM:', newPM);\n\n    // only possible if pencil marks have been set once already\n    // i.e. if neighbours have correct marks\n\n    // if cell part of a twin across or down\n    // check which marks are possible\n    if (\n      hints[0].count === 2 &&\n      index + 1 < game.cells.length &&\n      game.cells[index + 1].type === CellType.NumberCell &&\n      (game.cells[index + 1] as INumberCell).guess === 0\n    ) {\n      const neighbour = game.cells[index + 1] as INumberCell;\n\n      newPM = newPM.filter(p => {\n        return neighbour.pencilMarks.includes(hints[0].sum - p);\n      });\n    }\n\n    // check for twin down\n    if (\n      hints[1].count === 2 &&\n      index + game.columnCount < game.cells.length &&\n      game.cells[index + game.columnCount].type === CellType.NumberCell &&\n      (game.cells[index + game.columnCount] as INumberCell).guess === 0\n    ) {\n      const neighbour = game.cells[index + game.columnCount] as INumberCell;\n\n      newPM = newPM.filter(p => {\n        return neighbour.pencilMarks.includes(hints[1].sum - p);\n      });\n    }\n  }\n\n  nCell.pencilMarks = newPM;\n}\n\nexport function makePencilmarks(game: IGameData) {\n  game.cells.forEach((cell, index) => {\n    if (cell.type === CellType.NumberCell) {\n      makePencilmarksForCell(cell as INumberCell, index, game);\n    }\n  });\n}\n","import { CellType, IGameData, INumberCell } from 'store/gameSlice';\n\nexport const clearGuesses = (game: IGameData): IGameData => {\n  const newGame: IGameData = JSON.parse(JSON.stringify(game));\n\n  newGame.cells\n    .filter(c => c.type === CellType.NumberCell)\n    .forEach(c => {\n      (c as INumberCell).guess = 0;\n      (c as INumberCell).pencilMarks = [];\n    });\n\n  return newGame;\n};\n\nexport const doClearPencilMarks = (game: IGameData): IGameData => {\n  const newGame: IGameData = JSON.parse(JSON.stringify(game));\n\n  newGame.cells\n    .filter(c => c.type === CellType.NumberCell)\n    .forEach(c => {\n      (c as INumberCell).pencilMarks = [];\n    });\n\n  return newGame;\n};\n","import { CellType, IGameData, IHintCell, INumberCell } from 'store/gameSlice';\n\nexport function checkPuzzle(puzzle: IGameData) {\n  const { cells } = puzzle;\n  // TODO: Which clever checks should we implement?\n  // * are the sums possible?\n  let sumHorizontal = 0;\n  let sumVertical = 0;\n\n  // * are the values of rows and columns correct?\n\n  // * do all hint cells have all necessary hints?\n  const allHints = cells\n    .filter(c => c.type === CellType.HintCell)\n    .every(c => {\n      const hc = c as IHintCell;\n\n      if (hc.hintHorizontal) {\n        sumHorizontal += hc.hintHorizontal;\n      }\n\n      if (hc.hintVertical) {\n        sumVertical += hc.hintVertical;\n      }\n\n      return (\n        (!hc.hintHorizontal || hc.hintHorizontal > -1) &&\n        (!hc.hintVertical || hc.hintVertical > -1)\n      );\n    });\n\n  if (!allHints) {\n    return { valid: false, error: 'Not all hints provided.' };\n  }\n\n  if (sumHorizontal !== sumVertical) {\n    return {\n      valid: false,\n      error: `Hints across: ${sumHorizontal}, down: ${sumVertical}. Must be equal.`,\n    };\n  }\n\n  return { valid: true };\n}\n\nexport function checkGuessesCorrect({ cells }: IGameData): boolean {\n  return cells\n    .filter(c => c.type === CellType.NumberCell)\n    .every(c => (c as INumberCell).guess === (c as INumberCell).solution);\n}\n\nexport function checkAllSolved({ cells }: IGameData): boolean {\n  return cells\n    .filter(c => c.type === CellType.NumberCell)\n    .every(c => (c as INumberCell).solution > 0);\n}\n","import { CellType, ICell, IGameData, IHintCell } from 'store/gameSlice';\nimport { getColumnForCell, getRowForCell } from './pencilmarks';\n\nexport function doCountMissingHints(puzzle: IGameData) {\n  const reducer = (prev: number, curr: ICell) => {\n    if (curr.type !== CellType.HintCell) {\n      return prev;\n    } else {\n      const hCell = curr as IHintCell;\n      return (\n        prev +\n        (hCell.hintHorizontal === -1 ? 1 : 0) +\n        (hCell.hintVertical === -1 ? 1 : 0)\n      );\n    }\n  };\n\n  return puzzle.cells.reduce(reducer, 0);\n}\n\nexport function doMakeHintCells(puzzle: IGameData) {\n  const { cells } = puzzle;\n  let hintCount = 0;\n\n  // no hint cells in last cell\n  for (let index = 0; index < cells.length - 1; index++) {\n    const cell: ICell = cells[index];\n    const nextColumn = index + 1;\n    const nextRow = index + puzzle.columnCount;\n\n    if (cell.type === CellType.BlankCell) {\n      if (cells[nextColumn].type === CellType.NumberCell) {\n        cell.type = CellType.HintCell;\n        (cell as IHintCell).hintHorizontal = -1;\n        hintCount += 1;\n      }\n\n      if (\n        nextRow < cells.length &&\n        cells[nextRow].type === CellType.NumberCell\n      ) {\n        cell.type = CellType.HintCell;\n        (cell as IHintCell).hintVertical = -1;\n        hintCount += 1;\n      }\n    } else if (cell.type === CellType.HintCell) {\n      const hCell = cell as IHintCell;\n      let isHint = false;\n\n      if (cells[nextColumn].type === CellType.NumberCell) {\n        if (hCell.hintHorizontal === -1) {\n          hintCount += 1;\n        }\n\n        isHint = true;\n      }\n\n      if (\n        nextRow < cells.length &&\n        cells[nextRow].type === CellType.NumberCell\n      ) {\n        if (hCell.hintVertical === -1) {\n          hintCount += 1;\n        }\n\n        isHint = true;\n      }\n\n      // check if hint cell is no longer a hint cell\n      if (!isHint) {\n        cell.type = CellType.BlankCell;\n      }\n    }\n  }\n\n  puzzle.hintCount = hintCount;\n  // console.log('puzzle:', JSON.stringify(puzzle));\n}\n\nexport function doFillHintsFromSolution(puzzle: IGameData) {\n  const { cells } = puzzle;\n\n  cells\n    .filter(c => c.type === CellType.HintCell)\n    .forEach(c => {\n      const hintCell = c as IHintCell;\n\n      if (hintCell.hintHorizontal === -1) {\n        const rowGroup = getRowForCell(puzzle, hintCell.index + 1);\n        hintCell.hintHorizontal = rowGroup.sumSolved;\n      }\n\n      if (hintCell.hintVertical === -1) {\n        const columnGroup = getColumnForCell(\n          puzzle,\n          hintCell.index + puzzle.columnCount\n        );\n        hintCell.hintVertical = columnGroup.sumSolved;\n      }\n    });\n}\n","import {\n  CellType,\n  IGameData,\n  INumberCell,\n  IServerGameData,\n} from 'store/gameSlice';\n\nfunction preparePuzzle(game: IGameData): IServerGameData {\n  const cellString = game.cells\n    .map(cell =>\n      cell.type !== CellType.NumberCell ? 0 : (cell as INumberCell).solution\n    )\n    .join('');\n\n  const { cells, ...newGame } = game;\n  const newServerGame = { ...newGame, cellString } as IServerGameData;\n\n  return newServerGame;\n}\n\nexport default preparePuzzle;\n","import { CellType, IGameData } from 'store/gameSlice';\nimport { getColumnForCell, getRowForCell } from './pencilmarks';\n\nexport interface IValidatePuzzleResult {\n  valid: boolean;\n  message: string;\n}\n\nfunction validatePuzzle(puzzle: IGameData): IValidatePuzzleResult {\n  const { cells } = puzzle;\n  let numberCount = 0;\n\n  // check that there is at least two groups with count > 1\n  // and that there are no groups with count 1\n  for (let index = 0; index < cells.length; index++) {\n    const cell = cells[index];\n\n    if (cell.type === CellType.NumberCell) {\n      numberCount += 1;\n\n      const row = getRowForCell(puzzle, cell.index);\n      if (row.count === 1) {\n        return {\n          valid: false,\n          message: 'There is at least one group across with only one cell',\n        };\n      }\n\n      const column = getColumnForCell(puzzle, cell.index);\n      if (column.count === 1) {\n        return {\n          valid: false,\n          message: 'There is at least one group down with only one cell',\n        };\n      }\n    }\n  }\n\n  return numberCount < 3\n    ? { valid: false, message: 'Too few number cells' }\n    : { valid: true, message: 'Puzzle grid is fine' };\n}\n\nexport default validatePuzzle;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport kakuroApi from 'api/kakuroApi';\nimport { setErrorAlert, setSuccessAlert } from 'features/alerts/alertSlice';\nimport { addPuzzleToList, IListGame } from 'features/list/listSlice';\nimport authHeader from 'utils/authHeader';\nimport { checkPuzzle } from 'utils/checkPuzzle';\nimport { doCountMissingHints, doMakeHintCells } from 'utils/hintCells';\nimport preparePuzzle from 'utils/preparePuzzle';\nimport solvePuzzle from 'utils/solvePuzzle';\nimport validatePuzzle from 'utils/validateGrid';\nimport {\n  CellType,\n  IBaseGame,\n  IGameData,\n  INumberCell,\n  PuzzleStates,\n} from './gameSlice';\nimport { AppThunk } from './store';\n\nexport enum Direction {\n  Horizontal = 0,\n  Vertical = 1,\n  Both = 2,\n}\n\nexport interface IDesignCell {\n  type: CellType;\n  index: number;\n  hintHorizontal?: number;\n  hintVertical?: number;\n  solution?: number;\n}\n\nexport enum DesignStepsEnum {\n  SetSize = 0,\n  DrawGrid = 1,\n  InsertHints = 2,\n  CheckPuzzle = 3,\n}\n\nexport const designSteps = [\n  { label: 'Set Size' },\n  { label: 'Draw Grid' },\n  { label: 'Insert Hints' },\n  { label: 'Check Puzzle' },\n];\n\ntype DesignSliceState = {\n  activeStep: number;\n  puzzle: IGameData;\n};\n\nconst createGrid = (columns: number, rows: number) =>\n  Array.from({ length: columns * rows }, (item, index) => ({\n    index,\n    type: CellType.BlankCell,\n  }));\n\nconst initialState: DesignSliceState = {\n  activeStep: 0,\n  puzzle: {\n    name: 'Unnamed',\n    level: 4,\n    columnCount: 10,\n    rowCount: 10,\n    cells: createGrid(10, 10),\n    state: PuzzleStates.Raw,\n    hintCount: -1,\n    missingCells: -1,\n  },\n};\n\nexport const designSlice = createSlice({\n  name: 'design',\n  initialState,\n  reducers: {\n    setActiveStep: (state, action) => {\n      state.activeStep = action.payload;\n      localStorage.setItem('puzzleState', JSON.stringify(state));\n    },\n    setBaseGame: (state, action: PayloadAction<IBaseGame>) => {\n      state.puzzle = { ...state.puzzle, ...action.payload };\n      state.puzzle.cells = createGrid(\n        state.puzzle.columnCount,\n        state.puzzle.rowCount\n      );\n    },\n    clearDesignGame: () => {\n      localStorage.removeItem('puzzleState');\n      return initialState;\n    },\n    setPuzzleState: (state, action: PayloadAction<DesignSliceState>) => {\n      const newState = action.payload;\n      newState.activeStep = DesignStepsEnum.DrawGrid;\n      const newPuzzle = newState.puzzle;\n      const res = validatePuzzle(newPuzzle);\n      if (res.valid) {\n        newState.activeStep = DesignStepsEnum.InsertHints;\n\n        const res = checkPuzzle(newPuzzle);\n        if (res.valid) {\n          newState.activeStep = DesignStepsEnum.CheckPuzzle;\n        }\n      }\n\n      return newState;\n    },\n    updateCell: (state, action) => {\n      const newCell = action.payload;\n\n      if (\n        newCell.type === CellType.NumberCell &&\n        !(newCell as INumberCell).guess\n      ) {\n        (newCell as INumberCell).guess = 0;\n      }\n\n      state.puzzle.cells[newCell.index] = newCell;\n      state.puzzle.state = PuzzleStates.Raw;\n      state.puzzle.hintCount = doCountMissingHints(state.puzzle);\n    },\n    makeHintCells: state => {\n      doMakeHintCells(state.puzzle);\n    },\n    solveGameSuccess: (state, action: PayloadAction<IGameData>) => {\n      state.puzzle = action.payload;\n      state.puzzle.state = PuzzleStates.Solved;\n    },\n    solveGameFailed: state => {\n      state.puzzle.cells\n        .filter(c => c.type === CellType.NumberCell)\n        .forEach(c => ((c as INumberCell).solution = 0));\n      state.puzzle.state = PuzzleStates.Raw;\n      state.activeStep = DesignStepsEnum.InsertHints;\n    },\n    checkGameSuccess: state => {\n      state.puzzle.state = PuzzleStates.Valid;\n    },\n    createGameSuccess: () => {\n      // myHistory.push('/');\n      localStorage.removeItem('puzzleState');\n      return initialState;\n    },\n  },\n});\n\nexport const {\n  checkGameSuccess,\n  clearDesignGame,\n  createGameSuccess,\n  setActiveStep,\n  setBaseGame,\n  setPuzzleState,\n  makeHintCells,\n  solveGameSuccess,\n  solveGameFailed,\n  updateCell,\n} = designSlice.actions;\n\nexport default designSlice.reducer;\n\nexport const checkGame = (): AppThunk => async (dispatch: any, getState) => {\n  const { puzzle } = getState().design;\n  const isValid = checkPuzzle(puzzle);\n\n  if (isValid) {\n    dispatch(setSuccessAlert('Puzzle is valid.'));\n    dispatch(checkGameSuccess());\n  } else {\n    dispatch(setErrorAlert(`Puzzle invalid`));\n  }\n};\n\nexport const solveGame = (): AppThunk => async (dispatch: any, getState) => {\n  const { puzzle } = getState().design;\n  const result = solvePuzzle(puzzle);\n\n  if (result.error) {\n    dispatch(setErrorAlert(`Puzzle invalid: ${result.error}`));\n    dispatch(solveGameFailed());\n  } else {\n    dispatch(setSuccessAlert('Puzzle solved.'));\n    dispatch(solveGameSuccess(result.solution!));\n  }\n};\n\nexport interface IApiError {\n  code: number;\n  message: string;\n}\n\nexport const createGame =\n  (values: IGameData): AppThunk =>\n  async (dispatch: any) => {\n    // dispatch(submitting());\n    let puzzle = preparePuzzle(values);\n    let newPuzzle: IListGame;\n\n    try {\n      const response = await kakuroApi.post('/puzzles', puzzle, {\n        headers: authHeader(),\n      });\n      newPuzzle = response.data;\n    } catch (error) {\n      console.log('error:', JSON.stringify(error, null, 4));\n      dispatch(\n        setErrorAlert(\n          // `Error trying to save puzzle: ${(error as IApiError).message}`\n          `Error: Puzzle is already in database`\n        )\n      );\n      return;\n    }\n\n    dispatch(addPuzzleToList(newPuzzle));\n    dispatch(createGameSuccess());\n    dispatch(setSuccessAlert('Puzzle erzeugt.'));\n  };\n","import fileDownload from 'js-file-download';\nimport { Button } from 'primereact/button';\nimport { Dialog } from 'primereact/dialog';\nimport { InputTextarea } from 'primereact/inputtextarea';\nimport React, { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../../store/store';\nimport styles from './SaveGame.module.scss';\n\nconst ExportButton: React.FC = () => {\n  const [exportVisible, setExportVisible] = useState(false);\n  const [puzzleJSON, setPuzzleJSON] = useState('');\n  const { puzzle } = useSelector((state: RootState) => state.design);\n\n  useEffect(() => {\n    setPuzzleJSON(JSON.stringify(puzzle));\n  }, [puzzle]);\n\n  const handleDownload = () => {\n    const blob = new Blob([puzzleJSON]);\n    const filename = `kakuro-${puzzle.columnCount}x${puzzle.rowCount}.json`;\n    fileDownload(blob, filename);\n  };\n\n  return (\n    <>\n      <Button\n        label='Export Puzzle'\n        icon='mdi mdi-export'\n        onClick={() => setExportVisible(true)}\n        className={styles.button}\n      />\n\n      <Dialog\n        header='Spiel exportieren'\n        visible={exportVisible}\n        style={{ width: '50vw', height: '70vh' }}\n        modal\n        onHide={() => setExportVisible(false)}>\n        <InputTextarea\n          rows={8}\n          style={{ width: '100%', height: 'calc(100% - 48px)' }}\n          value={puzzleJSON}\n        />\n        <Button\n          icon='mdi mdi-download'\n          label='Download'\n          className={styles.button}\n          onClick={handleDownload}\n        />\n        <Button\n          icon='mdi mdi-close'\n          label='Cancel'\n          className={styles.button}\n          onClick={() => setExportVisible(false)}\n        />\n      </Dialog>\n    </>\n  );\n};\n\nexport default ExportButton;\n","import { Panel } from 'primereact/panel';\nimport { Button } from 'primereact/button';\nimport React, { FunctionComponent } from 'react';\nimport { useSelector } from 'react-redux';\nimport { designSteps } from 'store/designSlice';\nimport { RootState } from '../../store/store';\nimport ExportButton from './ExportButton';\n\ninterface Props {\n  children?: JSX.Element | JSX.Element[];\n  handleBack?: () => void;\n  handleNext?: () => void;\n}\n\nconst DesignPanel: FunctionComponent<Props> = props => {\n  const { handleBack, handleNext, children } = props;\n  const { activeStep } = useSelector((state: RootState) => state.design);\n\n  const headerTemplate = (options: any) => {\n    const className = `${options.className} p-jc-start`;\n    const titleClassName = `${options.titleClassName} p-pl-1`;\n\n    return (\n      <div className={className}>\n        <span className={titleClassName}>\n          Step {activeStep + 1}: {designSteps[activeStep].label}\n        </span>\n\n        <span className={titleClassName}>\n          <ExportButton />\n\n          <Button\n            label='Back'\n            icon='mdi mdi-arrow-left'\n            onClick={handleBack}\n            disabled={handleBack == null}\n            type='button'\n          />\n\n          <Button\n            label='Next'\n            icon='mdi mdi-arrow-right'\n            onClick={handleNext}\n            // disabled={activeStep === designSteps.length - 1}\n            disabled={handleNext == null}\n            type='button'\n          />\n        </span>\n      </div>\n    );\n  };\n\n  return <Panel headerTemplate={headerTemplate}>{children}</Panel>;\n};\n\nexport default DesignPanel;\n","import classNames from 'classnames';\nimport { Button } from 'primereact/button';\nimport { Dialog } from 'primereact/dialog';\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { CellType } from 'store/gameSlice';\nimport { RootState } from 'store/store';\nimport combinations from 'utils/combinations';\nimport { getRowForCell } from 'utils/pencilmarks';\nimport { IDesignCell, updateCell } from '../../store/designSlice';\nimport styles from './HintDialog.module.scss';\n\nexport interface Props {\n  cell: IDesignCell;\n  across: boolean;\n  down: boolean;\n  visible: boolean;\n  onHide: () => void;\n}\n\nconst HintDialog: React.FC<Props> = ({\n  cell,\n  across,\n  down,\n  visible,\n  onHide,\n}) => {\n  const { puzzle } = useSelector((state: RootState) => state.design);\n  const [options, setOptions] = useState<number[]>([]);\n  const dispatch = useDispatch();\n\n  const handleClick = (n: number, acrossHint: boolean) => {\n    const newCell = { ...cell, type: CellType.HintCell };\n    if (acrossHint) {\n      newCell.hintHorizontal = n;\n    } else {\n      newCell.hintVertical = n;\n    }\n\n    dispatch(updateCell(newCell));\n    if (!acrossHint || !down) {\n      onHide();\n    }\n  };\n\n  const renderButtons = (across: boolean) => {\n    const groupData = getRowForCell(\n      puzzle,\n      cell.index + (across ? 1 : puzzle.columnCount),\n      across\n    );\n\n    // console.log('groupData.index', groupData.index, 'groupData.count', groupData.count);\n    // const minSum = 3;\n    // const maxSum = 45;\n    const combs = Object.keys(combinations[groupData.count]).map(e => +e);\n    const minSum = Math.min(...combs);\n    const maxSum = Math.max(...combs);\n\n    return (\n      <div className=''>\n        <div className={styles.label}>{across ? 'Across' : 'Down'}</div>\n        <div className={styles.buttonGrid}>\n          {options.map(n => (\n            <Button\n              key={n}\n              label={n < minSum || n > maxSum ? '' : '' + n}\n              onClick={() => handleClick(n, across)}\n              disabled={n < minSum || n > maxSum}\n              className={classNames(\n                'p-button-rounded',\n                styles.button,\n                across ? 'p-button-success' : 'p-button-info'\n              )}\n            />\n          ))}\n        </div>\n      </div>\n    );\n  };\n\n  useEffect(() => {\n    // const numbers = Array.from({ length: 43 }, (e, i) => i + 3);\n    const numbers = Array.from({ length: 46 }, (e, i) => i);\n    setOptions(numbers);\n  }, []);\n\n  return (\n    <Dialog\n      className={styles.dialog}\n      header='Set number(s) for hint cell'\n      visible={visible}\n      modal={true}\n      onHide={onHide}>\n      {across && renderButtons(true)}\n      {down && renderButtons(false)}\n    </Dialog>\n  );\n};\n\nexport default HintDialog;\n","import classnames from 'classnames';\nimport React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { CellType, INumberCell } from 'store/gameSlice';\nimport {\n  DesignStepsEnum,\n  IDesignCell,\n  updateCell\n} from '../../store/designSlice';\nimport { RootState } from '../../store/store';\nimport '../playing/Cell.scss';\nimport '../playing/HintCell.scss';\nimport styles from './DesignCell.module.scss';\nimport HintDialog from './HintDialog';\n\nexport interface Props {\n  cell: IDesignCell;\n  index: number;\n}\n\nconst DesignCell: React.FC<Props> = ({ cell, index }) => {\n  const { activeStep } = useSelector((state: RootState) => state.design);\n  const dispatch = useDispatch();\n  const [dialogVisible, setDialogVisible] = useState(false);\n\n  const hide = () => {\n    setDialogVisible(false);\n  };\n\n  const handleClick = (e: React.MouseEvent) => {\n    if (activeStep === DesignStepsEnum.DrawGrid) {\n      // Toggle between blank and number cell\n      const newCell = {\n        ...cell,\n        type:\n          cell.type === CellType.NumberCell\n            ? CellType.BlankCell\n            : CellType.NumberCell,\n      };\n      dispatch(updateCell(newCell));\n    } else if (activeStep === 2 && cell.type === CellType.HintCell) {\n      // Show dialog to pick hint value\n      setDialogVisible(true);\n    }\n  };\n\n  const renderHint = (value: number | undefined) => {\n    if (value) {\n      const hintStr = value > 0 ? value : '?';\n      const hintClass = value > 0 ? '' : styles.hintMissing;\n      return <div className={hintClass}>{hintStr}</div>;\n    } else {\n      return null;\n    }\n  };\n\n  const pm = (cell.type === CellType.NumberCell) ? (cell as INumberCell).pencilMarks?.join('') : null;\n\n  return (\n    <>\n      <div\n        className={classnames(styles.designCell, cell.type)}\n        onClick={handleClick}>\n        {/* <div className={styles.index}>{cell.index}</div> */}\n        <div className='horizontalHint'>{renderHint(cell.hintHorizontal)}</div>\n        <div className='verticalHint'>{renderHint(cell.hintVertical)}</div>\n        <div className={styles.solution}>{cell.solution}</div>\n        {pm && <div className={styles.pencilmarks}>{pm}</div>}\n      </div>\n\n      {activeStep === DesignStepsEnum.InsertHints && (\n        <HintDialog\n          cell={cell}\n          visible={dialogVisible}\n          onHide={hide}\n          across={cell.hintHorizontal != null}\n          down={cell.hintVertical != null}\n        />\n      )}\n    </>\n  );\n};\n\nexport default DesignCell;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { IDesignCell } from 'store/designSlice';\nimport { RootState } from '../../store/store';\nimport DesignCell from './DesignCell';\nimport styles from './DrawGrid.module.scss';\n\nconst DrawGrid: React.FC = () => {\n  const {\n    puzzle: { columnCount, cells },\n  } = useSelector((state: RootState) => state.design);\n\n  return (\n    <div>\n      <div className={styles.gameBackground}>\n        <div\n          className={styles.grid}\n          style={{\n            gridTemplateColumns: `repeat(${columnCount}, 1fr)`,\n          }}>\n          {cells.map((c, i) => (\n            <DesignCell key={i} index={i} cell={c as IDesignCell} />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default DrawGrid;\n","import classNames from 'classnames';\nimport myHistory from 'myHistory';\nimport { Button } from 'primereact/button';\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  clearDesignGame,\n  createGame,\n  setActiveStep,\n  setPuzzleState,\n  solveGame,\n} from 'store/designSlice';\nimport { IGameData, PuzzleStates, setCurrentGame } from 'store/gameSlice';\nimport { checkAllSolved } from 'utils/checkPuzzle';\nimport { makePencilmarks, singlePencilmarksToGuess } from 'utils/pencilmarks';\nimport { RootState } from '../../store/store';\nimport DesignPanel from './DesignPanel';\nimport DrawGrid from './DrawGrid';\nimport styles from './SaveGame.module.scss';\n\nconst SaveGame: React.FC = () => {\n  const dispatch = useDispatch();\n  const { activeStep, puzzle } = useSelector(\n    (state: RootState) => state.design\n  );\n\n  const handleBack = () => {\n    dispatch(setActiveStep(activeStep - 1));\n  };\n\n  const handlePlay = () => {\n    dispatch(setCurrentGame(puzzle));\n    myHistory.push('/play');\n  };\n\n  const handleSolve = () => {\n    dispatch(solveGame());\n  };\n\n  const handleSolveStep = () => {\n    const newPuzzle: IGameData = JSON.parse(JSON.stringify(puzzle));\n    makePencilmarks(newPuzzle);\n    singlePencilmarksToGuess(newPuzzle);\n\n    if (checkAllSolved(newPuzzle)) {\n      newPuzzle.state = PuzzleStates.Solved;\n    }\n\n    dispatch(setPuzzleState({ puzzle: newPuzzle, activeStep }));\n  };\n\n  const handleSolveMultiple = () => {\n    const newPuzzle: IGameData = JSON.parse(JSON.stringify(puzzle));\n    makePencilmarks(newPuzzle);\n    while (singlePencilmarksToGuess(newPuzzle)) {\n      makePencilmarks(newPuzzle);\n    }\n\n    if (checkAllSolved(newPuzzle)) {\n      newPuzzle.state = PuzzleStates.Solved;\n    }\n\n    dispatch(setPuzzleState({ puzzle: newPuzzle, activeStep }));\n  };\n\n  const handleSend = () => {\n    dispatch(createGame(puzzle));\n  };\n\n  const handleClear = () => {\n    dispatch(clearDesignGame());\n  };\n\n  useEffect(() => {\n    // handleSolveStep();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <DesignPanel handleBack={handleBack}>\n      <>\n        <Button\n          label='Solve Step'\n          icon='mdi mdi-brain'\n          onClick={handleSolveStep}\n          className={styles.button}\n        />\n\n        <Button\n          label='Solve Multiple'\n          icon='mdi mdi-brain'\n          onClick={handleSolveMultiple}\n          className={styles.button}\n        />\n\n        <Button\n          label='Solve Puzzle'\n          icon='mdi mdi-brain'\n          onClick={handleSolve}\n          className={styles.button}\n        />\n\n        <Button\n          label='Send to Server & Play'\n          icon='mdi mdi-send'\n          onClick={handleSend}\n          className={styles.button}\n          disabled={puzzle.state !== PuzzleStates.Solved}\n        />\n\n        <Button\n          label='Play Locally'\n          icon='mdi mdi-play'\n          onClick={handlePlay}\n          className={styles.button}\n        />\n\n        <Button\n          label='Start Over'\n          icon='mdi mdi-restart'\n          onClick={handleClear}\n          className={classNames(\n            styles.button,\n            'p-button-warning',\n            'p-button-success'\n          )}\n        />\n      </>\n\n      <DrawGrid />\n    </DesignPanel>\n  );\n};\n\nexport default SaveGame;\n","import { setErrorAlert } from 'features/alerts/alertSlice';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setActiveStep } from 'store/designSlice';\nimport validatePuzzle from 'utils/validateGrid';\nimport { RootState } from '../../store/store';\nimport DesignPanel from './DesignPanel';\nimport DrawGrid from './DrawGrid';\n\nconst SetCells: React.FC = () => {\n  const { activeStep, puzzle } = useSelector(\n    (state: RootState) => state.design\n  );\n  const dispatch = useDispatch();\n\n  const handleBack = () => {\n    dispatch(setActiveStep(activeStep - 1));\n  };\n\n  const handleNext = () => {\n    const res = validatePuzzle(puzzle);\n    if (res.valid) {\n      dispatch(setActiveStep(activeStep + 1));\n    } else {\n      dispatch(setErrorAlert(res.message));\n    }\n  };\n\n  return (\n    <DesignPanel handleBack={handleBack} handleNext={handleNext}>\n      <DrawGrid />\n    </DesignPanel>\n  );\n};\n\nexport default SetCells;\n","import { setErrorAlert } from 'features/alerts/alertSlice';\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { makeHintCells, setActiveStep } from 'store/designSlice';\nimport { checkPuzzle } from 'utils/checkPuzzle';\nimport { RootState } from '../../store/store';\nimport DesignPanel from './DesignPanel';\nimport DrawGrid from './DrawGrid';\n\nconst SetHints: React.FC = () => {\n  const { activeStep, puzzle } = useSelector(\n    (state: RootState) => state.design\n  );\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(makeHintCells());\n  });\n\n  const handleBack = () => {\n    dispatch(setActiveStep(activeStep - 1));\n  };\n\n  const handleNext = () => {\n    const res = checkPuzzle(puzzle);\n\n    if (res.valid) {\n      dispatch(setActiveStep(activeStep + 1));\n    } else {\n      dispatch(setErrorAlert(res.error || 'Error in puzzle'));\n    }\n  };\n\n  return (\n    <DesignPanel handleNext={handleNext} handleBack={handleBack}>\n      <DrawGrid />\n      <div className='notes'>Missing hints: {puzzle.hintCount}</div>\n    </DesignPanel>\n  );\n};\n\nexport default SetHints;\n","import { ErrorMessage, Field } from 'formik';\nimport React from 'react';\n\ninterface Props {\n  name: string;\n  label: string;\n  as: any;\n  hint?: string;\n  [key: string]: any;\n}\n\nconst MyInput: React.FC<Props> = props => {\n  const { label, name, hint } = props;\n\n  return (\n    <div className='field grid'>\n      {/* <label htmlFor={name} className='block text-900 font-medium mb-2'> */}\n      <label htmlFor={name} className='col-12 mb-2 md:col-2 md:mb-0'>\n        {label}\n      </label>\n\n      <div className='col-12 md:col-10'>\n        {/* <Field {...props} className='w-full mb-3' /> */}\n        <Field {...props} className=\"inputfield w-full\" />\n        {hint && <div dangerouslySetInnerHTML={{ __html: hint }} />}\n        <ErrorMessage\n          name={name}\n          component='div'\n          className='fieldErrorMessage'\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default MyInput;\n","import {\n  SelectButton,\n  SelectButtonChangeParams,\n} from 'primereact/selectbutton';\nimport React from 'react';\n\ninterface Props {\n  field: string;\n  label: string;\n  values: { [key: string]: any };\n  options: any;\n  setFieldValue: (label: string, newValue: number) => void;\n}\n\nconst MySlider: React.FC<Props> = ({\n  values,\n  field,\n  label,\n  options,\n  setFieldValue,\n}) => {\n  const handleChange = (event: SelectButtonChangeParams) => {\n    setFieldValue(field, event.value as number);\n  };\n\n  return (\n    <div className='field grid'>\n      <label htmlFor={field} className='col-12 mb-2 md:col-2 md:mb-0'>\n        {label}\n      </label>\n\n      <div className='col-12 md:col-10'>\n        <SelectButton\n          id={field}\n          value={values[field]}\n          options={options}\n          onChange={event => handleChange(event)}\n          className='justify-content-start'\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default MySlider;\n","import { InputNumber } from 'primereact/inputnumber';\nimport { Slider, SliderChangeParams } from 'primereact/slider';\nimport React from 'react';\n\ninterface Props {\n  field: string;\n  label: string;\n  values: { [key: string]: any };\n  min?: number;\n  max?: number;\n  setFieldValue: (label: string, newValue: number) => void;\n}\n\nconst MySlider: React.FC<Props> = ({\n  values,\n  field,\n  label,\n  setFieldValue,\n  min,\n  max,\n}) => {\n  const handleChange = (event: SliderChangeParams) => {\n    setFieldValue(field, event.value as number);\n  };\n\n  return (\n    <div className='field grid'>\n      <label htmlFor={field} className='col-12 mb-2 md:col-2 md:mb-0'>\n        {label}\n      </label>\n\n      <div className='col-12 md:col-10'>\n        <InputNumber\n          value={values[field]}\n          onChange={event => handleChange(event)}\n          className='inputfield w-full'\n        />\n\n        <Slider\n          id={field}\n          value={values[field]}\n          onChange={event => handleChange(event)}\n          min={min}\n          max={max}\n          className='inputfield w-full'\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default MySlider;\n","export const difficultyLevels = {\n  0: 'Easy',\n  1: 'Medium',\n  2: 'Medium Plus',\n  3: 'Hard',\n  4: 'Very Hard',\n};\n\nexport const difficultyLabels = [\n  {\n    label: 'Easy',\n    value: 0,\n  },\n  {\n    label: 'Medium',\n    value: 1,\n  },\n  {\n    label: 'Medium Plus',\n    value: 2,\n  },\n  {\n    label: 'Hard',\n    value: 3,\n  },\n  {\n    label: 'Very Hard',\n    value: 4,\n  },\n];\n","import classNames from 'classnames';\nimport { Button } from 'primereact/button';\nimport { Dialog } from 'primereact/dialog';\nimport { InputTextarea } from 'primereact/inputtextarea';\nimport React, { useCallback, useState } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport { useDispatch } from 'react-redux';\nimport { setPuzzleState } from 'store/designSlice';\nimport { IGameData } from 'store/gameSlice';\nimport styles from './ImportDialog.module.scss';\n\nconst SetSize: React.FC = () => {\n  const [importVisible, setImportVisible] = useState(false);\n  const [puzzleJSON, setPuzzleJSON] = useState('');\n  const dispatch = useDispatch();\n\n  const onDrop = useCallback(acceptedFiles => {\n    acceptedFiles.forEach((file: File) => {\n      const reader = new FileReader();\n\n      reader.onabort = () => console.log('file reading was aborted');\n      reader.onerror = () => console.log('file reading has failed');\n      reader.onload = () => {\n        if (reader.result) {\n          setPuzzleJSON(reader.result as string);\n        }\n      };\n\n      reader.readAsText(file);\n    });\n  }, []);\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop });\n\n  const handleImport = (e: React.MouseEvent) => {\n    const newPuzzle: IGameData = JSON.parse(puzzleJSON);\n    setImportVisible(false);\n    dispatch(setPuzzleState({ activeStep: 1, puzzle: newPuzzle }));\n  };\n\n  return (\n    <>\n      <Button\n        label='Import Puzzle'\n        icon='mdi mdi-import'\n        onClick={() => setImportVisible(true)}\n        className={styles.button}\n      />\n\n      <Dialog\n        header='Spiel importieren'\n        visible={importVisible}\n        className={styles.dialog}\n        modal\n        onHide={() => setImportVisible(false)}>\n        <div\n          {...getRootProps()}\n          // className={classNames(isDragActive && styles.dragging)}\n        >\n          <input {...getInputProps()} />\n          {isDragActive ? (\n            <p>Drop the files here ...</p>\n          ) : (\n            <>\n              <p>Drag 'n' drop some files here, or click to select files</p>\n            </>\n          )}\n          <InputTextarea\n            className={classNames(\n              styles.textarea,\n              isDragActive && styles.dragging\n            )}\n            // style={{ width: '100%', height: '70vh' }}\n            value={puzzleJSON}\n            onChange={event => setPuzzleJSON(event.target.value)}\n          />\n        </div>\n\n        <Button\n          label='Import'\n          onClick={handleImport}\n          disabled={puzzleJSON === ''}\n          className={styles.button}\n        />\n      </Dialog>\n    </>\n  );\n};\n\nexport default SetSize;\n","import MyInput from 'components/MyInput';\nimport MySelectButton from 'components/MySelectButton';\nimport MySlider from 'components/MySlider';\nimport { Form, Formik, FormikProps } from 'formik';\nimport { InputText } from 'primereact/inputtext';\nimport React, { useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setActiveStep, setBaseGame } from 'store/designSlice';\nimport { IBaseGame } from 'store/gameSlice';\nimport { difficultyLabels } from 'types/puzzle';\nimport * as Yup from 'yup';\nimport { RootState } from '../../store/store';\nimport DesignPanel from './DesignPanel';\nimport ImportDialog from './ImportDialog';\n\nconst minColumns = 4;\n\nconst PuzzleSchema = Yup.object().shape({\n  name: Yup.string()\n    .max(50, 'Must be 50 characters or less')\n    .required('Required'),\n  level: Yup.number().min(0).max(4).required(),\n  columnCount: Yup.number()\n    .min(minColumns, `Must be between ${minColumns} and 30`)\n    .max(30)\n    .required('Required'),\n  rowCount: Yup.number()\n    .min(minColumns, `Must be between ${minColumns} and 30`)\n    .max(30)\n    .required('Required'),\n});\n\nconst SetSize: React.FC = () => {\n  const dispatch = useDispatch();\n  const { activeStep, puzzle } = useSelector(\n    (state: RootState) => state.design\n  );\n  const initialValues: IBaseGame = puzzle;\n  // const formikRef = useRef<FormikProps<FormikValues>>(null);\n  const formikRef = useRef<FormikProps<IBaseGame>>(null);\n\n  const handleNext = () => {\n    if (formikRef.current) {\n      formikRef.current.handleSubmit();\n    }\n\n    dispatch(setActiveStep(activeStep + 1));\n  };\n\n  const handleSubmit = (values: IBaseGame) => {\n    dispatch(setBaseGame(values));\n  };\n\n  return (\n    <Formik\n      enableReinitialize\n      initialValues={initialValues}\n      onSubmit={handleSubmit}\n      validationSchema={PuzzleSchema}\n      innerRef={formikRef}>\n      {({ setFieldValue, values }) => (\n        <DesignPanel handleNext={handleNext}>\n          <h1>Import Puzzle</h1>\n\n          <ImportDialog />\n\n          <h1>…Or Create Puzzle</h1>\n          <Form>\n            <MyInput name='name' label='Puzzle Name' as={InputText} />\n\n            <MySelectButton\n              field='level'\n              label='Difficulty'\n              setFieldValue={setFieldValue}\n              options={difficultyLabels}\n              values={values}\n            />\n\n            <MySlider\n              field='columnCount'\n              label='Columns Across'\n              setFieldValue={setFieldValue}\n              min={minColumns}\n              max={40}\n              values={values}\n            />\n\n            <MySlider\n              field='rowCount'\n              label='Rows Down'\n              setFieldValue={setFieldValue}\n              min={minColumns}\n              max={40}\n              values={values}\n            />\n\n            {/* <Button type='submit' label='Set Size' className='' /> */}\n          </Form>\n        </DesignPanel>\n      )}\n    </Formik>\n  );\n};\n\nexport default SetSize;\n","import { Panel } from 'primereact/panel';\nimport { Steps } from 'primereact/steps';\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { designSteps, setPuzzleState } from 'store/designSlice';\nimport { RootState } from '../../store/store';\nimport styles from './CreateGame.module.scss';\nimport SaveGame from './SaveGame';\nimport SetCells from './SetCells';\nimport SetHints from './SetHints';\nimport SetSize from './SetSize';\n\nconst CreateGame: React.FC = () => {\n  const dispatch = useDispatch();\n  const { activeStep } = useSelector((state: RootState) => state.design);\n\n  useEffect(() => {\n    const puzzleStateJSON = localStorage.getItem('puzzleState');\n    if (puzzleStateJSON) {\n      console.log('Found puzzle in local storage');\n      const state = JSON.parse(puzzleStateJSON);\n      dispatch(setPuzzleState(state));\n    }\n  }, [dispatch]);\n\n  return (\n    <div className={styles.createGame}>\n      <Panel header='Create a new Kakuro puzzle'>\n        <div className={styles.createSteps}>\n          <Steps model={designSteps} activeIndex={activeStep} />\n        </div>\n      </Panel>\n\n      {activeStep === 0 && <SetSize />}\n      {activeStep === 1 && <SetCells />}\n      {activeStep === 2 && <SetHints />}\n      {activeStep === 3 && <SaveGame />}\n    </div>\n  );\n};\n\nexport default CreateGame;\n","import { format } from 'date-fns';\nimport { Column } from 'primereact/column';\nimport { DataTable } from 'primereact/datatable';\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState } from 'store/store';\nimport { difficultyLevels } from 'types/puzzle';\nimport { fetchList, fetchSolved, IListGame, setChoiceID } from './listSlice';\n\nconst PuzzleList: React.FC = () => {\n  const { user } = useSelector((state: RootState) => state.users);\n  const { list, choice, solved } = useSelector(\n    (state: RootState) => state.list\n  );\n  const dispatch = useDispatch();\n  const filtered = (list && user) ? list.filter(p => !solved.includes(p._id!)) : list;\n\n  useEffect(() => {\n    dispatch(fetchList());\n    if (user) {\n      dispatch(fetchSolved());\n    }\n  }, [dispatch, user]);\n\n  const formatDate = (date: Date) => format(date, 'dd-MM-yyyy');\n\n  const difficultyTemplate = (puzzle: IListGame) =>\n    difficultyLevels[puzzle.level];\n\n  const dateTemplate = (puzzle: IListGame) =>\n    formatDate(new Date(puzzle.createdAt));\n\n  const solvedTemplate = (puzzle: IListGame) => {\n    if (!puzzle._id) {\n      return 'Unknown';\n    }\n\n    return solved.includes(puzzle._id) ? <i className='mdi mdi-check'></i> : '';\n  };\n\n  return (\n    // <Panel header='List of Puzzles'>\n    <DataTable\n      value={filtered}\n      autoLayout\n      stripedRows\n      className='p-datatable-sm'\n      scrollable\n      scrollHeight='60vh'\n      selectionMode='single'\n      selection={choice}\n      onSelectionChange={e => dispatch(setChoiceID(e.value))}\n      dataKey='_id'\n      style={{ width: '80vw' }}\n      stateStorage='local'\n      stateKey='kakuro-puzzle-list'>\n      <Column field='name' header='Puzzle name' sortable />\n      <Column\n        field='level'\n        header='Difficulty'\n        body={difficultyTemplate}\n        filter\n        sortable\n      />\n      <Column field='columnCount' header='Columns' sortable />\n      <Column field='rowCount' header='Rows' sortable />\n      <Column field='creatorName' header='Creator' filter sortable />\n      <Column field='createdAt' header='Date' body={dateTemplate} sortable />\n      {user && solved && (\n        <Column field='solved' header='Solved' body={solvedTemplate} />\n      )}\n    </DataTable>\n    // </Panel>\n  );\n};\n\nexport default PuzzleList;\n","import { IListGame } from 'features/list/listSlice';\nimport { CellType, IGameData, PuzzleStates } from 'store/gameSlice';\nimport doCountMissingCells from './doCountMissingCells';\nimport { doMakeHintCells, doFillHintsFromSolution } from './hintCells';\n\nfunction makePlayable(input: IListGame): IGameData {\n  // convert each digit of cell string to proper cell\n  const cells = input.cellString.split('').map((char, index) => {\n    if (+char >= 1 && +char <= 9) {\n      return {\n        index,\n        type: CellType.NumberCell,\n        guess: 0,\n        solution: +char,\n        pencilMarks: [],\n      };\n    } else {\n      return { index, type: CellType.BlankCell };\n    }\n  });\n\n  // make hint cells\n  const newPuzzle: IGameData = {\n    ...input,\n    cells,\n    state: PuzzleStates.Solved,\n    hintCount: -1,\n    missingCells: doCountMissingCells(cells),\n  };\n\n  doMakeHintCells(newPuzzle);\n  doFillHintsFromSolution(newPuzzle);\n\n  // JSON.stringify(newPuzzle, null, 4);\n  return newPuzzle;\n}\n\nexport default makePlayable;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport classNames from 'classnames';\nimport { importPuzzle } from 'features/list/listSlice';\nimport PuzzleList from 'features/list/PuzzleList';\nimport myHistory from 'myHistory';\nimport { Button } from 'primereact/button';\nimport { Dropdown } from 'primereact/dropdown';\nimport React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setCurrentGame } from 'store/gameSlice';\nimport { RootState } from 'store/store';\nimport makePlayable from 'utils/makePlayable';\nimport styles from './MainMenu.module.scss';\n\n// menneske is <rows> x <columns>\nconst puzzleSizes = [\n  {label: ' 8x8', value: '8x8'},\n  {label: '10x10', value: '10x10'},\n  {label: '13x10', value: '10x13'},\n  {label: '13x13', value: '13x13'},\n  {label: '15x15', value: '15x15'},\n  {label: '20x20', value: '20x20'},\n  {label: '25x25', value: '25x25'},\n  {label: '30x15', value: '15x30'},\n  {label: '30x30', value: '30x30'},\n];\n\nconst MainMenu: React.FC = () => {\n  const { choice } = useSelector((state: RootState) => state.list);\n  const [puzzleSize, setPuzzleSize] = useState('20x20');\n  const dispatch = useDispatch();\n\n  const handleFetch = () => {\n    dispatch(importPuzzle(puzzleSize));\n  };\n\n  const handlePlay = () => {\n    const newPuzzle = makePlayable(choice!);\n    dispatch(setCurrentGame(newPuzzle));\n    myHistory.push('/play');\n  };\n\n  return (\n    <div className={styles.content}>\n      <div className='text-center'>\n        <div className='mb-3 font-bold text-2xl'>\n          <span className='text-900'>The best </span>\n          <span className='text-blue-600'>Kakuro Game </span>\n          <span className='text-900'>money can buy</span>\n        </div>\n        <div className='text-700 text-sm mb-6'>\n          All of this is work in progress, so be patient and stay tuned.\n        </div>\n\n        <div className={classNames('flex flex-row justify-content-center p-3', styles.bar)}>\n          <Dropdown\n            value={puzzleSize}\n            options={puzzleSizes}\n            onChange={e => setPuzzleSize(e.value)}\n            placeholder='Select a Grid Size'\n          />\n\n          <Button\n            label='Fetch game'\n            icon='mdi mdi-download-network'\n            className='p-button-lg'\n            onClick={handleFetch}\n          />\n          <Button\n            label='Create game'\n            icon='mdi mdi-pencil'\n            className='p-button-lg'\n            onClick={e => myHistory.push('/create')}\n          />\n          <Button\n            label='Start New Game!'\n            icon='mdi mdi-controller-classic'\n            className='p-button-lg'\n            onClick={handlePlay}\n            disabled={!choice}\n          />\n        </div>\n\n        <div className=''>\n          <PuzzleList />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default MainMenu;\n","// https://usehooks.com/useEventListener/\nimport { useEffect, useRef } from 'react';\n\nfunction useEventListener(eventName, handler, element = window) {\n  // Create a ref that stores handler\n  const savedHandler = useRef();\n  // Update ref.current value if handler changes.\n  // This allows our effect below to always get latest handler ...\n  // ... without us needing to pass it in effect deps array ...\n  // ... and potentially cause effect to re-run every render.\n  useEffect(() => {\n    savedHandler.current = handler;\n  }, [handler]);\n\n  useEffect(\n    () => {\n      // Make sure element supports addEventListener\n      // On\n      const isSupported = element && element.addEventListener;\n      if (!isSupported) return;\n      // Create event listener that calls handler function stored in ref\n      const eventListener = event => savedHandler.current(event);\n      // Add event listener\n      element.addEventListener(eventName, eventListener);\n      // Remove event listener on cleanup\n      return () => {\n        element.removeEventListener(eventName, eventListener);\n      };\n    },\n\n    [eventName, element] // Re-run if eventName or element changes\n  );\n}\n\nexport default useEventListener;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport {\n  CellType,\n  IGameData,\n  setGuess,\n  setSelectedIndex,\n} from '../store/gameSlice';\nimport useEventListener from 'hooks/useEventListener';\nimport React, { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState } from 'store/store';\n\nconst KeyboardListener: React.FC = () => {\n  const dispatch = useDispatch();\n  const { game, selectedIndex } = useSelector((state: RootState) => state.game);\n  const { cells } = game as IGameData;\n\n  const selectCell = (newIndex: number) => {\n    if (\n      newIndex > game.columnCount &&\n      newIndex < cells.length &&\n      cells[newIndex].type === CellType.NumberCell\n    ) {\n      dispatch(setSelectedIndex(newIndex));\n    }\n  };\n\n  const handleKeyDown = useCallback(\n    ({ key }) => {\n      // console.log(`handleKeyDown(${key})`);\n\n      if (!selectedIndex) {\n        // do nothing if no cell selected\n        return;\n      }\n      if (key === 'ArrowUp' && game) {\n        selectCell(selectedIndex - game.columnCount);\n      } else if (key === 'ArrowDown' && game) {\n        selectCell(selectedIndex + game.columnCount);\n      } else if (key === 'ArrowLeft' && game) {\n        selectCell(selectedIndex - 1);\n      } else if (key === 'ArrowRight' && game) {\n        selectCell(selectedIndex + 1);\n      } else if (key >= '0' && key <= '9') {\n        dispatch(setGuess({ index: selectedIndex, guess: +key }));\n      } else if (key === 'Delete') {\n        dispatch(setGuess({ index: selectedIndex, guess: 0 }));\n      } else {\n        console.log('Key pressed:', key);\n      }\n    },\n    [selectedIndex]\n  );\n\n  useEventListener('keydown', handleKeyDown);\n  return <></>;\n};\n\nexport default KeyboardListener;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport getCombinations from 'utils/getCombinations';\nimport React, { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../../store/store';\nimport styles from './CombinationLine.module.scss';\n\nconst CombinationLine: React.FC = () => {\n  const { hints } = useSelector((state: RootState) => state.game);\n  const [possibilities, setPossibilities] = useState<number[][][]>([[], []]);\n\n  const renderDigit = (d: number, direction: number) => {\n    const key = 'd' + d + '' + direction;\n\n    if (hints[direction].used.includes(d)) {\n      return (\n        <span className={styles.highlight} key={key}>\n          {d}\n        </span>\n      );\n    } else {\n      return <span key={key}>{d}</span>;\n    }\n  };\n\n  const renderPossibility = (a: number[], index: number, direction: number) => {\n    const key = 'p' + a[0] + '' + index + '' + direction;\n\n    return (\n      <div className={styles.possibility} key={key}>\n        {a.map(d => renderDigit(d, direction))}\n      </div>\n    );\n  };\n\n  const renderPossibilities = (a: number[][], direction: number) => {\n    const key = 'ps' + a[0] + '' + direction;\n\n    return (\n      <div key={key}>\n        {a.map((b, i) => renderPossibility(b, i, direction))}\n      </div>\n    );\n  };\n\n  const renderLine = (direction: number) => {\n    if (hints[direction].sum < 0) {\n      return '\\u00a0';\n    } else {\n      return (\n        <>\n          <div className={styles.sum}>\n            {hints[direction].sum}\n            {direction === 0 ? 'a' : 'd'}\n          </div>\n          {renderPossibilities(possibilities[direction], direction)}\n        </>\n      );\n    }\n  };\n\n  useEffect(() => {\n    if (hints[0].index > -1) {\n      setPossibilities([getCombinations(hints[0]), getCombinations(hints[1])]);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [hints]);\n\n  return (\n    <div className={styles.combinations}>\n      <div className={styles.column}>\n        <div className={styles.text}>{renderLine(0)}</div>\n      </div>\n      <div className={styles.column}>\n        <div className={styles.text}>{renderLine(1)}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default CombinationLine;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport classNames from 'classnames';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setGuess, togglePencilMark } from '../../store/gameSlice';\nimport { RootState } from '../../store/store';\nimport styles from './GuessButton.module.scss';\n\nexport interface Props {\n  digit: number;\n  pencilMark: boolean;\n}\n\nconst GuessButton: React.FC<Props> = ({ digit, pencilMark }) => {\n  const { selectedIndex } = useSelector((state: RootState) => state.game);\n  const dispatch = useDispatch();\n\n  const handleGuessClick = (event: React.MouseEvent) => {\n    if (digit >= 0 && digit <= 9 && selectedIndex) {\n      if (pencilMark) {\n        dispatch(togglePencilMark({ index: selectedIndex, guess: digit }));\n      } else {\n        dispatch(setGuess({ index: selectedIndex, guess: digit }));\n      }\n    }\n  };\n\n  return (\n    <div\n      className={classNames(\n        styles.guessButton,\n        pencilMark && styles.pencilMark,\n        styles.pencilMark1\n      )}\n      onClick={handleGuessClick}>\n      <div className={classNames(styles.digit, pencilMark && styles[`digit${digit}`])}>\n        {digit}\n      </div>\n    </div>\n  );\n};\n\nexport default GuessButton;\n","import { confirmDialog } from 'primereact/confirmdialog'; // To use <ConfirmDialog> tag\nimport { ToggleButton } from 'primereact/togglebutton';\nimport classnames from 'classnames';\nimport { Button } from 'primereact/button';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  autoPencil,\n  clearPencilMarks,\n  increaseZoom,\n  PuzzleStates,\n  redo,\n  resetGame,\n  setGuess,\n  toggleMarkWrong,\n  togglePencilMark,\n  undo,\n} from '../../store/gameSlice';\nimport { RootState } from '../../store/store';\nimport styles from './Controls.module.scss';\nimport GuessButton from './GuessButton';\n\n/*\n * Here be number buttons for guesses and pencil marks\n */\nconst Controls: React.FC = () => {\n  const { selectedIndex, zoomLevel, markWrong, game, undoStack, redoStack } =\n    useSelector((state: RootState) => state.game);\n  const dispatch = useDispatch();\n  const digits = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n\n  const handleZoom = (delta: number) => dispatch(increaseZoom(delta));\n\n  const handleDelete = (event: React.MouseEvent) => {\n    if (selectedIndex) {\n      dispatch(setGuess({ index: selectedIndex, guess: 0 }));\n    }\n  };\n\n  const handleRestart = (event: React.MouseEvent) => {\n    confirmDialog({\n      message: 'Are you sure you want to start over?',\n      header: 'Warning',\n      icon: 'pi pi-exclamation-triangle',\n      accept: () => dispatch(resetGame()),\n      // reject: () => rejectFunc()\n  });\n\n\n  };\n\n  const handleClearPencilMarks = (event: React.MouseEvent) => {\n    dispatch(clearPencilMarks());\n  };\n\n  const handleDeletePencilMarks = (event: React.MouseEvent) => {\n    if (selectedIndex) {\n      dispatch(togglePencilMark({ index: selectedIndex, guess: 0 }));\n    }\n  };\n\n  const handleAutoPencil = (event: React.MouseEvent) => {\n    dispatch(autoPencil());\n  };\n\n  const renderButton = (digit: number, pencilMark: boolean) => {\n    return <GuessButton key={digit} digit={digit} pencilMark={pencilMark} />;\n  };\n\n  return (\n    <aside className={classnames('controls', styles.controls)}>\n      <div className={styles.zoomButtons}>\n        <Button\n          className={'p-button-lg'}\n          icon='mdi mdi-magnify-minus'\n          onClick={() => handleZoom(-1)}\n          disabled={zoomLevel < 1}\n        />\n        <Button\n          className={'p-button-lg'}\n          label='100 %'\n          onClick={() => handleZoom(0)}\n        />\n        <Button\n          className={'p-button-lg'}\n          icon='mdi mdi-magnify-plus'\n          onClick={() => handleZoom(1)}\n          disabled={zoomLevel > 10}\n        />\n      </div>\n\n      <div className={styles.guessButtons}>\n        <div className={styles.columns}>\n          {digits.map(d => renderButton(d, true))}\n        </div>\n\n        <Button\n          className={classnames(\n            'button',\n            'is-warning',\n            'is-large',\n            styles.button\n          )}\n          icon='mdi mdi-pencil-off'\n          label='Delete'\n          onClick={handleDeletePencilMarks}\n        />\n\n        <Button\n          className={classnames('button is-large', styles.button)}\n          onClick={handleAutoPencil}\n          label='Auto Pencil'\n          icon='mdi mdi-pencil'\n        />\n\n        <Button\n          className={classnames('button is-large', styles.button)}\n          onClick={handleClearPencilMarks}\n          label='Clear Pencil Marks'\n          icon='mdi mdi-pencil-off'\n        />\n\n        <div className={styles.columns}>\n          {digits.map(d => renderButton(d, false))}\n        </div>\n\n        <Button\n          className={classnames(\n            'button',\n            'is-warning',\n            'is-large',\n            styles.button\n          )}\n          icon='mdi mdi-delete'\n          label='Delete'\n          onClick={handleDelete}\n        />\n\n        <Button\n          className={classnames(\n            'button',\n            'p-warning-button',\n            'is-large',\n            styles.button\n          )}\n          icon='mdi mdi-restart'\n          label='Start Over'\n          onClick={handleRestart}\n        />\n      </div>\n\n      <div className=''>\n        {game.state === PuzzleStates.Solved && (\n          <ToggleButton\n            checked={markWrong}\n            onLabel='Show mistakes'\n            offLabel='Hide mistakes'\n            onIcon='mdi mdi-eye'\n            offIcon='mdi mdi-eye-off'\n            onChange={() => dispatch(toggleMarkWrong())}\n          />\n        )}\n      </div>\n      <div className='undoredo'>\n        <Button\n          className={classnames('button', 'p-button-large', styles.button)}\n          icon='mdi mdi-undo'\n          label='Undo'\n          onClick={() => dispatch(undo())}\n          disabled={undoStack.length === 0}\n        />\n\n        <Button\n          className={classnames('button', 'p-warning-button', styles.button)}\n          icon='mdi mdi-redo'\n          label='Redo'\n          onClick={() => dispatch(redo())}\n          disabled={redoStack.length === 0}\n        />\n      </div>\n\n      <div className='debug'>\n        <div>Missing: {game.missingCells}</div>\n        <div>Selected: {selectedIndex}</div>\n      </div>\n    </aside>\n  );\n};\n\nexport default Controls;\n","export function calcBoardSize(columnCount: number, rowCount: number, zoomLevel: number) {\n  return { width: `${(columnCount) * zoomLevel * 10}px`, height: `${(rowCount) * zoomLevel * 10}px` };\n}\n\nexport function calcCellSize(zoomLevel: number) {\n  return { width: `${zoomLevel * 10}px`, height: `${zoomLevel * 10}px` };\n}\n\nexport function calcGuessFontSize(zoomLevel: number) {\n  return { fontSize: `${zoomLevel / 1.4}rem` };\n}\n\nexport function calcHintFontSize(zoomLevel: number) {\n  return { fontSize: `${zoomLevel / 3.5}rem` };\n}\n\nexport function calcPencilMarkFontSize(zoomLevel: number) {\n  return { fontSize: `${zoomLevel / 4.0}rem`, lineHeight: `${zoomLevel / 4.0}rem` };\n}\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport classnames from 'classnames';\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport { RootState } from 'store/store';\nimport { calcCellSize } from 'utils/calcCellSize';\nimport { IBlankCell } from '../../store/gameSlice';\nimport styles from './BlankCell.module.scss';\n\nexport interface Props {\n  cell: IBlankCell;\n  index: number;\n}\n\nconst BlankCell: React.FC<Props> = ({ cell, index }) => {\n  const { zoomLevel } = useSelector((state: RootState) => state.game);\n  const style = calcCellSize(zoomLevel);\n\n  return (\n    <div className={classnames('gamecell', styles.blank)} style={style}></div>\n  );\n};\n\nexport default BlankCell;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport classnames from 'classnames';\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport { RootState } from 'store/store';\nimport { calcCellSize, calcHintFontSize } from 'utils/calcCellSize';\nimport { IHintCell } from '../../store/gameSlice';\nimport './HintCell.scss';\n\nexport interface Props {\n  cell: IHintCell;\n  index: number;\n}\n\nconst HintCell: React.FC<Props> = ({ cell, index }) => {\n  const { zoomLevel } = useSelector((state: RootState) => state.game);\n  const style = calcCellSize(zoomLevel);\n  const fontSize = calcHintFontSize(zoomLevel);\n\n  return (\n    <div className={classnames('gamecell', 'hintCell')} style={style}>\n      <div className='horizontalHint' style={fontSize}>\n        {cell.hintHorizontal}\n      </div>\n      <div className='verticalHint' style={fontSize}>\n        {cell.hintVertical}\n      </div>\n    </div>\n  );\n};\n\nexport default HintCell;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport classnames from 'classnames';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { calcCellSize, calcGuessFontSize, calcPencilMarkFontSize } from 'utils/calcCellSize';\nimport { INumberCell, setSelectedIndex } from '../../store/gameSlice';\nimport { RootState } from '../../store/store';\nimport styles from './NumberCell.module.scss';\n\nexport interface Props {\n  cell: INumberCell;\n  index: number;\n}\n\nconst NumberCell: React.FC<Props> = ({ cell, index }) => {\n  const { selectedIndex, zoomLevel, markWrong } = useSelector(\n    (state: RootState) => state.game\n  );\n  const dispatch = useDispatch();\n  const guessFontSize = calcGuessFontSize(zoomLevel);\n  const pencilMarkFontSize = calcPencilMarkFontSize(zoomLevel);\n\n  const handleClick = (event: React.MouseEvent) => {\n    dispatch(setSelectedIndex(index));\n  };\n\n  const renderPencilMarks = (pencilMarks: number[]) => {\n    return pencilMarks.map(pm => (\n      <div key={pm} className={styles[`digit${pm}`]} style={pencilMarkFontSize}>\n        {pm}\n      </div>\n    ));\n  };\n\n  const cellStyle = calcCellSize(zoomLevel);\n\n  const wrongGuess =\n    markWrong && cell.solution > 0 && cell.guess !== cell.solution;\n\n  return (\n    <div\n      className={classnames('gamecell', styles.number, {\n        selected: index === selectedIndex,\n      })}\n      style={cellStyle}\n      onClick={handleClick}>\n      {cell.guess > 0 && (\n        <div\n          className={classnames(styles.guess, { wrongGuess })}\n          style={guessFontSize}>\n          {cell.guess}\n        </div>\n      )}\n      {!cell.guess && cell.pencilMarks?.length > 0 && (\n        <div className={classnames(styles.pencilMarks)} style={{}}>\n          {renderPencilMarks(cell.pencilMarks)}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default NumberCell;\n","import classnames from 'classnames';\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport { calcBoardSize } from 'utils/calcCellSize';\nimport {\n  CellType,\n  IBlankCell,\n  ICell,\n  IHintCell,\n  INumberCell,\n} from '../../store/gameSlice';\nimport { RootState } from '../../store/store';\nimport BlankCell from './BlankCell';\nimport './Cell.scss';\nimport styles from './GameGrid.module.scss';\nimport HintCell from './HintCell';\nimport NumberCell from './NumberCell';\n\nconst GameGrid: React.FC = () => {\n  const { game, zoomLevel } = useSelector((state: RootState) => state.game);\n  const { columnCount, rowCount } = game;\n\n  const renderCell = (cell: ICell, index: number) => {\n    if (cell.type === CellType.BlankCell) {\n      return <BlankCell cell={cell as IBlankCell} index={index} key={index} />;\n    } else if (cell.type === CellType.HintCell) {\n      return <HintCell cell={cell as IHintCell} index={index} key={index} />;\n    } else {\n      // type == Number\n      return (\n        <NumberCell cell={cell as INumberCell} index={index} key={index} />\n      );\n    }\n  };\n\n  const renderGrid = () => {\n    return (\n      <div\n        className={classnames(styles.grid)}\n        style={{\n          gridTemplateColumns: `repeat(${game!.columnCount}, 1fr)`,\n          gridTemplateRows: `repeat(${game!.rowCount}, 1fr)`,\n        }}>\n        {game.cells.map((cell, i) => renderCell(cell, i))}\n      </div>\n    );\n  };\n\n  return (\n    <div className={classnames(styles.gameBackground)}>\n      <div\n        className={classnames(styles.gridContainer)}\n        style={calcBoardSize(columnCount, rowCount, zoomLevel)}>\n        {renderGrid()}\n      </div>\n    </div>\n  );\n};\n\nexport default GameGrid;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport KeyboardListener from 'components/KeyboardListener';\nimport myHistory from 'myHistory';\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { IGameData, setGameState } from 'store/gameSlice';\nimport { RootState } from '../../store/store';\nimport './Cell.scss';\nimport CombinationLine from './CombinationLine';\nimport Controls from './Controls';\nimport GameGrid from './GameGrid';\nimport styles from './PlayGame.module.scss';\n\nconst PlayGame: React.FC = () => {\n  const { game } = useSelector((state: RootState) => state.game);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (game.state >= 0) {\n      return;\n    }\n\n    console.log('Loading game state...');\n    const res = localStorage.getItem('currentGame');\n    if (res) {\n      const newGame: IGameData = JSON.parse(res);\n      dispatch(setGameState(newGame));\n    } else {\n      myHistory.push('/');\n    }\n  }, []);\n\n  return (\n    <>\n      <KeyboardListener />\n\n      <div className={styles.content}>\n        <CombinationLine />\n        <GameGrid />\n        <Controls />\n      </div>\n    </>\n  );\n};\n\nexport default PlayGame;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport MyInput from 'components/MyInput';\nimport { Form, Formik } from 'formik';\nimport myHistory from 'myHistory';\nimport { Button } from 'primereact/button';\nimport { InputText } from 'primereact/inputtext';\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { RootState } from 'store/store';\nimport { ISigninValues, login } from 'store/userSlice';\n\nconst SignIn: React.FC = () => {\n  const dispatch = useDispatch();\n  const { user } = useSelector((state: RootState) => state.users);\n  // const [checked, setChecked] = useState(false);\n\n  const initialValues: ISigninValues = {\n    email: '',\n    password: '',\n  };\n\n  const handleSubmit = (values: ISigninValues) => {\n    dispatch(login(values));\n  };\n\n  useEffect(() => {\n    if (user) {\n      myHistory.push('/');\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [user]);\n\n  return (\n    <div\n      className='flex align-items-center justify-content-center'\n      style={{ height: '60%' }}>\n      <div className='surface-card p-4 shadow-2 border-round w-full lg:w-6'>\n        <div className='text-center mb-5'>\n          {/* <img\n            src='assets/images/blocks/logos/hyper.svg'\n            alt='hyper'\n            height={50}\n            className='mb-3'\n          /> */}\n          <div className='text-900 text-3xl font-medium mb-3'>\n            Welcome Back to Mr K.'s Kakuro\n          </div>\n          <span className='text-600 font-medium line-height-3'>\n            Don't have an account?\n          </span>\n          <Link\n            className='font-medium no-underline ml-2 text-blue-500 cursor-pointer'\n            to='/signup'>\n            Create one today!\n          </Link>\n        </div>\n\n        <Formik\n          // enableReinitialize\n          initialValues={initialValues}\n          onSubmit={handleSubmit}\n          // validationSchema={UserSchema}\n        >\n          {({ setFieldValue, values }) => (\n            <Form className='p-fluid'>\n              <MyInput\n                name='email'\n                label='Email'\n                as={InputText}\n                className='block text-900 font-medium mb-2'\n              />\n              <MyInput\n                name='password'\n                label='Password'\n                type='password'\n                as={InputText}\n                className='block text-900 font-medium mb-2'\n              />\n\n              <Button\n                type='submit'\n                label='Sign In!'\n                icon='mdi mdi-login-variant'\n                className='w-full'\n              />\n            </Form>\n          )}\n        </Formik>\n      </div>\n    </div>\n  );\n};\n\nexport default SignIn;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport MyInput from 'components/MyInput';\nimport { Form, Formik } from 'formik';\nimport myHistory from 'myHistory';\nimport { Button } from 'primereact/button';\nimport { InputText } from 'primereact/inputtext';\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { ISignUpValues, signUp } from 'store/userSlice';\nimport * as Yup from 'yup';\n\nconst UserSchema = Yup.object().shape({\n  name: Yup.string()\n    .min(3)\n    .max(50, 'Must be 50 characters or less')\n    .required('Required'),\n  email: Yup.string()\n    .max(50, 'Must be 50 characters or less')\n    .required('Required'),\n  password: Yup.string()\n    .min(10, 'Must be at least 10 characters')\n    .max(25, 'Must be 25 characters or less')\n    .required('Required'),\n});\n\nconst SignUp: React.FC = () => {\n  const dispatch = useDispatch();\n  // const [checked, setChecked] = useState(false);\n\n  const handleSubmit = (values: ISignUpValues) => {\n    dispatch(signUp(values));\n    myHistory.push('/')\n  };\n\n  const initialValues: ISignUpValues = {\n    name: '',\n    email: '',\n    password: '',\n  };\n\n  return (\n    <div\n      className='flex align-items-center justify-content-center'\n      style={{ height: '60%' }}>\n      <div className='surface-card p-4 shadow-2 border-round w-full lg:w-6'>\n        <div className='text-center mb-5'>\n          {/* <img\n            src='assets/images/blocks/logos/hyper.svg'\n            alt='hyper'\n            height={50}\n            className='mb-3'\n          /> */}\n          <div className='text-900 text-3xl font-medium mb-3'>\n            Sign Up For Mr K.'s Kakuro\n          </div>\n          <span className='text-600 font-medium line-height-3'>\n            Already have an account?\n          </span>\n          <Link\n            className='font-medium no-underline ml-2 text-blue-500 cursor-pointer'\n            to='/signin'>\n            Sign In!\n          </Link>\n        </div>\n\n        <Formik\n          enableReinitialize\n          initialValues={initialValues}\n          onSubmit={handleSubmit}\n          validationSchema={UserSchema}>\n          {({ setFieldValue, values }) => (\n            <Form className='p-fluid'>\n              <MyInput\n                name='name'\n                label='Gamer Name'\n                as={InputText}\n                className='block text-900 font-medium mb-2'\n              />\n              <MyInput\n                name='email'\n                label='Email'\n                as={InputText}\n                className='block text-900 font-medium mb-2'\n              />\n              <MyInput\n                name='password'\n                label='Password'\n                type='password'\n                as={InputText}\n                className='block text-900 font-medium mb-2'\n              />\n\n              <Button\n                type='submit'\n                label='Sign Up!'\n                icon='mdi mdi-account-plus'\n                className='w-full'\n              />\n            </Form>\n          )}\n        </Formik>\n      </div>\n    </div>\n  );\n};\n\nexport default SignUp;\n","import {\n  Action,\n  combineReducers,\n  configureStore,\n  ThunkAction,\n} from '@reduxjs/toolkit';\nimport alertReducer from '../features/alerts/alertSlice';\nimport gameReducer from './gameSlice';\nimport designReducer from './designSlice';\nimport userReducer from './userSlice';\nimport listReducer from '../features/list/listSlice';\n\nexport const rootReducer = combineReducers({\n  alerts: alertReducer,\n  design: designReducer,\n  list: listReducer,\n  game: gameReducer,\n  users: userReducer,\n});\n\nconst store = configureStore({\n  devTools: process.env.NODE_ENV !== 'production',\n  reducer: rootReducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\nexport type AppThunk = ThunkAction<void, RootState, null, Action<string>>;\nexport type AppDispatch = typeof store.dispatch;\n\nexport default store;\n","import MyMenubar from 'components/MyMenubar';\nimport Alerts from 'features/alerts/Alerts';\nimport CreateGame from 'features/creating/CreateGame';\nimport MainMenu from 'features/menu/MainMenu';\nimport PlayGame from 'features/playing/PlayGame';\nimport SignIn from 'features/users/SignIn';\nimport SignUp from 'features/users/SignUp';\nimport myHistory from 'myHistory';\nimport React from 'react';\nimport { Provider } from 'react-redux';\nimport { Route, Router, Switch } from 'react-router-dom';\nimport './App.scss';\nimport store from './store/store';\n\nconst App: React.FC = () => {\n  return (\n    <Provider store={store}>\n      <MyMenubar />\n      <Alerts />\n\n      <Router history={myHistory}>\n        <Switch>\n          <Route path='/create'>\n            <CreateGame />\n          </Route>\n          <Route path='/play'>\n            <PlayGame />\n          </Route>\n          <Route path='/signin'>\n            <SignIn />\n          </Route>\n          <Route path='/signup'>\n            <SignUp />\n          </Route>\n          <Route path='/'>\n            <MainMenu />\n          </Route>\n        </Switch>\n      </Router>\n    </Provider>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"ImportDialog_dialog__5Rts6\",\"dragging\":\"ImportDialog_dragging__2ddO9\",\"button\":\"ImportDialog_button__mXT6g\",\"textarea\":\"ImportDialog_textarea__2QBOO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"guessButton\":\"GuessButton_guessButton__2HTay\",\"pencilMark\":\"GuessButton_pencilMark__30ALz\",\"digit\":\"GuessButton_digit__1y-ZY\",\"digit1\":\"GuessButton_digit1__2OikV\",\"digit2\":\"GuessButton_digit2__1EUR8\",\"digit3\":\"GuessButton_digit3__tibxt\",\"digit4\":\"GuessButton_digit4__2bG_l\",\"digit5\":\"GuessButton_digit5__1DTxj\",\"digit6\":\"GuessButton_digit6__29Opa\",\"digit7\":\"GuessButton_digit7__3aZzj\",\"digit8\":\"GuessButton_digit8__2lnCS\",\"digit9\":\"GuessButton_digit9__35MKY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"designCell\":\"DesignCell_designCell__1mdb1\",\"hintMissing\":\"DesignCell_hintMissing__GjhmS\",\"solution\":\"DesignCell_solution__1hCNm\",\"index\":\"DesignCell_index__1hyaN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"HintDialog_dialog__3oXoT\",\"label\":\"HintDialog_label__1UY5p\",\"buttonGrid\":\"HintDialog_buttonGrid__3MkIY\",\"button\":\"HintDialog_button__2lNtm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"number\":\"NumberCell_number__1mt2Y\",\"guess\":\"NumberCell_guess__1Iq08\",\"pencilMarks\":\"NumberCell_pencilMarks__2eIXW\",\"digit1\":\"NumberCell_digit1__1IfxI\",\"digit2\":\"NumberCell_digit2__1g9yB\",\"digit3\":\"NumberCell_digit3__20FAY\",\"digit4\":\"NumberCell_digit4__1lxHB\",\"digit5\":\"NumberCell_digit5__324jS\",\"digit6\":\"NumberCell_digit6__1elhh\",\"digit7\":\"NumberCell_digit7__1G9wx\",\"digit8\":\"NumberCell_digit8__21LqC\",\"digit9\":\"NumberCell_digit9__3ltYs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"gameBackground\":\"GameGrid_gameBackground__2gUQF\",\"gridContainer\":\"GameGrid_gridContainer__1jqzn\",\"grid\":\"GameGrid_grid__3SI7n\"};"],"sourceRoot":""}