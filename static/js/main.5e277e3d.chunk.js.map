{"version":3,"sources":["components/Controls.module.scss","components/NumberCell.module.scss","components/CombinationLine.module.scss","components/BlankCell.module.scss","components/GuessButton.module.scss","store/gameSlice.ts","helpers/makeCombinations.ts","components/BlankCell.tsx","components/HintCell.tsx","components/NumberCell.tsx","components/GameGrid.tsx","components/GuessButton.tsx","components/Controls.tsx","store/store.ts","components/CombinationLine.tsx","App.tsx","reportWebVitals.ts","index.tsx","components/GameGrid.module.scss","components/HintCell.module.scss"],"names":["module","exports","Difficulty","CellType","makeCombinations","combinations","digits","Array","fill","_makeCombinations","min","current","set","count","sum","index","length","push","digitsToCombination","gameSlice","createSlice","name","initialState","hints","reducers","fetchGameSuccess","state","action","game","payload","fetchCombinations","setSelectedIndex","currentIndex","selectedIndex","cells","type","Number","hintHorizontal","columnCount","hintVertical","nextRow","setGuess","guess","newGame","JSON","parse","stringify","currentCell","autoPencil","console","log","actions","BlankCell","cell","className","classnames","styles","blank","HintCell","hint","horizontalHint","verticalHint","NumberCell","useSelector","dispatch","useDispatch","number","selected","onClick","event","GameGrid","useEffect","a","axios","get","headers","response","data","gameBackground","gamegrid","onKeyDown","key","tabIndex","grid","map","i","Blank","Hint","renderCell","renderGrid","GuessButton","digit","guessButton","Controls","controls","guessButtons","columns","d","rootReducer","combineReducers","gameReducer","store","configureStore","devTools","process","reducer","CombinationLine","renderPossibilities","b","possibility","join","renderPossibility","possibilitiesH","possibilitiesV","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5e277e3d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"controls\":\"Controls_controls__2tkdC\",\"columns\":\"Controls_columns__2txFE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"number\":\"NumberCell_number__3Tz54\",\"guess\":\"NumberCell_guess__EikMx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"combinations\":\"CombinationLine_combinations__2C57N\",\"possibility\":\"CombinationLine_possibility__meNi6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"blank\":\"BlankCell_blank__3hSGd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"guessButton\":\"GuessButton_guessButton__Tugwc\"};","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { AppThunk } from './store';\nimport axios from 'axios';\nimport makeCombinations, { ICombinations } from '../helpers/makeCombinations';\n\n/* Types */\nexport enum Difficulty {\n  Easy = 0,\n  Medium = 1,\n  MediumPlus = 2,\n  Hard = 3,\n  VeryHard = 4,\n}\n\nexport enum CellType {\n  Blank = 0,\n  Hint = 1,\n  Number = 2,\n}\n\nexport interface ICell {\n  type: CellType;\n}\n\nexport interface IBlankCell extends ICell {\n  type: CellType.Blank;\n}\n\nexport interface IHintCell extends ICell {\n  type: CellType.Hint;\n  hintHorizontal?: number;\n  hintVertical?: number;\n}\n\nexport interface INumberCell extends ICell {\n  type: CellType.Number;\n  pencilMarks: boolean[];\n  guess: number;\n  solution: number;\n}\n\nexport interface IGameData {\n  name: string;\n  level: Difficulty;\n  columnCount: number;\n  cells: ICell[];\n}\n\nexport interface IGuess {\n  index: number;\n  guess: number;\n}\n\ninterface HintValues {\n  index: number;\n  sum: number;\n  count: number;\n}\n\n/* State */\ntype GameSliceState = {\n  game?: IGameData;\n  combinations?: ICombinations;\n  selectedIndex?: number;\n  hints: HintValues[];\n};\n\nconst initialState: GameSliceState = {\n  hints: [\n    { index: -1, sum: -1, count: -1 },\n    { index: -1, sum: -1, count: -1 },\n  ],\n};\n\nexport const gameSlice = createSlice({\n  name: 'game',\n  initialState,\n  reducers: {\n    fetchGameSuccess(state, action: PayloadAction<IGameData>) {\n      state.game = action.payload;\n    },\n    fetchCombinations(state, action: PayloadAction) {\n      state.combinations = makeCombinations();\n    },\n    setSelectedIndex(state, action: PayloadAction<number>) {\n      let currentIndex = action.payload;\n      state.selectedIndex = currentIndex;\n\n      // Find corresponding hint cell horizontally\n      while (state.game?.cells[currentIndex].type === CellType.Number) {\n        currentIndex--;\n      }\n\n      state.hints[0].index = currentIndex;\n      state.hints[0].sum =\n        (state.game!.cells[currentIndex] as IHintCell).hintHorizontal! || -1;\n\n      // Find count of cells for this hint\n      currentIndex = action.payload;\n      while (\n        (currentIndex + 1) % state.game!.columnCount !== 0 &&\n        state.game?.cells[currentIndex + 1].type === CellType.Number\n      ) {\n        currentIndex++;\n      }\n\n      state.hints[0].count = currentIndex - state.hints[0].index;\n\n      // Find corresponding hint cell vertically\n      currentIndex = action.payload;\n      while (state.game?.cells[currentIndex].type === CellType.Number) {\n        currentIndex -= state.game!.columnCount;\n      }\n\n      state.hints[1].index = currentIndex;\n      state.hints[1].sum =\n        (state.game!.cells[currentIndex] as IHintCell).hintVertical! || -1;\n\n      // Find count of cells for this hint\n      currentIndex = action.payload;\n      let nextRow = currentIndex + state.game!.columnCount;\n      while (\n        nextRow < state.game!.cells.length &&\n        state.game!.cells[nextRow].type === CellType.Number\n      ) {\n        currentIndex = nextRow;\n        nextRow = currentIndex + state.game!.columnCount;\n      }\n\n      const count = (currentIndex - state.hints[1].index) / state.game!.columnCount;\n      state.hints[1].count = count;\n    },\n    setGuess(state, action: PayloadAction<IGuess>) {\n      const { index, guess } = action.payload;\n      const newGame: IGameData = JSON.parse(JSON.stringify(state.game));\n      const currentCell: INumberCell = newGame.cells[index] as INumberCell;\n      if (currentCell.type === CellType.Number) {\n        currentCell.guess = guess;\n        state.game = newGame;\n      }\n    },\n    autoPencil(state, action: PayloadAction) {\n      console.log('autoPencil Not Implemented Yet!');\n    },\n  },\n});\n\nexport const {\n  fetchGameSuccess,\n  fetchCombinations,\n  setSelectedIndex,\n  setGuess,\n  autoPencil,\n} = gameSlice.actions;\n\nexport default gameSlice.reducer;\n\nexport const fetchGame = (): AppThunk => async (dispatch: any) => {\n  let game;\n  try {\n    const response = await axios.get('puzzles/sample.json', {\n      headers: { 'Access-Control-Allow-Origin': '*' },\n    });\n    game = response.data;\n  } catch (error) {\n    // TODO: Show error\n    // dispatch(setErrorAlert(`error fetching downloads`));\n    return;\n  }\n\n  dispatch(fetchGameSuccess(game));\n};\n","export interface ICombinationsForCount {\n  [sum: string]: number[][];\n}\n\nexport interface ICombinations {\n  [count: string]: ICombinationsForCount;\n}\n\nconst makeCombinations = () => {\n  const combinations: ICombinations = {};\n  const digits = new Array(10).fill(false);\n\n  const digitsToCombination = () => {\n    const set = new Array<number>();\n    let count = 0;\n    let sum = 0;\n\n    for (let index = 1; index < digits.length; index++) {\n      if (digits[index]) {\n        set.push(index);\n        count += 1;\n        sum += index;\n      }\n    }\n\n    if (!combinations[count]) {\n      combinations[count] = {};\n    }\n\n    if (!combinations[count][sum]) {\n      combinations[count][sum] = new Array<number[]>();\n    }\n\n    combinations[count][sum].push(set);\n  };\n\n  const _makeCombinations = (min: number, current: number) => {\n    if (current === 10) {\n      digitsToCombination();\n    } else {\n      digits[current] = true;\n      _makeCombinations(min, current + 1);\n      digits[current] = false;\n      _makeCombinations(min, current + 1);\n      current++;\n    }\n  };\n\n  for (let min = 1; min < 9; min++) {\n    digits[min] = true;\n    _makeCombinations(min, min + 1);\n    digits[min] = false;\n  }\n\n  delete combinations['1'];\n  return combinations;\n};\n\nexport default makeCombinations;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport classnames from 'classnames';\nimport React from 'react';\nimport { IBlankCell } from '../store/gameSlice';\nimport styles from './BlankCell.module.scss';\n\nexport interface Props {\n  cell: IBlankCell;\n  index: number;\n}\n\nconst BlankCell: React.FC<Props> = ({ cell, index }) => {\n  return <div className={classnames('gamecell', styles.blank)}></div>;\n};\n\nexport default BlankCell;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport classnames from 'classnames';\nimport React from 'react';\nimport { IHintCell } from '../store/gameSlice';\nimport styles from './HintCell.module.scss';\n\nexport interface Props {\n  cell: IHintCell;\n  index: number;\n}\n\nconst HintCell: React.FC<Props> = ({ cell, index }) => {\n  return (\n    <div className={classnames('gamecell', styles.hint)}>\n      <div className={styles.horizontalHint}>{cell.hintHorizontal}</div>\n      <div className={styles.verticalHint}>{cell.hintVertical}</div>\n    </div>\n  );\n};\n\nexport default HintCell;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport classnames from 'classnames';\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { INumberCell, setSelectedIndex } from '../store/gameSlice';\nimport styles from './NumberCell.module.scss';\nimport { RootState } from '../store/store';\nimport { useSelector } from 'react-redux';\n\nexport interface Props {\n  cell: INumberCell;\n  index: number;\n}\n\nconst NumberCell: React.FC<Props> = ({ cell, index }) => {\n  const selectedIndex = useSelector(\n    (state: RootState) => state.game.selectedIndex\n  );\n  const dispatch = useDispatch();\n\n  const handleClick = (event: React.MouseEvent) => {\n    dispatch(setSelectedIndex(index));\n  };\n\n  return (\n    <div\n      className={classnames('gamecell', styles.number, {\n        selected: index === selectedIndex,\n      })}\n      onClick={handleClick}>\n      {cell.guess >= 0 && (\n        <div className={classnames(styles.guess)}>{cell.guess}</div>\n      )}\n    </div>\n  );\n};\n\nexport default NumberCell;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport classnames from 'classnames';\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  CellType,\n  fetchCombinations,\n  fetchGame,\n  IBlankCell,\n  ICell,\n  IHintCell,\n  INumberCell,\n  setGuess\n} from '../store/gameSlice';\nimport { RootState } from '../store/store';\nimport BlankCell from './BlankCell';\nimport './Cell.scss';\nimport styles from './GameGrid.module.scss';\nimport HintCell from './HintCell';\nimport NumberCell from './NumberCell';\n\nconst GameGrid: React.FC = () => {\n  const { combinations, game, selectedIndex } =\n    useSelector((state: RootState) => state.game);\n  const dispatch = useDispatch();\n\n  const handleKeyPress = (event: any) => {\n    if (!selectedIndex) {\n      // do nothing if no cell selected\n      return;\n    }\n\n    if (event.key >= '0' && event.key <= '9') {\n      dispatch(setGuess({ index: selectedIndex, guess: +event.key }));\n    } else if (event.key === 'Delete') {\n      dispatch(setGuess({ index: selectedIndex, guess: -1 }));\n    } else {\n      console.log('Key pressed:', event.key);\n    }\n  };\n\n  const renderCell = (cell: ICell, index: number) => {\n    if (cell.type === CellType.Blank) {\n      return <BlankCell cell={cell as IBlankCell} index={index} key={index} />;\n    } else if (cell.type === CellType.Hint) {\n      return <HintCell cell={cell as IHintCell} index={index} key={index} />;\n    } else {\n      // type == Number\n      return (\n        <NumberCell cell={cell as INumberCell} index={index} key={index} />\n      );\n    }\n  };\n\n  const renderGrid = () => {\n    if (!game) {\n      return;\n    }\n\n    return (\n      <div className={styles.grid}>\n        {game.cells.map((cell, i) => renderCell(cell, i))}\n      </div>\n    );\n  };\n\n  useEffect(() => {\n    if (game == null) {\n      dispatch(fetchGame());\n    }\n    if (combinations == null) {\n      dispatch(fetchCombinations());\n    }\n  }, []);\n\n  return (\n    <div className={classnames('main', styles.gameBackground)}>\n      <div className={styles.gamegrid} onKeyDown={handleKeyPress} tabIndex={-1}>\n        {renderGrid()}\n      </div>\n    </div>\n  );\n};\n\nexport default GameGrid;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setGuess } from '../store/gameSlice';\nimport { RootState } from '../store/store';\nimport styles from './GuessButton.module.scss';\n\nexport interface Props {\n  digit: number;\n}\n\nconst GuessButton: React.FC<Props> = ({ digit }) => {\n  const { selectedIndex } = useSelector((state: RootState) => state.game);\n  const dispatch = useDispatch();\n\n  const handleGuessClick = (event: React.MouseEvent) => {\n    if (digit >= 0 && digit <= 9 && selectedIndex) {\n      dispatch(setGuess({ index: selectedIndex, guess: digit }));\n    }\n  };\n\n  return (\n    <button className={styles.guessButton} onClick={handleGuessClick}>\n      {digit}\n    </button>\n  );\n};\n\nexport default GuessButton;\n","import React from 'react';\nimport styles from './Controls.module.scss';\nimport classnames from 'classnames';\nimport GuessButton from './GuessButton';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState } from '../store/store';\nimport { autoPencil, setGuess } from '../store/gameSlice';\n\n/*\n * Here be number buttons for guesses and pencil marks\n */\nconst Controls: React.FC = () => {\n  const { selectedIndex } = useSelector((state: RootState) => state.game);\n  const dispatch = useDispatch();\n  const digits = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n\n  const handleDeleteClick = (event: React.MouseEvent) => {\n    if (selectedIndex) {\n      dispatch(setGuess({ index: selectedIndex, guess: -1 }));\n    }\n  };\n\n  const handleAutoPencil = (event: React.MouseEvent) => {\n    dispatch(autoPencil());\n  };\n\n  const renderButton = (digit: number) => {\n    return <GuessButton key={digit} digit={digit} />;\n  };\n\n  return (\n    <aside className={classnames('controls', styles.controls)}>\n      <div className={styles.guessButtons}>\n        <div className={styles.columns}>\n          {digits.map(d => renderButton(d))}\n        </div>\n\n        <button\n          className={classnames('button', 'is-warning', 'is-large')}\n          onClick={handleDeleteClick}>\n          X\n        </button>\n\n        <button\n          className={classnames('button is-large')}\n          onClick={handleAutoPencil}>\n          Auto Pencil\n        </button>\n      </div>\n\n      <div className='pencilmarks'></div>\n    </aside>\n  );\n};\n\nexport default Controls;\n","import { Action, combineReducers, configureStore, ThunkAction } from '@reduxjs/toolkit';\nimport gameReducer from './gameSlice';\n\nexport const rootReducer = combineReducers({\n  game: gameReducer,\n});\n\nconst store = configureStore({\n  devTools: process.env.NODE_ENV !== 'production',\n  reducer: rootReducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\nexport type AppThunk = ThunkAction<void, RootState, null, Action<string>>;\nexport type AppDispatch = typeof store.dispatch;\n\nexport default store;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../store/store';\nimport styles from './CombinationLine.module.scss';\n\nconst CombinationLine: React.FC = () => {\n  const { combinations, hints } = useSelector((state: RootState) => state.game);\n\n  const renderPossibility = (a: number[]) => {\n    return (\n      <span className={styles.possibility} key={a.join('')}>\n        {a.join('')}\n      </span>\n    );\n  };\n\n  const renderPossibilities = (a: number[][]) => {\n    return <span>{a.map(b => renderPossibility(b))}</span>;\n  };\n\n  if (hints[0].index === -1) {\n    return null;\n  }\n\n  const possibilitiesH = combinations![hints[0].count!][hints[0].sum!];\n  const possibilitiesV = combinations![hints[1].count!][hints[1].sum!];\n\n  return (\n    <div className={styles.combinations}>\n      <div className=''>\n        <span>{hints[0].sum}:</span>\n        {renderPossibilities(possibilitiesH)}\n      </div>\n      <div className=''>\n        <span>{hints[1].sum}:</span>\n        {renderPossibilities(possibilitiesV)}\n      </div>\n    </div>\n  );\n};\n\nexport default CombinationLine;\n","import { Provider } from 'react-redux';\nimport React from 'react';\nimport GameGrid from './components/GameGrid';\nimport Controls from './components/Controls';\nimport './App.scss';\nimport store from './store/store';\nimport CombinationLine from 'components/CombinationLine';\n\nconst App: React.FC = () => {\n  return (\n    <Provider store={store}>\n      <header className='header'>Mister K.ʼs Kakuro</header>\n\n      <div className='content'>\n        <GameGrid />\n        <Controls />\n      </div>\n\n      <CombinationLine />\n    </Provider>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"gameBackground\":\"GameGrid_gameBackground__3HuJu\",\"grid\":\"GameGrid_grid__129PN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"hint\":\"HintCell_hint__11Qo5\",\"verticalHint\":\"HintCell_verticalHint__1uE5f\",\"horizontalHint\":\"HintCell_horizontalHint__1K2-x\"};"],"sourceRoot":""}