{"version":3,"sources":["features/creating/DesignCell.module.scss","features/creating/HintDialog.module.scss","features/menu/MainMenu.module.scss","features/playing/GuessButton.module.scss","features/playing/BlankCell.module.scss","myHistory.ts","components/MyMenu.tsx","helpers/getHints.ts","helpers/getCombinations.ts","helpers/makePencilmarks.ts","store/gameSlice.ts","helpers/makeCombinations.ts","store/designSlice.ts","features/creating/HintDialog.tsx","features/creating/DesignCell.tsx","features/creating/DrawGrid.tsx","features/creating/SetCells.tsx","components/MyInput.tsx","components/MySelectButton.tsx","components/MySlider.tsx","features/creating/SetSize.tsx","features/creating/CreateGame.tsx","features/menu/MainMenu.tsx","features/playing/CombinationLine.tsx","features/playing/GuessButton.tsx","features/playing/Controls.tsx","features/playing/BlankCell.tsx","features/playing/HintCell.tsx","features/playing/NumberCell.tsx","features/playing/GameGrid.tsx","features/playing/PlayGame.tsx","store/store.ts","App.tsx","reportWebVitals.ts","index.tsx","features/playing/CombinationLine.module.scss","features/playing/Controls.module.scss","features/playing/GameGrid.module.scss","features/playing/NumberCell.module.scss","features/creating/CreateGame.module.scss","features/creating/DrawGrid.module.scss"],"names":["module","exports","createHashHistory","MyMenu","menuItems","label","icon","command","myHistory","push","model","start","getHints","game","index","hints","sum","count","used","Array","hIndex","cells","type","CellType","NumberCell","cell","guess","hintHorizontal","columnCount","vIndex","hintVertical","nextRow","length","getCombinations","combinations","combs","filter","c","every","h","includes","makePencilmarksForCell","nCell","hComb","vComb","hDigits","from","Set","flat","vDigits","poss","e","sort","pencilMarks","makePencilmarks","Difficulty","forEach","makeCombinations","digits","fill","_makeCombinations","min","current","set","digitsToCombination","Direction","initialState","gameSlice","createSlice","name","reducers","setCurrentGame","state","action","JSON","parse","stringify","payload","fetchGameSuccess","fetchCombinations","setSelectedIndex","currentIndex","selectedIndex","setGuess","newGame","currentCell","togglePencilMark","indexOf","splice","autoPencil","actions","designSteps","createGrid","columns","rows","item","BlankCell","activeStep","puzzle","level","rowCount","designSlice","setActiveStep","setBaseGame","clearDesignGame","setDesignGame","updateCell","newCell","HintDialog","across","down","visible","onHide","useState","options","setOptions","dispatch","useDispatch","renderButtons","className","styles","buttonGrid","map","n","onClick","acrossHint","HintCell","handleClick","disabled","useEffect","numbers","i","header","style","width","modal","DesignCell","useSelector","design","dialogVisible","setDialogVisible","setAcross","setDown","classnames","designCell","DrawGrid","gameBackground","grid","gridTemplateColumns","SetCells","MyInput","props","hint","htmlFor","dangerouslySetInnerHTML","__html","component","MySlider","values","field","setFieldValue","id","value","onChange","event","handleChange","max","difficulties","PuzzleSchema","Yup","shape","required","SetSize","initialValues","enableReinitialize","onSubmit","validationSchema","as","InputText","MySelectButton","CreateGame","flipView","nextStep","localStorage","setItem","puzzleJSON","getItem","console","log","loadedPuzzle","leftButtons","removeItem","createGame","createSteps","activeIndex","left","MainMenu","content","classNames","to","CombinationLine","possibilities","setPossibilities","renderPossibility","a","direction","possibility","d","highlight","renderDigit","renderPossibilities","b","renderLine","text","GuessButton","digit","pencilMark","guessButton","Controls","renderButton","controls","guessButtons","blank","number","selected","join","GameGrid","axios","get","headers","response","data","gamegrid","onKeyDown","key","tabIndex","gridTemplateRows","renderCell","renderGrid","PlayGame","rootReducer","combineReducers","gameReducer","designReducer","store","configureStore","devTools","process","reducer","App","history","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qFACAA,EAAOC,QAAU,CAAC,WAAa,iC,oBCA/BD,EAAOC,QAAU,CAAC,WAAa,iC,oBCA/BD,EAAOC,QAAU,CAAC,QAAU,4B,oBCA5BD,EAAOC,QAAU,CAAC,YAAc,mC,oBCAhCD,EAAOC,QAAU,CAAC,MAAQ,2B,0ICCXC,gB,eCwBAC,EAtBU,WACvB,IAAMC,EAAY,CAChB,CACEC,MAAO,OACPC,KAAM,0BACNC,QAAS,kBAAMC,EAAUC,KAAK,OAEhC,CACEJ,MAAO,gBACPC,KAAM,iBACNC,QAAS,kBAAMC,EAAUC,KAAK,aAEhC,CACEJ,MAAO,cACPC,KAAM,eACNC,QAAS,kBAAMC,EAAUC,KAAK,YAIlC,OAAO,cAAC,IAAD,CAASC,MAAON,EAAWO,MAAO,mD,2FCrB5B,SAASC,EAASC,EAAiBC,GAQhD,IAPA,IAAMC,EAAQ,CACZ,CAAED,OAAQ,EAAGE,KAAM,EAAGC,OAAQ,EAAGC,KAAM,IAAIC,OAC3C,CAAEL,OAAQ,EAAGE,KAAM,EAAGC,OAAQ,EAAGC,KAAM,IAAIC,QAEzCC,EAASN,EAGND,EAAKQ,MAAMD,GAAQE,OAASC,EAASC,YAAY,CACtD,IAAMC,EAAOZ,EAAKQ,MAAMD,GACpBK,EAAKC,MAAQ,GACfX,EAAM,GAAGG,KAAKT,KAAKgB,EAAKC,OAE1BN,IAQF,IALAL,EAAM,GAAGD,MAAQM,EACjBL,EAAM,GAAGC,IAAOH,EAAKQ,MAAMD,GAAsBO,iBAAoB,EAGrEP,EAASN,GAENM,EAAS,GAAKP,EAAKe,cAAgB,GACpCf,EAAKQ,MAAMD,EAAS,GAAGE,OAASC,EAASC,YACzC,CACAJ,IACA,IAAMK,EAAOZ,EAAKQ,MAAMD,GACpBK,EAAKC,MAAQ,GACfX,EAAM,GAAGG,KAAKT,KAAKgB,EAAKC,OAI5BX,EAAM,GAAGE,MAAQG,EAASL,EAAM,GAAGD,MAInC,IADA,IAAIe,EAASf,EACND,EAAKQ,MAAMQ,GAAQP,OAASC,EAASC,YAAY,CACtD,IAAMC,EAAOZ,EAAKQ,MAAMQ,GACpBJ,EAAKC,MAAQ,GACfX,EAAM,GAAGG,KAAKT,KAAKgB,EAAKC,OAE1BG,GAAUhB,EAAKe,YAGjBb,EAAM,GAAGD,MAAQe,EACjBd,EAAM,GAAGC,IAAOH,EAAKQ,MAAMQ,GAAsBC,eAAkB,EAKnE,IADA,IAAIC,GADJF,EAASf,GACcD,EAAKe,YAE1BG,EAAUlB,EAAKQ,MAAMW,QACrBnB,EAAKQ,MAAMU,GAAST,OAASC,EAASC,YACtC,CACAK,EAASE,EACT,IAAMN,EAAOZ,EAAKQ,MAAMQ,GACpBJ,EAAKC,MAAQ,GACfX,EAAM,GAAGG,KAAKT,KAAKgB,EAAKC,OAE1BK,EAAUF,EAAShB,EAAKe,YAG1B,IAAMX,GAASY,EAASd,EAAM,GAAGD,OAASD,EAAKe,YAG/C,OAFAb,EAAM,GAAGE,MAAQA,EAEVF,E,YC3DM,SAASkB,EACtBlB,EACAmB,GAEA,IAAIC,EAAQD,EAAanB,EAAME,OAAOF,EAAMC,KAK5C,OAFAmB,EAAQA,EAAMC,QAAO,SAAAC,GAAC,OAAItB,EAAMG,KAAKoB,OAAM,SAAAC,GAAC,OAAIF,EAAEG,SAASD,SCVtD,SAASE,EAAuBC,EAAoB5B,EAAeD,EAAiBqB,GACzF,KAAIQ,EAAMhB,MAAQ,GAAlB,CAKA,IAAMX,EAAQH,EAASC,EAAMC,GACvB6B,EAAQV,EAAgBlB,EAAM,GAAImB,GAClCU,EAAQX,EAAgBlB,EAAM,GAAImB,GAElCW,EAAU1B,MAAM2B,KAAK,IAAIC,IAAIJ,EAAMK,SACnCC,EAAU9B,MAAM2B,KAAK,IAAIC,IAAIH,EAAMI,SAEnC9B,EAAI,sBAAOH,EAAM,GAAGG,MAAhB,YAAyBH,EAAM,GAAGG,OACtCgC,EAAOL,EACVT,QAAO,SAAAe,GAAC,OAAIF,EAAQT,SAASW,KAAOjC,EAAKsB,SAASW,MAClDC,OAEHV,EAAMW,YAAcH,GAWPI,ICxBHC,EAQAhC,EDgBG+B,EARR,SAAyBzC,EAAiBqB,GAC/CrB,EAAKQ,MAAMmC,SAAQ,SAAC/B,EAAMX,GACpBW,EAAKH,OAASC,EAASC,YACzBiB,EAAuBhB,EAAqBX,EAAOD,EAAMqB,OE6BhDuB,EAlDU,WAwCvB,IAvCA,IAAMvB,EAA8B,GAC9BwB,EAAS,IAAIvC,MAAM,IAAIwC,MAAK,GA0B5BC,EAAoB,SAApBA,EAAqBC,EAAaC,GACtB,KAAZA,EAzBsB,WAK1B,IAJA,IAAMC,EAAM,IAAI5C,MACZF,EAAQ,EACRD,EAAM,EAEDF,EAAQ,EAAGA,EAAQ4C,EAAO1B,OAAQlB,IACrC4C,EAAO5C,KACTiD,EAAItD,KAAKK,GACTG,GAAS,EACTD,GAAOF,GAINoB,EAAajB,KAChBiB,EAAajB,GAAS,IAGnBiB,EAAajB,GAAOD,KACvBkB,EAAajB,GAAOD,GAAO,IAAIG,OAGjCe,EAAajB,GAAOD,GAAKP,KAAKsD,GAK5BC,IAEAN,EAAOI,IAAW,EAClBF,EAAkBC,EAAKC,EAAU,GACjCJ,EAAOI,IAAW,EAClBF,EAAkBC,EAAKC,EAAU,GACjCA,MAIKD,EAAM,EAAGA,EAAM,EAAGA,IACzBH,EAAOG,IAAO,EACdD,EAAkBC,EAAKA,EAAM,GAC7BH,EAAOG,IAAO,EAIhB,cADO3B,EAAa,GACbA,I,SD7CGqB,O,eAAAA,I,mBAAAA,I,2BAAAA,I,eAAAA,I,wBAAAA,M,cAQAhC,K,sBAAAA,E,oBAAAA,E,yBAAAA,M,KA0DZ,IEzEY0C,EFyENC,EAA+B,CACnCnD,MAAO,CACL,CAAED,OAAQ,EAAGE,KAAM,EAAGC,OAAQ,EAAGC,KAAM,IAAIC,OAC3C,CAAEL,OAAQ,EAAGE,KAAM,EAAGC,OAAQ,EAAGC,KAAM,IAAIC,SAIlCgD,EAAYC,YAAY,CACnCC,KAAM,OACNH,eACAI,SAAU,CACRC,eADQ,SACOC,EAAOC,GACpB,IAAM5D,EAAkB6D,KAAKC,MAAMD,KAAKE,UAAUH,EAAOI,UAEzDhE,EAAKQ,MACFe,QAAO,SAAAC,GAAC,OAAIA,EAAEf,OAASC,EAASC,cAChCgC,SAAQ,SAAA/B,GACP,IAAMiB,EAAQjB,EACTiB,EAAMW,cACTX,EAAMW,YAAc,OAG1BmB,EAAM3D,KAAOA,GAEfiE,iBAdQ,SAcSN,EAAOC,GACtBD,EAAM3D,KAAN,eAAkB4D,EAAOI,SAEzBL,EAAM3D,KAAKQ,MACRe,QAAO,SAAAC,GAAC,OAAIA,EAAEf,OAASC,EAASC,cAChCgC,SAAQ,SAAA/B,GACP,IAAMiB,EAAQjB,EACTiB,EAAMW,cACTX,EAAMW,YAAc,QAI5B0B,kBA1BQ,SA0BUP,EAAOC,GACvBD,EAAMtC,aAAeuB,KAEvBuB,iBA7BQ,SA6BSR,EAAOC,GACtB,IAAIQ,EAAeR,EAAOI,QAC1BL,EAAMU,cAAgBD,EACtBT,EAAMzD,MAAQH,EAAS4D,EAAM3D,KAAOoE,IAEtCE,SAlCQ,SAkCCX,EAAOC,GACd,MAAyBA,EAAOI,QAAxB/D,EAAR,EAAQA,MAAOY,EAAf,EAAeA,MACT0D,EAAqBV,KAAKC,MAAMD,KAAKE,UAAUJ,EAAM3D,OACrDwE,EAA2BD,EAAQ/D,MAAMP,GAC3CuE,EAAY/D,OAASC,EAASC,aAChC6D,EAAY3D,MAAQA,EACN,IAAVA,GACFe,EACE4C,EACAvE,EACAsE,EACAZ,EAAMtC,cAGVsC,EAAM3D,KAAOuE,GAEfZ,EAAMzD,MAAQH,EAAS4D,EAAM3D,KAAOC,IAEtCwE,iBApDQ,SAoDSd,EAAOC,GACtB,MAAyBA,EAAOI,QAAxB/D,EAAR,EAAQA,MAAOY,EAAf,EAAeA,MACT0D,EAAqBV,KAAKC,MAAMD,KAAKE,UAAUJ,EAAM3D,OACrDwE,EAA2BD,EAAQ/D,MAAMP,GAE/C,GAAIuE,EAAY/D,OAASC,EAASC,WAAY,CAC5C,IAAMV,EAAQuE,EAAYhC,YAAYkC,QAAQ7D,GAE1CZ,EAAQ,GACVuE,EAAYhC,YAAY5C,KAAKiB,GAC7B2D,EAAYhC,YAAYD,QAExBiC,EAAYhC,YAAYmC,OAAO1E,EAAO,GAExC0D,EAAM3D,KAAOuE,IAGjBK,WArEQ,SAqEGjB,EAAOC,GAEhBD,EAAM3D,KAAMQ,MAAMmC,SAAQ,SAAAnB,GACxB,GAAIA,EAAEf,OAASC,EAASC,WAAY,CAAC,IAAD,EAC5BC,EAAOY,EACoB,KAA7B,UAAAZ,EAAK4B,mBAAL,eAAkBrB,UACpBP,EAAKC,MAAQD,EAAK4B,YAAY,QAMpCC,EAAgBkB,EAAM3D,KAAO2D,EAAMtC,kBAKlC,EAQHiC,EAAUuB,QAPZZ,EADK,EACLA,iBACAC,EAFK,EAELA,kBACAC,EAHK,EAGLA,iBACAT,EAJK,EAILA,eACAY,EALK,EAKLA,SACAM,EANK,EAMLA,WACAH,EAPK,EAOLA,iBAGanB,IAAf,S,SEnLYF,O,2BAAAA,I,uBAAAA,I,gBAAAA,M,KAaL,IAAM0B,EAAc,CACzB,CAAEtF,MAAO,YACT,CAAEA,MAAO,aACT,CAAEA,MAAO,gBACT,CAAEA,MAAO,iBAQLuF,EAAa,SAACC,EAAiBC,GAAlB,OACjB3E,MAAM2B,KAAK,CAAEd,OAAQ6D,EAAUC,IAAQ,SAACC,EAAMjF,GAAP,MAAkB,CACvDA,QACAQ,KAAMC,EAASyE,eAGb9B,EAAiC,CACrC+B,WAAY,EACZC,OAAQ,CACN7B,KAAM,UACN8B,MAAO,EACPvE,YAAa,GACbwE,SAAU,GACV/E,MAAOuE,EAAW,GAAI,MAIbS,EAAcjC,YAAY,CACrCC,KAAM,SACNH,eACAI,SAAU,CACRgC,cAAe,SAAC9B,EAAOC,GACrBD,EAAMyB,WAAaxB,EAAOI,SAE5B0B,YAAa,SAAC/B,EAAOC,GACnBD,EAAM0B,OAAN,2BAAoB1B,EAAM0B,QAAWzB,EAAOI,SAC5CL,EAAM0B,OAAO7E,MAAQuE,EACnBpB,EAAM0B,OAAOtE,YACb4C,EAAM0B,OAAOE,WAGjBI,gBAAiB,SAAAhC,GACPN,GAEVuC,cAAe,SAACjC,EAAOC,GACrBD,EAAM0B,OAASzB,EAAOI,SAExB6B,WAAY,SAAClC,EAAOC,GAClB,IAAMkC,EAAUlC,EAAOI,QACvBL,EAAM0B,OAAO7E,MAAMsF,EAAQ7F,OAAS6F,MAKnC,EAMHN,EAAYX,QALdc,EADK,EACLA,gBACAF,EAFK,EAELA,cACAC,EAHK,EAGLA,YACAE,EAJK,EAILA,cACAC,EALK,EAKLA,WAGaL,IAAf,Q,oGCHeO,GA7DqB,SAAC,GAM9B,IALLnF,EAKI,EALJA,KACAoF,EAII,EAJJA,OACAC,EAGI,EAHJA,KACAC,EAEI,EAFJA,QACAC,EACI,EADJA,OAEA,EAA8BC,mBAAmB,IAAjD,oBAAOC,EAAP,KAAgBC,EAAhB,KACMC,EAAWC,cAgBXC,EAAgB,SAACT,GACrB,OACE,sBAAKU,UAAU,GAAf,UACE,qBAAKA,UAAU,QAAf,SAAwBV,EAAS,cAAgB,cACjD,qBAAKU,UAAWC,KAAOC,WAAvB,SACGP,EAAQQ,KAAI,SAAAC,GAAC,OACZ,cAAC,IAAD,CAEEtH,MAAO,GAAKsH,EACZC,QAAS,kBAvBD,SAACD,EAAWE,GAC9B,IAAMlB,EAAO,2BAAQlF,GAAR,IAAcH,KAAMC,EAASuG,WACtCD,EACFlB,EAAQhF,eAAiBgG,EAEzBhB,EAAQ7E,aAAe6F,EAGzBP,EAASV,EAAWC,IACfkB,GAAef,GAClBE,IAauBe,CAAYJ,EAAGd,IAC9BmB,SAAUL,EAAI,GAHTA,YAiBjB,OANAM,qBAAU,WAER,IAAMC,EAAU/G,MAAM2B,KAAK,CAAEd,OAAQ,KAAM,SAACmB,EAAGgF,GAAJ,OAAUA,EAAI,KACzDhB,EAAWe,KACV,IAGD,eAAC,KAAD,CACEE,OAAO,8BACPC,MAAO,CAAEC,MAAO,QAChBvB,QAASA,EACTwB,OAAO,EACPvB,OAAQA,EALV,UAMGH,GAAUS,GAAc,GACxBR,GAAQQ,GAAc,OCKdkB,I,YA7DqB,SAAC,GAAqB,IAAnB/G,EAAkB,EAAlBA,KACrC,GADuD,EAAZX,MACZ2H,aAC7B,SAACjE,GAAD,OAAsBA,EAAMkE,WADtBzC,EAAR,EAAQA,WAAYC,EAApB,EAAoBA,OAGdkB,EAAWC,cACjB,EAA0CJ,oBAAS,GAAnD,oBAAO0B,EAAP,KAAsBC,EAAtB,KACA,EAA4B3B,oBAAkB,GAA9C,oBAAOJ,EAAP,KAAegC,EAAf,KACA,EAAwB5B,oBAAkB,GAA1C,oBAAOH,EAAP,KAAagC,EAAb,KAmCA,OACE,qCACE,sBACEvB,UAAWwB,KAAWvB,KAAOwB,WAAYvH,EAAKH,MAC9CsG,QAjCc,SAACzE,GACnB,GAAmB,IAAf8C,EAAkB,CAEpB,IAAMU,EAAO,2BACRlF,GADQ,IAEXH,KACEG,EAAKH,OAASC,EAASyE,UACnBzE,EAASC,WACTD,EAASyE,YAEjBoB,EAASV,EAAWC,SACI,IAAfV,GAAoBxE,EAAKH,OAASC,EAASC,aAGpDqH,EACEpH,EAAKX,MAAQ,EAAIoF,EAAO7E,MAAMW,QAC5BkE,EAAO7E,MAAMI,EAAKX,MAAQ,GAAGQ,OAASC,EAASC,YAGnDsH,EACErH,EAAKX,MAAQoF,EAAOtE,YAAcsE,EAAO7E,MAAMW,QAC7CkE,EAAO7E,MAAMI,EAAKX,MAAQoF,EAAOtE,aAAaN,OAC5CC,EAASC,aAGdqF,GAAUC,IAAS8B,GAAiB,KAMrC,UAGE,qBAAKrB,UAAU,iBAAf,SAAiC9F,EAAKE,iBACtC,qBAAK4F,UAAU,eAAf,SAA+B9F,EAAKK,kBAEtC,cAAC,GAAD,CACEL,KAAMA,EACNsF,QAAS4B,EACT3B,OA5CO,WACX4B,GAAiB,IA4Cb/B,OAAQA,EACRC,KAAMA,S,oBC1CCmC,GAtBY,WACzB,MAEIR,aAAY,SAACjE,GAAD,OAAsBA,EAAMkE,UAD1CxC,OAAUtE,EADZ,EACYA,YAAaP,EADzB,EACyBA,MAGzB,OACE,8BACE,qBAAKkG,UAAWC,KAAO0B,eAAvB,SACE,qBACE3B,UAAWC,KAAO2B,KAClBd,MAAO,CACLe,oBAAoB,UAAD,OAAYxH,EAAZ,WAHvB,SAKGP,EAAMqG,KAAI,SAACrF,EAAG8F,GAAJ,OACT,cAAC,GAAD,CAAoBrH,MAAOqH,EAAG1G,KAAMY,GAAnB8F,aCLdkB,GAZY,WACzB,IACYhF,EACRoE,aAAY,SAACjE,GAAD,OAAsBA,EAAMkE,UAD1CxC,OAAU7B,KAGZ,OACE,mCACE,6BAAKA,O,SCgBIiF,GAhBkB,SAACC,GAChC,IAAQlJ,EAAsBkJ,EAAtBlJ,MAAOgE,EAAekF,EAAflF,KAAMmF,EAASD,EAATC,KAErB,OACE,sBAAKjC,UAAU,UAAf,UACE,uBAAOkC,QAASpF,EAAhB,SAAuBhE,IAEvB,gCACE,cAAC,KAAD,eAAWkJ,IACVC,GAAQ,qBAAKE,wBAAyB,CAAEC,OAAQH,KACjD,cAAC,KAAD,CAAcnF,KAAMA,EAAMuF,UAAU,MAAMrC,UAAU,6B,UCe7CsC,GAzBmB,SAAC,GAM5B,IALLC,EAKI,EALJA,OACAC,EAII,EAJJA,MACA1J,EAGI,EAHJA,MACA6G,EAEI,EAFJA,QACA8C,EACI,EADJA,cAMA,OACE,sBAAKzC,UAAU,UAAf,UACE,uBAAOkC,QAASM,EAAhB,SAAwB1J,IAExB,cAAC,KAAD,CACE4J,GAAIF,EACJG,MAAOJ,EAAOC,GACd7C,QAASA,EACTiD,SAAU,SAAAC,GAAK,OAZA,SAACA,GACpBJ,EAAcD,EAAOK,EAAMF,OAWJG,CAAaD,U,UCWzBP,GA7BmB,SAAC,GAO5B,IANLC,EAMI,EANJA,OACAC,EAKI,EALJA,MACA1J,EAII,EAJJA,MACA2J,EAGI,EAHJA,cACAnG,EAEI,EAFJA,IACAyG,EACI,EADJA,IAMA,OACE,sBAAK/C,UAAU,UAAf,UACE,wBAAOkC,QAASM,EAAhB,UACG1J,EADH,KACYyJ,EAAOC,MAGnB,cAAC,KAAD,CACEE,GAAIF,EACJG,MAAOJ,EAAOC,GACdI,SAAU,SAAAC,GAAK,OAbA,SAACA,GACpBJ,EAAcD,EAAOK,EAAMF,OAYJG,CAAaD,IAChCvG,IAAKA,EACLyG,IAAKA,Q,mBCtBPC,GAAe,CACnB,CACElK,MAAO,OACP6J,MAAO,GAET,CACE7J,MAAO,SACP6J,MAAO,GAET,CACE7J,MAAO,cACP6J,MAAO,GAET,CACE7J,MAAO,OACP6J,MAAO,GAET,CACE7J,MAAO,YACP6J,MAAO,IAILM,GAAeC,OAAaC,MAAM,CACtCrG,KAAMoG,OACHH,IAAI,GAAI,iCACRK,SAAS,YACZxE,MAAOsE,OAAa5G,IAAI,GAAGyG,IAAI,GAAGK,WAClC/I,YAAa6I,OACV5G,IAAI,EAAG,4BACPyG,IAAI,IACJK,SAAS,YACZvE,SAAUqE,OACP5G,IAAI,EAAG,4BACPyG,IAAI,IACJK,SAAS,cAuDCC,GApDW,WACxB,IAAMxD,EAAWC,cAEXwD,EADapC,aAAY,SAACjE,GAAD,OAAsBA,EAAMkE,UAAnDxC,OAOR,OACE,cAAC,KAAD,CACE4E,oBAAkB,EAClBD,cAAeA,EACfE,SARiB,SAACjB,GACpB1C,EAASb,EAAYuD,KAQnBkB,iBAAkBR,GAJpB,SAKG,gBAAGR,EAAH,EAAGA,cAAeF,EAAlB,EAAkBA,OAAlB,OACC,eAAC,KAAD,CAAMvC,UAAU,UAAhB,UACE,cAAC,GAAD,CAASlD,KAAK,OAAOhE,MAAM,cAAc4K,GAAIC,OAE7C,cAACC,GAAD,CACEpB,MAAM,QACN1J,MAAM,aACN2J,cAAeA,EACf9C,QAASqD,GACTT,OAAQA,IAGV,cAAC,GAAD,CACEC,MAAM,cACN1J,MAAM,SACN2J,cAAeA,EACfnG,IAAK,EACLyG,IAAK,GACLR,OAAQA,IAGV,cAAC,GAAD,CACEC,MAAM,WACN1J,MAAM,UACN2J,cAAeA,EACfnG,IAAK,EACLyG,IAAK,GACLR,OAAQA,IAGV,cAAC,IAAD,CAAQxI,KAAK,SAASjB,MAAM,WAAWkH,UAAU,kB,UCR5C6D,GApEc,WAC3B,IAAMhE,EAAWC,cACjB,EAA+BoB,aAC7B,SAACjE,GAAD,OAAsBA,EAAMkE,UADtBzC,EAAR,EAAQA,WAAYC,EAApB,EAAoBA,OAIdmF,EAAW,SAACC,GAChBlE,EAASd,EAAcgF,IACvBC,aAAaC,QAAQ,SAAU9G,KAAKE,UAAUsB,KAGhD+B,qBAAU,WACR,IAAMwD,EAAaF,aAAaG,QAAQ,UACxC,GAAID,EAAY,CACdE,QAAQC,IAAI,iCACZ,IAAMC,EAAenH,KAAKC,MAAM8G,GAChCrE,EAASX,EAAcoF,OAGxB,IAEH,IAOMC,EACJ,qCACE,cAAC,IAAD,CACEzL,MAAM,YACNC,KAAK,qBACLsH,QAAS,SAAAzE,GAAC,OAAIkI,EAASpF,EAAa,IACpC+B,SAAyB,IAAf/B,IAEZ,cAAC,IAAD,CACE5F,MAAM,SACNC,KAAK,sBACLsH,QAAS,SAAAzE,GAAC,OAAIkI,EAASpF,EAAa,IACpC+B,SAAU/B,IAAeN,EAAY3D,OAAS,IAEhD,cAAC,IAAD,CACE3B,MAAM,gBACNC,KAAK,oBACLsH,QAxBe,WACnBR,EAAS7C,EAAe2B,IACxBkB,EAASZ,KACT+E,aAAaQ,WAAW,UACxBvL,EAAUC,KAAK,UAqBXuH,SAAU/B,IAAeN,EAAY3D,OAAS,OAKpD,OACE,sBAAKuF,UAAWC,KAAOwE,WAAvB,UACE,eAAC,IAAD,CAAO5D,OAAM,+BAA0BzC,EAAYM,GAAY5F,OAA/D,UACE,qBAAKkH,UAAWC,KAAOyE,YAAvB,SACE,cAAC,IAAD,CAAOvL,MAAOiF,EAAauG,YAAajG,MAG1B,IAAfA,GAAoB,cAAC,GAAD,IACL,IAAfA,GAAoB,cAAC,GAAD,IACrB,cAAC,GAAD,OAGF,cAAC,KAAD,CAASkG,KAAML,Q,8BC1CNM,GAlCY,WACzB,OACE,qBAAK7E,UAAWC,KAAO6E,QAAvB,SACE,sBAAK9E,UAAW+E,KAAW,eAA3B,UACE,sBAAK/E,UAAU,0BAAf,UACE,sBAAMA,UAAU,WAAhB,uBACA,sBAAMA,UAAU,gBAAhB,0BACA,sBAAMA,UAAU,WAAhB,8BAEF,qBAAKA,UAAU,wBAAf,4EAGA,sBAAKA,UAAU,OAAf,UACE,sBAAKA,UAAU,4BAAf,UACE,cAAC,KAAD,CAAMgF,GAAG,UAAT,SACE,cAAC,IAAD,CAAQjM,KAAK,iBAAiBiH,UAAU,kBAE1C,qBAAKA,UAAU,4BAAf,gCAEF,sBAAKA,UAAU,4BAAf,UACE,cAAC,KAAD,CAAMgF,GAAG,QAAT,SACE,cAAC,IAAD,CACEjM,KAAK,6BACLiH,UAAU,kBAGd,qBAAKA,UAAU,4BAAf,oC,oBCyBGiF,GAnDmB,WAChC,MAAgC/D,aAAY,SAACjE,GAAD,OAAsBA,EAAM3D,QAAhEqB,EAAR,EAAQA,aAAcnB,EAAtB,EAAsBA,MACtB,EAA0CkG,mBAAuB,CAAC,GAAI,KAAtE,oBAAOwF,EAAP,KAAsBC,EAAtB,KAUMC,EAAoB,SAACC,EAAa9L,EAAe+L,GACrD,OACE,sBAAMtF,UAAWC,KAAOsF,YAAxB,SACGF,EAAElF,KAAI,SAAAqF,GAAC,OAXM,SAACA,EAAWF,GAC9B,OAAI9L,EAAM8L,GAAW3L,KAAKsB,SAASuK,GAC1B,sBAAMxF,UAAWC,KAAOwF,UAAxB,SAAoCD,IAEpC,+BAAOA,IAOAE,CAAYF,EAAGF,OADa/L,IAMxCoM,EAAsB,SAACN,EAAeC,GAC1C,OAAO,+BAAOD,EAAElF,KAAI,SAACyF,EAAGhF,GAAJ,OAAUwE,EAAkBQ,EAAGhF,EAAG0E,SAGlDO,EAAa,SAACP,GAAD,OACjB,qCACE,uBAAMtF,UAAWC,KAAOxG,IAAxB,UAA8BD,EAAM8L,GAAW7L,IAA/C,OACCkM,EAAoBT,EAAcI,GAAYA,OAcnD,OAVA5E,qBAAU,WACJlH,EAAM,GAAGD,OAAS,GACpB4L,EAAiB,CACfzK,EAAgBlB,EAAM,GAAImB,GAC1BD,EAAgBlB,EAAM,GAAImB,OAI7B,CAACnB,IAGF,qBAAKwG,UAAWC,KAAOtF,aAAvB,SACE,sBAAKqF,UAAWC,KAAO6F,KAAvB,UACE,8BAAMtM,GAASqM,EAAW,KAC1B,8BAAMrM,GAASqM,EAAW,W,yCCfnBE,GAvBsB,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,WACrCtI,EAAkBuD,aAAY,SAACjE,GAAD,OAAsBA,EAAM3D,QAA1DqE,cACFkC,EAAWC,cAYjB,OACE,cAAC,IAAD,CACEE,UAAW+E,KAAW9E,KAAOiG,YAAa,CAAED,eAC5C5F,QAbqB,SAACwC,GACpBmD,GAAS,GAAKA,GAAS,GAAKrI,GAE5BkC,EADEoG,EACOlI,EAAiB,CAAExE,MAAOoE,EAAexD,MAAO6L,IAEhDpI,EAAS,CAAErE,MAAOoE,EAAexD,MAAO6L,MAMrD,SAGGA,KC4BQG,GAhDY,WACzB,IAAQxI,EAAkBuD,aAAY,SAACjE,GAAD,OAAsBA,EAAM3D,QAA1DqE,cACFkC,EAAWC,cACX3D,EAAS,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAYlCiK,EAAe,SAACJ,EAAeC,GACnC,OAAO,cAAC,GAAD,CAAyBD,MAAOA,EAAOC,WAAYA,GAAjCD,IAG3B,OACE,wBAAOhG,UAAWwB,KAAW,WAAYvB,KAAOoG,UAAhD,UACE,sBAAKrG,UAAWC,KAAOqG,aAAvB,UACE,qBAAKtG,UAAWC,KAAO3B,QAAvB,SACGnC,EAAOgE,KAAI,SAAAqF,GAAC,OAAIY,EAAaZ,GAAG,QAGnC,qBAAKxF,UAAWC,KAAO3B,QAAvB,SACGnC,EAAOgE,KAAI,SAAAqF,GAAC,OAAIY,EAAaZ,GAAG,QAGnC,cAAC,IAAD,CACExF,UAAWwB,KAAW,SAAU,aAAc,YAC9CnB,QA3BkB,SAACwC,GACrBlF,GACFkC,EAASjC,EAAS,CAAErE,MAAOoE,EAAexD,MAAO,MAuB/C,eAMA,cAAC,IAAD,CACE6F,UAAWwB,KAAW,mBACtBnB,QA3BiB,SAACwC,GACxBhD,EAAS3B,MAwBL,4BAOF,qBAAK8B,UAAU,oB,qBCxCNvB,GAJoB,SAAC,GAAoB,EAAlBvE,KAAkB,EAAZX,MAC1C,OAAO,qBAAKyG,UAAWwB,KAAW,WAAYvB,KAAOsG,U,oBCQxChG,GATmB,SAAC,GAAqB,IAAnBrG,EAAkB,EAAlBA,KAAkB,EAAZX,MACzC,OACE,sBAAKyG,UAAWwB,KAAW,WAAY,YAAvC,UACE,qBAAKxB,UAAU,iBAAf,SAAiC9F,EAAKE,iBACtC,qBAAK4F,UAAU,eAAf,SAA+B9F,EAAKK,mB,oBCyB3BN,GA1BqB,SAAC,GAAqB,IAAD,EAAlBC,EAAkB,EAAlBA,KAAMX,EAAY,EAAZA,MACrCoE,EAAgBuD,aACpB,SAACjE,GAAD,OAAsBA,EAAM3D,KAAKqE,iBAE7BkC,EAAWC,cAMjB,OACE,sBACEE,UAAWwB,KAAW,WAAYvB,KAAOuG,OAAQ,CAC/CC,SAAUlN,IAAUoE,IAEtB0C,QATgB,SAACwC,GACnBhD,EAASpC,EAAiBlE,KAI1B,UAKGW,EAAKC,MAAQ,GACZ,qBAAK6F,UAAWwB,KAAWvB,KAAO9F,OAAlC,SAA2CD,EAAKC,SAEhDD,EAAKC,QAAS,UAAAD,EAAK4B,mBAAL,eAAkBrB,QAAS,GACzC,qBAAKuF,UAAWwB,KAAWvB,KAAOnE,aAAlC,SAAiD5B,EAAK4B,YAAY4K,KAAK,UCwDhEC,GArEY,WACzB,MAA8CzF,aAC5C,SAACjE,GAAD,OAAsBA,EAAM3D,QADtBqB,EAAR,EAAQA,aAAcrB,EAAtB,EAAsBA,KAAMqE,EAA5B,EAA4BA,cAGtBkC,EAAWC,cAwDjB,OATAY,qBAAU,WACI,MAARpH,GACFuG,EnB8GmB,uCAAgB,WAAOA,GAAP,iBAAAwF,EAAA,+EAGduB,IAAMC,IAAI,sBAAuB,CACtDC,QAAS,CAAE,8BAA+B,OAJP,OAG/BC,EAH+B,OAMrCzN,EAAOyN,EAASC,KANqB,kFAavCnH,EAAStC,EAAiBjE,IAba,yDAAhB,uDmB5GD,MAAhBqB,GACFkF,EAASrC,OAEV,IAGD,qBAAKwC,UAAWwB,KAAW,OAAQvB,KAAO0B,gBAA1C,SACE,qBAAK3B,UAAWC,KAAOgH,SAAUC,UAxDd,SAACrE,GACjBlF,IAKDkF,EAAMsE,KAAO,KAAOtE,EAAMsE,KAAO,IACnCtH,EAASjC,EAAS,CAAErE,MAAOoE,EAAexD,OAAQ0I,EAAMsE,OACjC,WAAdtE,EAAMsE,IACftH,EAASjC,EAAS,CAAErE,MAAOoE,EAAexD,MAAO,KAEjDiK,QAAQC,IAAI,eAAgBxB,EAAMsE,OA6C0BC,UAAW,EAAvE,SA5Be,WACjB,GAAK9N,EAIL,OACE,qBACE0G,UAAWC,KAAO2B,KAClBd,MAAO,CACLe,oBAAoB,UAAD,OAAYvI,EAAMe,YAAlB,UACnBgN,iBAAiB,UAAD,OAAY/N,EAAMuF,SAAlB,WAJpB,SAMGvF,EAAKQ,MAAMqG,KAAI,SAACjG,EAAM0G,GAAP,OAzBH,SAAC1G,EAAaX,GAC/B,OAAIW,EAAKH,OAASC,EAASyE,UAClB,cAAC,GAAD,CAAWvE,KAAMA,EAAoBX,MAAOA,GAAYA,GACtDW,EAAKH,OAASC,EAASuG,SACzB,cAAC,GAAD,CAAUrG,KAAMA,EAAmBX,MAAOA,GAAYA,GAI3D,cAAC,GAAD,CAAYW,KAAMA,EAAqBX,MAAOA,GAAYA,GAiB7B+N,CAAWpN,EAAM0G,QAiB7C2G,QClEMC,GAbY,WACzB,OACE,qCACE,sBAAKxH,UAAU,UAAf,UACE,cAAC,GAAD,IACA,cAAC,GAAD,OAGF,cAAC,GAAD,Q,0BCJOyH,GAAcC,aAAgB,CACzCpO,KAAMqO,EACNxG,OAAQyG,IAYKC,GATDC,YAAe,CAC3BC,UAAUC,EACVC,QAASR,KCiBIS,GAtBO,WACpB,OACE,eAAC,IAAD,CAAUL,MAAOA,GAAjB,UACE,cAAC,EAAD,IAEA,cAAC,KAAD,CAAQM,QAASlP,EAAjB,SACE,eAAC,KAAD,WACE,cAAC,KAAD,CAAOmP,KAAK,UAAZ,SACE,cAAC,GAAD,MAEF,cAAC,KAAD,CAAOA,KAAK,QAAZ,SACE,cAAC,GAAD,MAEF,cAAC,KAAD,CAAOA,KAAK,IAAZ,SACE,cAAC,GAAD,eCXGC,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,SAM1Bb,M,mBCfA5P,EAAOC,QAAU,CAAC,aAAe,sCAAsC,KAAO,8BAA8B,IAAM,6BAA6B,YAAc,qCAAqC,UAAY,qC,mBCA9MD,EAAOC,QAAU,CAAC,SAAW,2BAA2B,QAAU,4B,mBCAlED,EAAOC,QAAU,CAAC,eAAiB,iCAAiC,KAAO,yB,mBCA3ED,EAAOC,QAAU,CAAC,OAAS,2BAA2B,MAAQ,4B,mBCA9DD,EAAOC,QAAU,CAAC,WAAa,+BAA+B,YAAc,gCAAgC,UAAU,4BAA4B,eAAe,iCAAiC,kBAAkB,oCAAoC,gBAAgB,oC,mBCAxQD,EAAOC,QAAU,CAAC,eAAiB,iCAAiC,KAAO,yB","file":"static/js/main.8c397fc5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"designCell\":\"DesignCell_designCell__1mdb1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonGrid\":\"HintDialog_buttonGrid__3MkIY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"MainMenu_content__1zXTd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"guessButton\":\"GuessButton_guessButton__2HTay\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"blank\":\"BlankCell_blank__h84dH\"};","import { createHashHistory } from 'history';\n\nexport default createHashHistory();\n","import myHistory from 'myHistory';\nimport { Menubar } from 'primereact/menubar';\nimport React from 'react';\n\nconst MyMenu: React.FC = () => {\n  const menuItems = [\n    {\n      label: 'Menu',\n      icon: 'mdi mdi-dots-horizontal',\n      command: () => myHistory.push('/'),\n    },\n    {\n      label: 'Design Puzzle',\n      icon: 'mdi mdi-pencil',\n      command: () => myHistory.push('/create'),\n    },\n    {\n      label: 'Play Puzzle',\n      icon: 'mdi mdi-play',\n      command: () => myHistory.push('/play'),\n    },\n  ];\n\n  return <Menubar model={menuItems} start={<h3>Mr K.'s Kakuro</h3>} />;\n};\n\nexport default MyMenu;\n","import { CellType, IGameData, IHintCell, INumberCell } from 'store/gameSlice';\n\nexport default function getHints(game: IGameData, index: number) {\n  const hints = [\n    { index: -1, sum: -1, count: -1, used: new Array<number>() },\n    { index: -1, sum: -1, count: -1, used: new Array<number>() },\n  ];\n  let hIndex = index;\n\n  // Find corresponding hint cell horizontally\n  while (game.cells[hIndex].type === CellType.NumberCell) {\n    const cell = game.cells[hIndex] as INumberCell;\n    if (cell.guess > 0) {\n      hints[0].used.push(cell.guess);\n    }\n    hIndex--;\n  }\n\n  hints[0].index = hIndex;\n  hints[0].sum = (game.cells[hIndex] as IHintCell).hintHorizontal! || -1;\n\n  // Find count of cells for this hint\n  hIndex = index;\n  while (\n    (hIndex + 1) % game.columnCount !== 0 &&\n    game.cells[hIndex + 1].type === CellType.NumberCell\n  ) {\n    hIndex++;\n    const cell = game.cells[hIndex] as INumberCell;\n    if (cell.guess > 0) {\n      hints[0].used.push(cell.guess);\n    }\n  }\n\n  hints[0].count = hIndex - hints[0].index;\n\n  // Find corresponding hint cell vertically\n  let vIndex = index;\n  while (game.cells[vIndex].type === CellType.NumberCell) {\n    const cell = game.cells[vIndex] as INumberCell;\n    if (cell.guess > 0) {\n      hints[1].used.push(cell.guess);\n    }\n    vIndex -= game.columnCount;\n  }\n\n  hints[1].index = vIndex;\n  hints[1].sum = (game.cells[vIndex] as IHintCell).hintVertical! || -1;\n\n  // Find count of cells for this hint\n  vIndex = index;\n  let nextRow = vIndex + game.columnCount;\n  while (\n    nextRow < game.cells.length &&\n    game.cells[nextRow].type === CellType.NumberCell\n  ) {\n    vIndex = nextRow;\n    const cell = game.cells[vIndex] as INumberCell;\n    if (cell.guess > 0) {\n      hints[1].used.push(cell.guess);\n    }\n    nextRow = vIndex + game.columnCount;\n  }\n\n  const count = (vIndex - hints[1].index) / game.columnCount;\n  hints[1].count = count;\n\n  return hints;\n}\n","import { IHintValues } from 'store/gameSlice';\nimport { ICombinations } from './makeCombinations';\n\n/**\n *\n * @param hints the computed hints for a particular cell\n * @param combinations all combinations\n */\nexport default function getCombinations(\n  hints: IHintValues,\n  combinations: ICombinations\n) {\n  let combs = combinations[hints.count][hints.sum];\n\n  // only select those combinations which contain every used digit\n  combs = combs.filter(c => hints.used.every(h => c.includes(h)));\n\n  return combs;\n}\n","import { CellType, IGameData, INumberCell } from 'store/gameSlice';\nimport getCombinations from './getCombinations';\nimport getHints from './getHints';\nimport { ICombinations } from './makeCombinations';\n\nexport function makePencilmarksForCell(nCell: INumberCell, index: number, game: IGameData, combinations: ICombinations) {\n  if (nCell.guess > 0) {\n    return;\n  }\n\n  // Filter out impossible combinations\n  const hints = getHints(game, index);\n  const hComb = getCombinations(hints[0], combinations);\n  const vComb = getCombinations(hints[1], combinations);\n  // Get possible digits\n  const hDigits = Array.from(new Set(hComb.flat()));\n  const vDigits = Array.from(new Set(vComb.flat()));\n\n  const used = [...hints[0].used, ...hints[1].used];\n  const poss = hDigits\n    .filter(e => vDigits.includes(e) && !used.includes(e))\n    .sort();\n\n  nCell.pencilMarks = poss;\n}\n\nexport function makePencilmarks(game: IGameData, combinations: ICombinations) {\n  game.cells.forEach((cell, index) => {\n    if (cell.type === CellType.NumberCell) {\n      makePencilmarksForCell(cell as INumberCell, index, game, combinations)\n    }\n  });\n}\n\nexport default makePencilmarks;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport axios from 'axios';\nimport getHints from 'helpers/getHints';\nimport makePencilmarks, {\n  makePencilmarksForCell,\n} from 'helpers/makePencilmarks';\nimport makeCombinations, { ICombinations } from '../helpers/makeCombinations';\nimport { AppThunk } from './store';\n\n/* Types */\nexport enum Difficulty {\n  Easy = 0,\n  Medium = 1,\n  MediumPlus = 2,\n  Hard = 3,\n  VeryHard = 4,\n}\n\nexport enum CellType {\n  BlankCell = 'blankCell',\n  HintCell = 'hintCell',\n  NumberCell = 'numberCell',\n}\n\nexport interface ICell {\n  type: CellType;\n}\n\nexport interface IBlankCell extends ICell {\n  type: CellType.BlankCell;\n}\n\nexport interface IHintCell extends ICell {\n  type: CellType.HintCell;\n  hintHorizontal?: number;\n  hintVertical?: number;\n}\n\nexport interface INumberCell extends ICell {\n  type: CellType.NumberCell;\n  pencilMarks: number[];\n  guess: number;\n  solution: number;\n}\n\nexport type IBaseGame = {\n  name: string;\n  columnCount: number;\n  rowCount: number;\n  level: Difficulty;\n};\n\nexport interface IGameData extends IBaseGame {\n  cells: ICell[];\n}\n\nexport interface IGuess {\n  index: number;\n  guess: number;\n}\n\nexport interface IHintValues {\n  index: number;\n  sum: number;\n  count: number;\n  used: number[];\n}\n\n/* State */\ntype GameSliceState = {\n  game?: IGameData;\n  combinations?: ICombinations;\n  selectedIndex?: number;\n  hints: IHintValues[];\n};\n\nconst initialState: GameSliceState = {\n  hints: [\n    { index: -1, sum: -1, count: -1, used: new Array<number>() },\n    { index: -1, sum: -1, count: -1, used: new Array<number>() },\n  ],\n};\n\nexport const gameSlice = createSlice({\n  name: 'game',\n  initialState,\n  reducers: {\n    setCurrentGame(state, action: PayloadAction<IGameData>) {\n      const game: IGameData = JSON.parse(JSON.stringify(action.payload));\n      // create pencilmarks for all number cells\n      game.cells\n        .filter(c => c.type === CellType.NumberCell)\n        .forEach(cell => {\n          const nCell = cell as INumberCell;\n          if (!nCell.pencilMarks) {\n            nCell.pencilMarks = [];\n          }\n        });\n      state.game = game;\n    },\n    fetchGameSuccess(state, action: PayloadAction<IGameData>) {\n      state.game = { ...action.payload };\n      // create pencilmarks for all number cells\n      state.game.cells\n        .filter(c => c.type === CellType.NumberCell)\n        .forEach(cell => {\n          const nCell = cell as INumberCell;\n          if (!nCell.pencilMarks) {\n            nCell.pencilMarks = [];\n          }\n        });\n    },\n    fetchCombinations(state, action: PayloadAction) {\n      state.combinations = makeCombinations();\n    },\n    setSelectedIndex(state, action: PayloadAction<number>) {\n      let currentIndex = action.payload;\n      state.selectedIndex = currentIndex;\n      state.hints = getHints(state.game!, currentIndex);\n    },\n    setGuess(state, action: PayloadAction<IGuess>) {\n      const { index, guess } = action.payload;\n      const newGame: IGameData = JSON.parse(JSON.stringify(state.game));\n      const currentCell: INumberCell = newGame.cells[index] as INumberCell;\n      if (currentCell.type === CellType.NumberCell) {\n        currentCell.guess = guess;\n        if (guess === 0) {\n          makePencilmarksForCell(\n            currentCell,\n            index,\n            newGame,\n            state.combinations!\n          );\n        }\n        state.game = newGame;\n      }\n      state.hints = getHints(state.game!, index);\n    },\n    togglePencilMark(state, action: PayloadAction<IGuess>) {\n      const { index, guess } = action.payload;\n      const newGame: IGameData = JSON.parse(JSON.stringify(state.game));\n      const currentCell: INumberCell = newGame.cells[index] as INumberCell;\n\n      if (currentCell.type === CellType.NumberCell) {\n        const index = currentCell.pencilMarks.indexOf(guess);\n\n        if (index < 0) {\n          currentCell.pencilMarks.push(guess);\n          currentCell.pencilMarks.sort();\n        } else {\n          currentCell.pencilMarks.splice(index, 1);\n        }\n        state.game = newGame;\n      }\n    },\n    autoPencil(state, action: PayloadAction) {\n      // set guesses where there is only one pencil mark option\n      state.game!.cells.forEach(c => {\n        if (c.type === CellType.NumberCell) {\n          const cell = c as INumberCell;\n          if (cell.pencilMarks?.length === 1) {\n            cell.guess = cell.pencilMarks[0];\n          }\n        }\n      });\n\n      // calculate pencil marks\n      makePencilmarks(state.game!, state.combinations!);\n    },\n  },\n});\n\nexport const {\n  fetchGameSuccess,\n  fetchCombinations,\n  setSelectedIndex,\n  setCurrentGame,\n  setGuess,\n  autoPencil,\n  togglePencilMark,\n} = gameSlice.actions;\n\nexport default gameSlice.reducer;\n\nexport const fetchGame = (): AppThunk => async (dispatch: any) => {\n  let game;\n  try {\n    const response = await axios.get('puzzles/sample.json', {\n      headers: { 'Access-Control-Allow-Origin': '*' },\n    });\n    game = response.data;\n  } catch (error) {\n    // TODO: Show error\n    // dispatch(setErrorAlert(`error fetching downloads`));\n    return;\n  }\n\n  dispatch(fetchGameSuccess(game));\n};\n","export interface ICombinationsForCount {\n  [sum: string]: number[][];\n}\n\nexport interface ICombinations {\n  [count: string]: ICombinationsForCount;\n}\n\nconst makeCombinations = () => {\n  const combinations: ICombinations = {};\n  const digits = new Array(10).fill(false);\n\n  const digitsToCombination = () => {\n    const set = new Array<number>();\n    let count = 0;\n    let sum = 0;\n\n    for (let index = 1; index < digits.length; index++) {\n      if (digits[index]) {\n        set.push(index);\n        count += 1;\n        sum += index;\n      }\n    }\n\n    if (!combinations[count]) {\n      combinations[count] = {};\n    }\n\n    if (!combinations[count][sum]) {\n      combinations[count][sum] = new Array<number[]>();\n    }\n\n    combinations[count][sum].push(set);\n  };\n\n  const _makeCombinations = (min: number, current: number) => {\n    if (current === 10) {\n      digitsToCombination();\n    } else {\n      digits[current] = true;\n      _makeCombinations(min, current + 1);\n      digits[current] = false;\n      _makeCombinations(min, current + 1);\n      current++;\n    }\n  };\n\n  for (let min = 1; min < 9; min++) {\n    digits[min] = true;\n    _makeCombinations(min, min + 1);\n    digits[min] = false;\n  }\n\n  delete combinations['1'];\n  return combinations;\n};\n\nexport default makeCombinations;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { CellType, IBaseGame, IGameData } from './gameSlice';\n\nexport enum Direction {\n  Horizontal = 0,\n  Vertical = 1,\n  Both = 2,\n}\n\nexport interface IDesignCell {\n  type: CellType;\n  index: number;\n  hintHorizontal?: number;\n  hintVertical?: number;\n}\n\nexport const designSteps = [\n  { label: 'Set Size' },\n  { label: 'Draw Grid' },\n  { label: 'Insert Hints' },\n  { label: 'Check Puzzle' },\n];\n\ntype DesignSliceState = {\n  activeStep: number;\n  puzzle: IGameData;\n};\n\nconst createGrid = (columns: number, rows: number) =>\n  Array.from({ length: columns * rows }, (item, index) => ({\n    index,\n    type: CellType.BlankCell,\n  }));\n\nconst initialState: DesignSliceState = {\n  activeStep: 0,\n  puzzle: {\n    name: 'Unnamed',\n    level: 4,\n    columnCount: 10,\n    rowCount: 10,\n    cells: createGrid(10, 10),\n  },\n};\n\nexport const designSlice = createSlice({\n  name: 'design',\n  initialState,\n  reducers: {\n    setActiveStep: (state, action) => {\n      state.activeStep = action.payload;\n    },\n    setBaseGame: (state, action: PayloadAction<IBaseGame>) => {\n      state.puzzle = { ...state.puzzle, ...action.payload };\n      state.puzzle.cells = createGrid(\n        state.puzzle.columnCount,\n        state.puzzle.rowCount\n      );\n    },\n    clearDesignGame: state => {\n      state = initialState;\n    },\n    setDesignGame: (state, action) => {\n      state.puzzle = action.payload;\n    },\n    updateCell: (state, action) => {\n      const newCell = action.payload;\n      state.puzzle.cells[newCell.index] = newCell;\n    },\n  },\n});\n\nexport const {\n  clearDesignGame,\n  setActiveStep,\n  setBaseGame,\n  setDesignGame,\n  updateCell,\n} = designSlice.actions;\n\nexport default designSlice.reducer;\n","import { Button } from 'primereact/button';\nimport { Dialog } from 'primereact/dialog';\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { CellType } from 'store/gameSlice';\nimport { IDesignCell, updateCell } from '../../store/designSlice';\nimport styles from './HintDialog.module.scss';\n\nexport interface Props {\n  cell: IDesignCell;\n  across: boolean;\n  down: boolean;\n  visible: boolean;\n  onHide: () => void;\n}\n\nconst HintDialog: React.FC<Props> = ({\n  cell,\n  across,\n  down,\n  visible,\n  onHide,\n}) => {\n  const [options, setOptions] = useState<number[]>([]);\n  const dispatch = useDispatch();\n\n  const handleClick = (n: number, acrossHint: boolean) => {\n    const newCell = { ...cell, type: CellType.HintCell };\n    if (acrossHint) {\n      newCell.hintHorizontal = n;\n    } else {\n      newCell.hintVertical = n;\n    }\n\n    dispatch(updateCell(newCell));\n    if (!acrossHint || !down) {\n      onHide();\n    }\n  };\n\n  const renderButtons = (across: boolean) => {\n    return (\n      <div className=''>\n        <div className='label'>{across ? 'Hint Across' : 'Hint Down'}</div>\n        <div className={styles.buttonGrid}>\n          {options.map(n => (\n            <Button\n              key={n}\n              label={'' + n}\n              onClick={() => handleClick(n, across)}\n              disabled={n < 3}\n            />\n          ))}\n        </div>\n      </div>\n    );\n  };\n\n  useEffect(() => {\n    // const numbers = Array.from({ length: 43 }, (e, i) => i + 3);\n    const numbers = Array.from({ length: 45 }, (e, i) => i + 1);\n    setOptions(numbers);\n  }, []);\n\n  return (\n    <Dialog\n      header='Set number(s) for hint cell'\n      style={{ width: '30vw' }}\n      visible={visible}\n      modal={true}\n      onHide={onHide}>\n      {across && renderButtons(true)}\n      {down && renderButtons(false)}\n    </Dialog>\n  );\n};\n\nexport default HintDialog;\n","import classnames from 'classnames';\nimport React, { useState } from 'react';\nimport { Direction, IDesignCell, updateCell } from '../../store/designSlice';\nimport styles from './DesignCell.module.scss';\nimport { RootState } from '../../store/store';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { CellType } from 'store/gameSlice';\nimport HintDialog from './HintDialog';\nimport '../playing/Cell.scss';\nimport '../playing/HintCell.scss';\n\nexport interface Props {\n  cell: IDesignCell;\n  index: number;\n}\n\nconst DesignCell: React.FC<Props> = ({ cell, index }) => {\n  const { activeStep, puzzle } = useSelector(\n    (state: RootState) => state.design\n  );\n  const dispatch = useDispatch();\n  const [dialogVisible, setDialogVisible] = useState(false);\n  const [across, setAcross] = useState<boolean>(false);\n  const [down, setDown] = useState<boolean>(false);\n\n  const hide = () => {\n    setDialogVisible(false);\n  };\n\n  const handleClick = (e: React.MouseEvent) => {\n    if (activeStep === 1) {\n      // Toggle between blank and number cell\n      const newCell = {\n        ...cell,\n        type:\n          cell.type === CellType.BlankCell\n            ? CellType.NumberCell\n            : CellType.BlankCell,\n      };\n      dispatch(updateCell(newCell));\n    } else if (activeStep === 2 && cell.type !== CellType.NumberCell) {\n      // Show dialog to pick hint value\n      // Find out if the hint is vertical or horizontal\n      setAcross(\n        cell.index + 1 < puzzle.cells.length &&\n          puzzle.cells[cell.index + 1].type === CellType.NumberCell\n      );\n\n      setDown(\n        cell.index + puzzle.columnCount < puzzle.cells.length &&\n          puzzle.cells[cell.index + puzzle.columnCount].type ===\n            CellType.NumberCell\n      );\n\n      (across || down) && setDialogVisible(true);\n    }\n  };\n\n  return (\n    <>\n      <div\n        className={classnames(styles.designCell, cell.type)}\n        onClick={handleClick}>\n        <div className='horizontalHint'>{cell.hintHorizontal}</div>\n        <div className='verticalHint'>{cell.hintVertical}</div>\n      </div>\n      <HintDialog\n        cell={cell}\n        visible={dialogVisible}\n        onHide={hide}\n        across={across}\n        down={down}\n      />\n    </>\n  );\n};\n\nexport default DesignCell;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { IDesignCell } from 'store/designSlice';\nimport { RootState } from '../../store/store';\nimport DesignCell from './DesignCell';\nimport styles from './DrawGrid.module.scss';\n\nconst DrawGrid: React.FC = () => {\n  const {\n    puzzle: { columnCount, cells },\n  } = useSelector((state: RootState) => state.design);\n\n  return (\n    <div>\n      <div className={styles.gameBackground}>\n        <div\n          className={styles.grid}\n          style={{\n            gridTemplateColumns: `repeat(${columnCount}, 1fr)`,\n          }}>\n          {cells.map((c, i) => (\n            <DesignCell key={i} index={i} cell={c as IDesignCell} />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default DrawGrid;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../../store/store';\n\nconst SetCells: React.FC = () => {\n  const {\n    puzzle: { name },\n  } = useSelector((state: RootState) => state.design);\n\n  return (\n    <>\n      <h5>{name}</h5>\n    </>\n  );\n};\n\nexport default SetCells;\n","import { ErrorMessage, Field } from 'formik';\nimport React from 'react';\n\ninterface Props {\n  name: string;\n  label: string;\n  as: any;\n  hint?: string;\n  [key: string]: any;\n}\n\nconst MyInput: React.FC<Props> = (props) => {\n  const { label, name, hint } = props;\n\n  return (\n    <div className=\"p-field\">\n      <label htmlFor={name}>{label}</label>\n\n      <div>\n        <Field {...props} />\n        {hint && <div dangerouslySetInnerHTML={{ __html: hint }} />}\n        <ErrorMessage name={name} component=\"div\" className=\"fieldErrorMessage\" />\n      </div>\n    </div>\n  );\n};\n\nexport default MyInput;\n","import { SelectButton, SelectButtonChangeParams } from 'primereact/selectbutton';\nimport React from 'react';\n\ninterface Props {\n  field: string;\n  label: string;\n  values: { [key: string]: any };\n  options: any;\n  setFieldValue: (label: string, newValue: number) => void;\n}\n\nconst MySlider: React.FC<Props> = ({\n  values,\n  field,\n  label,\n  options,\n  setFieldValue,\n}) => {\n  const handleChange = (event: SelectButtonChangeParams) => {\n    setFieldValue(field, event.value as number);\n  };\n\n  return (\n    <div className='p-field'>\n      <label htmlFor={field}>{label}</label>\n\n      <SelectButton\n        id={field}\n        value={values[field]}\n        options={options}\n        onChange={event => handleChange(event)}\n      />\n    </div>\n  );\n};\n\nexport default MySlider;\n","import { Slider, SliderChangeParams } from 'primereact/slider';\nimport React from 'react';\n\ninterface Props {\n  field: string;\n  label: string;\n  values: { [key: string]: any };\n  min?: number;\n  max?: number;\n  setFieldValue: (label: string, newValue: number) => void;\n}\n\nconst MySlider: React.FC<Props> = ({\n  values,\n  field,\n  label,\n  setFieldValue,\n  min,\n  max,\n}) => {\n  const handleChange = (event: SliderChangeParams) => {\n    setFieldValue(field, event.value as number);\n  };\n\n  return (\n    <div className='p-field'>\n      <label htmlFor={field}>\n        {label}: {values[field]}\n      </label>\n\n      <Slider\n        id={field}\n        value={values[field]}\n        onChange={event => handleChange(event)}\n        min={min}\n        max={max}\n      />\n    </div>\n  );\n};\n\nexport default MySlider;\n","import MyInput from 'components/MyInput';\nimport MySelectButton from 'components/MySelectButton';\nimport MySlider from 'components/MySlider';\nimport { Form, Formik } from 'formik';\nimport { Button } from 'primereact/button';\nimport { InputText } from 'primereact/inputtext';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setBaseGame } from 'store/designSlice';\nimport { IBaseGame } from 'store/gameSlice';\nimport * as Yup from 'yup';\nimport { RootState } from '../../store/store';\n\nconst difficulties = [\n  {\n    label: 'Easy',\n    value: 0,\n  },\n  {\n    label: 'Medium',\n    value: 1,\n  },\n  {\n    label: 'Medium Plus',\n    value: 2,\n  },\n  {\n    label: 'Hard',\n    value: 3,\n  },\n  {\n    label: 'Very Hard',\n    value: 4,\n  },\n];\n\nconst PuzzleSchema = Yup.object().shape({\n  name: Yup.string()\n    .max(50, 'Must be 50 characters or less')\n    .required('Required'),\n  level: Yup.number().min(0).max(4).required(),\n  columnCount: Yup.number()\n    .min(4, 'Must be between 4 and 30')\n    .max(30)\n    .required('Required'),\n  rowCount: Yup.number()\n    .min(4, 'Must be between 4 and 30')\n    .max(30)\n    .required('Required'),\n});\n\nconst SetSize: React.FC = () => {\n  const dispatch = useDispatch();\n  const { puzzle } = useSelector((state: RootState) => state.design);\n  const initialValues: IBaseGame = puzzle;\n\n  const handleSubmit = (values: IBaseGame) => {\n    dispatch(setBaseGame(values));\n  };\n\n  return (\n    <Formik\n      enableReinitialize\n      initialValues={initialValues}\n      onSubmit={handleSubmit}\n      validationSchema={PuzzleSchema}>\n      {({ setFieldValue, values }) => (\n        <Form className='p-fluid'>\n          <MyInput name='name' label='Puzzle Name' as={InputText} />\n\n          <MySelectButton\n            field='level'\n            label='Difficulty'\n            setFieldValue={setFieldValue}\n            options={difficulties}\n            values={values}\n          />\n\n          <MySlider\n            field='columnCount'\n            label='Breite'\n            setFieldValue={setFieldValue}\n            min={5}\n            max={40}\n            values={values}\n          />\n\n          <MySlider\n            field='rowCount'\n            label='Höhe'\n            setFieldValue={setFieldValue}\n            min={5}\n            max={40}\n            values={values}\n          />\n\n          <Button type='submit' label='Set Size' className='p-mt-2' />\n        </Form>\n      )}\n    </Formik>\n  );\n};\n\nexport default SetSize;\n","import { Button } from 'primereact/button';\nimport { Panel } from 'primereact/panel';\nimport { Steps } from 'primereact/steps';\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  designSteps,\n  setActiveStep,\n  setDesignGame,\n  clearDesignGame,\n} from 'store/designSlice';\nimport { RootState } from '../../store/store';\nimport styles from './CreateGame.module.scss';\nimport DrawGrid from './DrawGrid';\nimport SetCells from './SetCells';\nimport SetSize from './SetSize';\nimport { Toolbar } from 'primereact/toolbar';\nimport { setCurrentGame } from 'store/gameSlice';\nimport myHistory from 'myHistory';\n\nconst CreateGame: React.FC = () => {\n  const dispatch = useDispatch();\n  const { activeStep, puzzle } = useSelector(\n    (state: RootState) => state.design\n  );\n\n  const flipView = (nextStep: number) => {\n    dispatch(setActiveStep(nextStep));\n    localStorage.setItem('puzzle', JSON.stringify(puzzle));\n  };\n\n  useEffect(() => {\n    const puzzleJSON = localStorage.getItem('puzzle');\n    if (puzzleJSON) {\n      console.log('Found puzzle in local storage');\n      const loadedPuzzle = JSON.parse(puzzleJSON);\n      dispatch(setDesignGame(loadedPuzzle));\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const handleSubmit = () => {\n    dispatch(setCurrentGame(puzzle));\n    dispatch(clearDesignGame());\n    localStorage.removeItem('puzzle');\n    myHistory.push('/play');\n  };\n\n  const leftButtons = (\n    <>\n      <Button\n        label='Zurück'\n        icon='mdi mdi-arrow-left'\n        onClick={e => flipView(activeStep - 1)}\n        disabled={activeStep === 0}\n      />\n      <Button\n        label='Weiter'\n        icon='mdi mdi-arrow-right'\n        onClick={e => flipView(activeStep + 1)}\n        disabled={activeStep === designSteps.length - 1}\n      />\n      <Button\n        label='Übernehmen'\n        icon='mdi mdi-hand-okay'\n        onClick={handleSubmit}\n        disabled={activeStep !== designSteps.length - 1}\n      />\n    </>\n  );\n\n  return (\n    <div className={styles.createGame}>\n      <Panel header={`Create A New Puzzle: ${designSteps[activeStep].label}`}>\n        <div className={styles.createSteps}>\n          <Steps model={designSteps} activeIndex={activeStep} />\n        </div>\n\n        {activeStep === 0 && <SetSize />}\n        {activeStep === 1 && <SetCells />}\n        <DrawGrid />\n      </Panel>\n\n      <Toolbar left={leftButtons} />\n    </div>\n  );\n};\n\nexport default CreateGame;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport classNames from 'classnames';\nimport { Button } from 'primereact/button';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport styles from './MainMenu.module.scss';\n\nconst MainMenu: React.FC = () => {\n  return (\n    <div className={styles.content}>\n      <div className={classNames('text-center')}>\n        <div className='mb-3 font-bold text-2xl'>\n          <span className='text-900'>The best </span>\n          <span className='text-blue-600'>Kakuro Game </span>\n          <span className='text-900'>money can buy</span>\n        </div>\n        <div className='text-700 text-sm mb-6'>\n          All of this is work in progress, so be patient and stay tuned.\n        </div>\n        <div className='grid'>\n          <div className='col-12 md:col-4 mb-4 px-5'>\n            <Link to='/create'>\n              <Button icon='mdi mdi-pencil' className='p-button-lg' />\n            </Link>\n            <div className='text-900 mb-3 font-medium'>Create new game</div>\n          </div>\n          <div className='col-12 md:col-4 mb-4 px-5'>\n            <Link to='/play'>\n              <Button\n                icon='mdi mdi-controller-classic'\n                className='p-button-lg'\n              />\n            </Link>\n            <div className='text-900 mb-3 font-medium'>Play Game!</div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default MainMenu;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport getCombinations from 'helpers/getCombinations';\nimport React, { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../../store/store';\nimport styles from './CombinationLine.module.scss';\n\nconst CombinationLine: React.FC = () => {\n  const { combinations, hints } = useSelector((state: RootState) => state.game);\n  const [possibilities, setPossibilities] = useState<number[][][]>([[], []]);\n\n  const renderDigit = (d: number, direction: number) => {\n    if (hints[direction].used.includes(d)) {\n      return <span className={styles.highlight}>{d}</span>;\n    } else {\n      return <span>{d}</span>;\n    }\n  };\n\n  const renderPossibility = (a: number[], index: number, direction: number) => {\n    return (\n      <span className={styles.possibility} key={index}>\n        {a.map(d => renderDigit(d, direction))}\n      </span>\n    );\n  };\n\n  const renderPossibilities = (a: number[][], direction: number) => {\n    return <span>{a.map((b, i) => renderPossibility(b, i, direction))}</span>;\n  };\n\n  const renderLine = (direction: number) => (\n    <>\n      <span className={styles.sum}>{hints[direction].sum}:</span>\n      {renderPossibilities(possibilities[direction], direction)}\n    </>\n  );\n\n  useEffect(() => {\n    if (hints[0].index > -1) {\n      setPossibilities([\n        getCombinations(hints[0], combinations!),\n        getCombinations(hints[1], combinations!),\n      ]);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [hints]);\n\n  return (\n    <div className={styles.combinations}>\n      <div className={styles.text}>\n        <div>{hints && renderLine(0)}</div>\n        <div>{hints && renderLine(1)}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default CombinationLine;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setGuess, togglePencilMark } from '../../store/gameSlice';\nimport { RootState } from '../../store/store';\nimport styles from './GuessButton.module.scss';\nimport { Button } from 'primereact/button';\nimport classNames from 'classnames';\n\nexport interface Props {\n  digit: number;\n  pencilMark: boolean;\n}\n\nconst GuessButton: React.FC<Props> = ({ digit, pencilMark }) => {\n  const { selectedIndex } = useSelector((state: RootState) => state.game);\n  const dispatch = useDispatch();\n\n  const handleGuessClick = (event: React.MouseEvent) => {\n    if (digit >= 0 && digit <= 9 && selectedIndex) {\n      if (pencilMark) {\n        dispatch(togglePencilMark({ index: selectedIndex, guess: digit }));\n      } else {\n        dispatch(setGuess({ index: selectedIndex, guess: digit }));\n      }\n    }\n  };\n\n  return (\n    <Button\n      className={classNames(styles.guessButton, { pencilMark })}\n      onClick={handleGuessClick}>\n      {digit}\n    </Button>\n  );\n};\n\nexport default GuessButton;\n","import React from 'react';\nimport styles from './Controls.module.scss';\nimport classnames from 'classnames';\nimport GuessButton from './GuessButton';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState } from '../../store/store';\nimport { autoPencil, setGuess } from '../../store/gameSlice';\nimport { Button } from 'primereact/button';\n\n/*\n * Here be number buttons for guesses and pencil marks\n */\nconst Controls: React.FC = () => {\n  const { selectedIndex } = useSelector((state: RootState) => state.game);\n  const dispatch = useDispatch();\n  const digits = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n\n  const handleDeleteClick = (event: React.MouseEvent) => {\n    if (selectedIndex) {\n      dispatch(setGuess({ index: selectedIndex, guess: 0 }));\n    }\n  };\n\n  const handleAutoPencil = (event: React.MouseEvent) => {\n    dispatch(autoPencil());\n  };\n\n  const renderButton = (digit: number, pencilMark: boolean) => {\n    return <GuessButton key={digit} digit={digit} pencilMark={pencilMark} />;\n  };\n\n  return (\n    <aside className={classnames('controls', styles.controls)}>\n      <div className={styles.guessButtons}>\n        <div className={styles.columns}>\n          {digits.map(d => renderButton(d, true))}\n        </div>\n\n        <div className={styles.columns}>\n          {digits.map(d => renderButton(d, false))}\n        </div>\n\n        <Button\n          className={classnames('button', 'is-warning', 'is-large')}\n          onClick={handleDeleteClick}>\n          X\n        </Button>\n\n        <Button\n          className={classnames('button is-large')}\n          onClick={handleAutoPencil}>\n          Auto Pencil\n        </Button>\n      </div>\n\n      <div className='pencilmarks'></div>\n    </aside>\n  );\n};\n\nexport default Controls;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport classnames from 'classnames';\nimport React from 'react';\nimport { IBlankCell } from '../../store/gameSlice';\nimport styles from './BlankCell.module.scss';\n\nexport interface Props {\n  cell: IBlankCell;\n  index: number;\n}\n\nconst BlankCell: React.FC<Props> = ({ cell, index }) => {\n  return <div className={classnames('gamecell', styles.blank)}></div>;\n};\n\nexport default BlankCell;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport classnames from 'classnames';\nimport React from 'react';\nimport { IHintCell } from '../../store/gameSlice';\nimport './HintCell.scss';\n\nexport interface Props {\n  cell: IHintCell;\n  index: number;\n}\n\nconst HintCell: React.FC<Props> = ({ cell, index }) => {\n  return (\n    <div className={classnames('gamecell', 'hintCell')}>\n      <div className='horizontalHint'>{cell.hintHorizontal}</div>\n      <div className='verticalHint'>{cell.hintVertical}</div>\n    </div>\n  );\n};\n\nexport default HintCell;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport classnames from 'classnames';\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { INumberCell, setSelectedIndex } from '../../store/gameSlice';\nimport styles from './NumberCell.module.scss';\nimport { RootState } from '../../store/store';\nimport { useSelector } from 'react-redux';\n\nexport interface Props {\n  cell: INumberCell;\n  index: number;\n}\n\nconst NumberCell: React.FC<Props> = ({ cell, index }) => {\n  const selectedIndex = useSelector(\n    (state: RootState) => state.game.selectedIndex\n  );\n  const dispatch = useDispatch();\n\n  const handleClick = (event: React.MouseEvent) => {\n    dispatch(setSelectedIndex(index));\n  };\n\n  return (\n    <div\n      className={classnames('gamecell', styles.number, {\n        selected: index === selectedIndex,\n      })}\n      onClick={handleClick}>\n      {cell.guess > 0 && (\n        <div className={classnames(styles.guess)}>{cell.guess}</div>\n      )}\n      {!cell.guess && cell.pencilMarks?.length > 0 && (\n        <div className={classnames(styles.pencilMarks)}>{cell.pencilMarks.join('')}</div>\n      )}\n    </div>\n  );\n};\n\nexport default NumberCell;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport classnames from 'classnames';\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  CellType,\n  fetchCombinations,\n  fetchGame,\n  IBlankCell,\n  ICell,\n  IHintCell,\n  INumberCell,\n  setGuess,\n} from '../../store/gameSlice';\nimport { RootState } from '../../store/store';\nimport BlankCell from './BlankCell';\nimport './Cell.scss';\nimport styles from './GameGrid.module.scss';\nimport HintCell from './HintCell';\nimport NumberCell from './NumberCell';\n\nconst GameGrid: React.FC = () => {\n  const { combinations, game, selectedIndex } = useSelector(\n    (state: RootState) => state.game\n  );\n  const dispatch = useDispatch();\n\n  const handleKeyPress = (event: any) => {\n    if (!selectedIndex) {\n      // do nothing if no cell selected\n      return;\n    }\n\n    if (event.key >= '0' && event.key <= '9') {\n      dispatch(setGuess({ index: selectedIndex, guess: +event.key }));\n    } else if (event.key === 'Delete') {\n      dispatch(setGuess({ index: selectedIndex, guess: 0 }));\n    } else {\n      console.log('Key pressed:', event.key);\n    }\n  };\n\n  const renderCell = (cell: ICell, index: number) => {\n    if (cell.type === CellType.BlankCell) {\n      return <BlankCell cell={cell as IBlankCell} index={index} key={index} />;\n    } else if (cell.type === CellType.HintCell) {\n      return <HintCell cell={cell as IHintCell} index={index} key={index} />;\n    } else {\n      // type == Number\n      return (\n        <NumberCell cell={cell as INumberCell} index={index} key={index} />\n      );\n    }\n  };\n\n  const renderGrid = () => {\n    if (!game) {\n      return;\n    }\n\n    return (\n      <div\n        className={styles.grid}\n        style={{\n          gridTemplateColumns: `repeat(${game!.columnCount}, 1fr)`,\n          gridTemplateRows: `repeat(${game!.rowCount}, 1fr)`,\n        }}>\n        {game.cells.map((cell, i) => renderCell(cell, i))}\n      </div>\n    );\n  };\n\n  useEffect(() => {\n    if (game == null) {\n      dispatch(fetchGame());\n    }\n    if (combinations == null) {\n      dispatch(fetchCombinations());\n    }\n  }, []);\n\n  return (\n    <div className={classnames('main', styles.gameBackground)}>\n      <div className={styles.gamegrid} onKeyDown={handleKeyPress} tabIndex={-1}>\n        {renderGrid()}\n      </div>\n    </div>\n  );\n};\n\nexport default GameGrid;\n","import CombinationLine from './CombinationLine';\nimport React from 'react';\nimport Controls from './Controls';\nimport GameGrid from './GameGrid';\n\nconst PlayGame: React.FC = () => {\n  return (\n    <>\n      <div className='content'>\n        <GameGrid />\n        <Controls />\n      </div>\n\n      <CombinationLine />\n    </>\n  );\n};\n\nexport default PlayGame;\n","import {\n  Action,\n  combineReducers,\n  configureStore,\n  ThunkAction,\n} from '@reduxjs/toolkit';\nimport gameReducer from './gameSlice';\nimport designReducer from './designSlice';\n\nexport const rootReducer = combineReducers({\n  game: gameReducer,\n  design: designReducer,\n});\n\nconst store = configureStore({\n  devTools: process.env.NODE_ENV !== 'production',\n  reducer: rootReducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\nexport type AppThunk = ThunkAction<void, RootState, null, Action<string>>;\nexport type AppDispatch = typeof store.dispatch;\n\nexport default store;\n","import MyMenu from 'components/MyMenu';\nimport CreateGame from 'features/creating/CreateGame';\nimport MainMenu from 'features/menu/MainMenu';\nimport PlayGame from 'features/playing/PlayGame';\nimport myHistory from 'myHistory';\nimport React from 'react';\nimport { Provider } from 'react-redux';\nimport { Router, Route, Switch } from 'react-router-dom';\nimport './App.scss';\nimport store from './store/store';\n\nconst App: React.FC = () => {\n  return (\n    <Provider store={store}>\n      <MyMenu />\n\n      <Router history={myHistory}>\n        <Switch>\n          <Route path='/create'>\n            <CreateGame />\n          </Route>\n          <Route path='/play'>\n            <PlayGame />\n          </Route>\n          <Route path='/'>\n            <MainMenu />\n          </Route>\n        </Switch>\n      </Router>\n    </Provider>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"combinations\":\"CombinationLine_combinations__2uXXm\",\"text\":\"CombinationLine_text__3BaJ1\",\"sum\":\"CombinationLine_sum__ijz9v\",\"possibility\":\"CombinationLine_possibility__ru2Ma\",\"highlight\":\"CombinationLine_highlight__2hWQX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"controls\":\"Controls_controls__fpjJI\",\"columns\":\"Controls_columns__1dogA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"gameBackground\":\"GameGrid_gameBackground__2gUQF\",\"grid\":\"GameGrid_grid__3SI7n\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"number\":\"NumberCell_number__1mt2Y\",\"guess\":\"NumberCell_guess__1Iq08\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"createGame\":\"CreateGame_createGame__t-nS6\",\"createSteps\":\"CreateGame_createSteps__3TBZt\",\"p-steps\":\"CreateGame_p-steps__1OyM9\",\"p-steps-item\":\"CreateGame_p-steps-item__2Lv77\",\"p-menuitem-link\":\"CreateGame_p-menuitem-link__3yOB-\",\"p-steps-title\":\"CreateGame_p-steps-title__6eRPZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"gameBackground\":\"DrawGrid_gameBackground__2dTqA\",\"grid\":\"DrawGrid_grid__XoYjv\"};"],"sourceRoot":""}